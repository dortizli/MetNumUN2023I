{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/dortizli/MetNumUN2023I/blob/main/LAB1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ydW-Cp4REnEe"
      },
      "source": [
        "<div align=\"center\">\n",
        "<img style=\"display: block; margin: auto;\" alt=\"photo\" src=\"https://upload.wikimedia.org/wikipedia/en/d/de/Quantopian_logo_2017.png\">\n",
        "</div> \n",
        "\n",
        "\n",
        "# Colab Yahoo Introduction to the Research Environment\n",
        "\n",
        "The research environment is powered by IPython notebooks, which allow one to perform a great deal of data analysis and statistical validation. We'll demonstrate a few simple techniques here."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CRAZIpakEnEj"
      },
      "source": [
        "##Code Cells vs. Text Cells\n",
        "\n",
        "As you can see, each cell can be either code or text. To select between them, choose from the 'Cell Type' dropdown menu on the top left."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DQ49NGLoEnEk"
      },
      "source": [
        "##Executing a Command\n",
        "\n",
        "A code cell will be evaluated when you press play, or when you press the shortcut, shift-enter. Evaluating a cell evaluates each line of code in sequence, and prints the results of the last line below the cell."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KE3OSs-AEnEl",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0ec70162-f44f-4857-9c05-6cc91b4fcd26"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4"
            ]
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "2 + 2"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 1**"
      ],
      "metadata": {
        "id": "BZWUQIgha2PO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "5 + 16"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-eHVWoQia5lX",
        "outputId": "d7686e0d-077a-42ec-de37-50c396170fbe"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "21"
            ]
          },
          "metadata": {},
          "execution_count": 1
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oPPlhdlzEnEm"
      },
      "source": [
        "Sometimes there is no result to be printed, as is the case with assignment."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "id": "Z4grFlsDEnEm"
      },
      "outputs": [],
      "source": [
        "X = 2"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 2**"
      ],
      "metadata": {
        "id": "SjsBdDkcbA6y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Y = 10"
      ],
      "metadata": {
        "id": "jQML1D5DbAAh"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vz5ETS4WEnEn"
      },
      "source": [
        "Remember that only the result from the last line is printed."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gbUiPYI3EnEo",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "35c28eea-498b-456a-bbfc-a383f3b4c599"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "2 + 2\n",
        "3 + 3"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 3**"
      ],
      "metadata": {
        "id": "35jIhUoBbKrR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "6 + 5\n",
        "5 + 7"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cYnn9yoGbORa",
        "outputId": "23a88f9b-1f15-4ba6-a882-e44dd91c555c"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "12"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dmJi5wb4EnEo"
      },
      "source": [
        "However, you can print whichever lines you want using the `print` statement."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dlMzqF2gEnEp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e64d80b4-de37-40b1-93ff-42e705400b05"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "print(2 + 2)\n",
        "3 + 3"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 4**"
      ],
      "metadata": {
        "id": "c_h3XH2av4OM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print (5+7)\n",
        "8+6"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pWp7Y6mEv75u",
        "outputId": "388b9574-63b2-4bd7-a7a8-276db62d8491"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "12\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "14"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZAmnTqjHEnEq"
      },
      "source": [
        "##Knowing When a Cell is Running\n",
        "\n",
        "While a cell is running, a `[*]` will display on the left. When a cell has yet to be executed, `[ ]` will display. When it has been run, a number will display indicating the order in which it was run during the execution of the notebook `[5]`. Try on this cell and note it happening."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9Sh3ZaPAEnEq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8c3e85e3-64bc-416b-e8cc-9b298db7cbb8"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "49999995000000"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ],
      "source": [
        "#Take some time to run something\n",
        "c = 0\n",
        "for i in range(10000000):\n",
        "    c = c + i\n",
        "c"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 5**"
      ],
      "metadata": {
        "id": "A1iwMkI11Qio"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "d = 2\n",
        "for i in range(15800):\n",
        "  d = d+i\n",
        "d"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0q2erxmm1TTa",
        "outputId": "3e3a7c41-1185-4c66-8d9a-8e32d415120d"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "124812102"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZgD5ktlNEnEq"
      },
      "source": [
        "##Importing Libraries\n",
        "\n",
        "The vast majority of the time, you'll want to use functions from pre-built libraries. You can't import every library on Quantopian due to security issues, but you can import most of the common scientific ones. Here I import numpy and pandas, the two most common and useful libraries in quant finance. I recommend copying this import statement to every new notebook.\n",
        "\n",
        "Notice that you can rename libraries to whatever you want after importing. The `as` statement allows this. Here we use `np` and `pd` as aliases for `numpy` and `pandas`. This is a very common aliasing and will be found in most code snippets around the web. The point behind this is to allow you to type fewer characters when you are frequently accessing these libraries."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "collapsed": true,
        "id": "Mz48FtHtEnEr"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "# This is a plotting library for pretty pictures.\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n"
      ],
      "metadata": {
        "id": "xK5woAwp71sm"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pMrxzTXpEnEr"
      },
      "source": [
        "##Tab Autocomplete\n",
        "\n",
        "Pressing tab will give you a list of IPython's best guesses for what you might want to type next. This is incredibly valuable and will save you a lot of time. If there is only one possible option for what you could type next, IPython will fill that in for you. Try pressing tab very frequently, it will seldom fill in anything you don't want, as if there is ambiguity a list will be shown. This is a great way to see what functions are available in a library.\n",
        "\n",
        "Try placing your cursor after the `.` and pressing tab."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.random."
      ],
      "metadata": {
        "id": "C4i5XJTRlIQR",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 130
        },
        "outputId": "af2347da-623f-4b29-9ef3-cacf1cf4c74c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-18-1a778a4e80a5>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    np.random.\u001b[0m\n\u001b[0m              ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HBmhMQQ_EnEs"
      },
      "source": [
        "##Getting Documentation Help\n",
        "\n",
        "Placing a question mark after a function and executing that line of code will give you the documentation IPython has for that function. It's often best to do this in a new cell, as you avoid re-executing other code and running into bugs."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "id": "1GwTwYHhEnEs"
      },
      "outputs": [],
      "source": [
        "np.random.normal?"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 6**"
      ],
      "metadata": {
        "id": "FF5VQhob1kX8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "np.random.binomial?"
      ],
      "metadata": {
        "id": "vKYGoN6s1oJu"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GZcWqDyIEnEs"
      },
      "source": [
        "##Sampling\n",
        "\n",
        "We'll sample some random data using a function from `numpy`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "id": "xNQYx1FjEnEt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f2764001-e627-476f-d076-a4023eb73716"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 2.16036830e+00, -2.07818784e+00,  7.04255699e-01, -2.20750440e+00,\n",
              "        5.28770787e-01, -7.63845979e-02, -6.62169175e-01,  1.45348018e+00,\n",
              "       -6.62024016e-01,  1.67131470e-01, -2.24919377e-01,  9.26296665e-01,\n",
              "       -6.97572695e-01, -4.99740171e-01, -1.82733900e-01, -4.60442501e-01,\n",
              "        1.15766063e+00,  1.30915968e+00,  7.13386564e-01, -3.03131843e-01,\n",
              "        1.02538727e+00,  1.08127628e+00,  1.71712140e-01, -1.33681805e+00,\n",
              "       -1.58881904e+00, -9.15194731e-02,  1.67521886e+00,  1.79687847e-01,\n",
              "        8.91625008e-01,  1.48151261e+00,  1.78766312e+00,  1.79333235e-01,\n",
              "       -1.69388006e-03,  1.36196889e+00, -1.73434304e+00, -9.75095160e-01,\n",
              "       -9.16840427e-01, -1.01271091e-01,  2.44590844e+00, -7.49321622e-01,\n",
              "       -7.44627256e-01,  4.51505568e-01, -8.95924594e-01, -1.09967995e+00,\n",
              "       -1.07171633e+00, -9.70222159e-01,  1.49352088e+00,  1.64875464e-02,\n",
              "        1.58679402e+00,  1.11558440e+00, -8.05490590e-01,  1.73806593e+00,\n",
              "       -1.46456351e+00, -1.01297638e+00,  1.77354058e-01, -8.49416943e-01,\n",
              "        6.71221553e-01,  9.80095797e-01,  2.81695362e+00, -1.55488232e+00,\n",
              "        6.72770059e-03,  2.54128780e-01,  3.46716833e-01, -2.02963515e+00,\n",
              "        1.22046223e-01, -1.19196567e-01,  1.60486075e+00, -1.04999453e+00,\n",
              "       -5.90807335e-01, -8.95361443e-01, -7.54636689e-01, -1.51915769e-01,\n",
              "       -1.10941215e+00, -8.78349680e-01,  5.57972348e-01,  5.61410316e-01,\n",
              "        1.51538659e+00,  7.35009130e-01,  5.32323733e-01, -1.31020708e+00,\n",
              "       -2.33199796e-01, -1.10825876e+00,  1.40589542e-01, -4.93349875e-01,\n",
              "        1.85756933e-01, -2.95077153e-01,  1.11746089e+00, -1.12376924e+00,\n",
              "       -9.92182006e-01, -1.13570511e+00,  1.50571032e-02, -9.88970744e-01,\n",
              "       -3.41742588e-01, -1.08133740e+00, -9.48784982e-01, -1.14676339e+00,\n",
              "        1.90381449e+00, -1.17407050e-01,  1.10322194e+00, -6.72471467e-01])"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ],
      "source": [
        "# Sample 100 points with a mean of 0 and an std of 1. This is a standard normal distribution.\n",
        "X = np.random.normal(0, 1, 100)\n",
        "X"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 7**"
      ],
      "metadata": {
        "id": "b0qFIzX47ybW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Y = np.random.lognormal(0, 2, 110)\n",
        "Y"
      ],
      "metadata": {
        "id": "dHN0UBysgCrV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d06b30c5-9783-45ff-ad4f-256b3041b581"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([7.25949179e+00, 8.68904263e-01, 3.44636570e-01, 5.78363052e-02,\n",
              "       1.91422165e+00, 2.55135218e-01, 2.69721549e-01, 9.55365057e+00,\n",
              "       2.73160676e+00, 4.13088188e-01, 9.68727445e-01, 1.75218649e+00,\n",
              "       8.99020847e-02, 2.19142648e+00, 7.46226431e+01, 2.37620024e+00,\n",
              "       3.55136944e-02, 4.10862341e-01, 3.38448967e-01, 6.67220406e+01,\n",
              "       6.18982056e-01, 5.21346584e-01, 6.35676764e-02, 1.16203779e+00,\n",
              "       1.68802925e+00, 3.78988015e-01, 2.03282393e+00, 5.86066013e-02,\n",
              "       2.30791063e-02, 2.20032780e-01, 1.24261539e+00, 3.27104447e-02,\n",
              "       3.89312548e-02, 5.01039195e-01, 3.35077565e-01, 4.02460568e-02,\n",
              "       6.56682981e-01, 2.09862467e+00, 1.71645079e-01, 3.31335596e+02,\n",
              "       4.63367680e-01, 4.32063311e+00, 2.03377247e+00, 1.41929106e-01,\n",
              "       6.38330479e+01, 2.20864441e+00, 1.82156370e+01, 2.95941022e-02,\n",
              "       5.93119762e-01, 8.00178686e-01, 6.62584643e-03, 8.32827122e-01,\n",
              "       8.79724659e+00, 4.83688704e+01, 3.00478435e+01, 4.98469232e-01,\n",
              "       6.26136134e-02, 7.00146358e-01, 7.06616139e-01, 1.45761597e-01,\n",
              "       2.50531304e+00, 7.43688179e-01, 9.81347402e-01, 3.34331311e+00,\n",
              "       6.24646372e-02, 1.42575841e-01, 9.39866136e-01, 1.53698325e-01,\n",
              "       3.81212258e-01, 1.22557191e+02, 8.13389135e+00, 2.37625974e-01,\n",
              "       1.42058663e+00, 4.92865011e+01, 2.31114130e-01, 2.72666872e+00,\n",
              "       1.47373683e+00, 8.38447468e-01, 2.89586600e-01, 5.23280624e+00,\n",
              "       6.71604985e-02, 1.25076816e-02, 5.74744195e-01, 3.51004272e-01,\n",
              "       7.39631627e-02, 6.29418102e-01, 3.03075147e+00, 1.00372417e+00,\n",
              "       4.82894691e-01, 3.58503283e-01, 9.67839564e-02, 4.36147895e-01,\n",
              "       6.15953635e-01, 4.05139684e+00, 1.52751940e-01, 3.35599024e-01,\n",
              "       1.51232612e-01, 4.53644761e-02, 1.41068030e-01, 4.14861305e-01,\n",
              "       3.26938457e+00, 8.05401371e-02, 2.30636045e-01, 1.41173424e+00,\n",
              "       1.00238822e+01, 1.17266871e+01, 2.74969423e-01, 9.07511105e-02,\n",
              "       2.93397149e-01, 1.64786452e-01])"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p3zaV-naEnEt"
      },
      "source": [
        "##Plotting\n",
        "\n",
        "We can use the plotting library we imported as follows."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "id": "W04St5giEnEt",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 285
        },
        "outputId": "c0c899b6-a0d2-4978-bc49-d627a8c14212"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f94b82aed60>]"
            ]
          },
          "metadata": {},
          "execution_count": 30
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plt.plot(X)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 8**"
      ],
      "metadata": {
        "id": "AYSAPPrzxGew"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(Y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "id": "6djEUnDBxJ9i",
        "outputId": "5b41d301-6192-4cb8-cd6e-24ea744d87ac"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f94b59c4c10>]"
            ]
          },
          "metadata": {},
          "execution_count": 31
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "V8xkW9G0EnEt"
      },
      "source": [
        "###Squelching Line Output\n",
        "\n",
        "You might have noticed the annoying line of the form `[<matplotlib.lines.Line2D at 0x7f72fdbc1710>]` before the plots. This is because the `.plot` function actually produces output. Sometimes we wish not to display output, we can accomplish this with the semi-colon as follows."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ghNQMUhaEnEu",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "da8db6b3-db6c-41ba-f56b-2c15444e114e"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plt.plot(X);"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 9**"
      ],
      "metadata": {
        "id": "OJFZHgMBxPwE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(Y);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "IF6-_keHxSn6",
        "outputId": "1c3464f6-aa03-467f-97c8-ae3f683c08db"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LMrc6lfXEnEu"
      },
      "source": [
        "###Adding Axis Labels\n",
        "\n",
        "No self-respecting quant leaves a graph without labeled axes. Here are some commands to help with that."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "id": "a9Qu76QPEnEu",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "outputId": "d3716445-1052-4010-e3a9-13dd66c8251b"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "X = np.random.normal(0, 1, 100)\n",
        "X2 = np.random.normal(0, 1, 100)\n",
        "\n",
        "plt.plot(X);\n",
        "plt.plot(X2);\n",
        "plt.xlabel('Time') # The data we generated is unitless, but don't forget units in general.\n",
        "plt.ylabel('Returns')\n",
        "plt.legend(['X', 'X2']);"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 10**"
      ],
      "metadata": {
        "id": "5ylXIG77xcW-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Y = np.random.lognormal(0,1,160)\n",
        "Y2 = np.random.lognormal(0,1,160)\n",
        "plt.plot(Y);\n",
        "plt.plot(Y2);\n",
        "plt.xlabel('Day')\n",
        "plt.ylabel('hour')\n",
        "plt.legend(['Y','Y2']);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "QaEziMstxfbP",
        "outputId": "4cfc9aeb-4ffd-4b1b-b6dd-3bb15b16e5c0"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "btTN9YaFEnEu"
      },
      "source": [
        "##Generating Statistics\n",
        "\n",
        "Let's use `numpy` to take some simple statistics."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {
        "id": "cM0cG4mJEnEu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8f87807f-c9d3-4a87-896c-83c705e36e2c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-0.12323843954247257"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ],
      "source": [
        "np.mean(X)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {
        "id": "383jlDx-EnEu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f503a650-a7ac-4ad0-9546-d9a6acebd0f2"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0164021850979919"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ],
      "source": [
        "np.std(X)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 11**"
      ],
      "metadata": {
        "id": "a_w7VkLry0Mk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "np.mean(Y)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3xTqyMUDy4Pa",
        "outputId": "d622242c-1d1e-40c0-aef9-0ae44eeee4fb"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.3587839199081213"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.std(Y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kAb9fnF8y6Z6",
        "outputId": "4e6067aa-ff4f-41c6-c2ba-10f4360e49c7"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.4069864855644343"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GoxKGTVaEnEu"
      },
      "source": [
        "##Getting Real Pricing Data\n",
        "\n",
        "Randomly sampled data can be great for testing ideas, but let's get some real data. We can use `get_pricing` to do that. You can use the `?` syntax as discussed above to get more information on `get_pricing`'s arguments."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install yfinance"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 993
        },
        "id": "6_wGrpaIjiyx",
        "outputId": "1f35da49-ba1c-4188-caf7-abbe5f2b02c9"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting yfinance\n",
            "  Downloading yfinance-0.2.12-py2.py3-none-any.whl (59 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m59.2/59.2 KB\u001b[0m \u001b[31m3.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: lxml>=4.9.1 in /usr/local/lib/python3.8/dist-packages (from yfinance) (4.9.2)\n",
            "Collecting beautifulsoup4>=4.11.1\n",
            "  Downloading beautifulsoup4-4.11.2-py3-none-any.whl (129 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m129.4/129.4 KB\u001b[0m \u001b[31m10.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting html5lib>=1.1\n",
            "  Downloading html5lib-1.1-py2.py3-none-any.whl (112 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m112.2/112.2 KB\u001b[0m \u001b[31m13.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting frozendict>=2.3.4\n",
            "  Downloading frozendict-2.3.5-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (111 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m111.2/111.2 KB\u001b[0m \u001b[31m12.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: pytz>=2022.5 in /usr/local/lib/python3.8/dist-packages (from yfinance) (2022.7.1)\n",
            "Collecting requests>=2.26\n",
            "  Downloading requests-2.28.2-py3-none-any.whl (62 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.8/62.8 KB\u001b[0m \u001b[31m7.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: multitasking>=0.0.7 in /usr/local/lib/python3.8/dist-packages (from yfinance) (0.0.11)\n",
            "Requirement already satisfied: pandas>=1.3.0 in /usr/local/lib/python3.8/dist-packages (from yfinance) (1.3.5)\n",
            "Collecting cryptography>=3.3.2\n",
            "  Downloading cryptography-39.0.1-cp36-abi3-manylinux_2_28_x86_64.whl (4.2 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.2/4.2 MB\u001b[0m \u001b[31m57.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: appdirs>=1.4.4 in /usr/local/lib/python3.8/dist-packages (from yfinance) (1.4.4)\n",
            "Requirement already satisfied: numpy>=1.16.5 in /usr/local/lib/python3.8/dist-packages (from yfinance) (1.22.4)\n",
            "Collecting soupsieve>1.2\n",
            "  Downloading soupsieve-2.4-py3-none-any.whl (37 kB)\n",
            "Requirement already satisfied: cffi>=1.12 in /usr/local/lib/python3.8/dist-packages (from cryptography>=3.3.2->yfinance) (1.15.1)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.8/dist-packages (from html5lib>=1.1->yfinance) (0.5.1)\n",
            "Requirement already satisfied: six>=1.9 in /usr/local/lib/python3.8/dist-packages (from html5lib>=1.1->yfinance) (1.15.0)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.8/dist-packages (from pandas>=1.3.0->yfinance) (2.8.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.8/dist-packages (from requests>=2.26->yfinance) (2.10)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.8/dist-packages (from requests>=2.26->yfinance) (3.0.1)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.8/dist-packages (from requests>=2.26->yfinance) (2022.12.7)\n",
            "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.8/dist-packages (from requests>=2.26->yfinance) (1.24.3)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.8/dist-packages (from cffi>=1.12->cryptography>=3.3.2->yfinance) (2.21)\n",
            "Installing collected packages: soupsieve, requests, html5lib, frozendict, cryptography, beautifulsoup4, yfinance\n",
            "  Attempting uninstall: requests\n",
            "    Found existing installation: requests 2.25.1\n",
            "    Uninstalling requests-2.25.1:\n",
            "      Successfully uninstalled requests-2.25.1\n",
            "  Attempting uninstall: html5lib\n",
            "    Found existing installation: html5lib 1.0.1\n",
            "    Uninstalling html5lib-1.0.1:\n",
            "      Successfully uninstalled html5lib-1.0.1\n",
            "  Attempting uninstall: beautifulsoup4\n",
            "    Found existing installation: beautifulsoup4 4.6.3\n",
            "    Uninstalling beautifulsoup4-4.6.3:\n",
            "      Successfully uninstalled beautifulsoup4-4.6.3\n",
            "Successfully installed beautifulsoup4-4.11.2 cryptography-39.0.1 frozendict-2.3.5 html5lib-1.1 requests-2.28.2 soupsieve-2.4 yfinance-0.2.12\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.colab-display-data+json": {
              "pip_warning": {
                "packages": [
                  "requests"
                ]
              }
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "metadata": {
        "id": "Yfm623FZEnEv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1c1bbb8c-882a-4dd8-92fa-8a8ee52f8173"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\r[*********************100%***********************]  1 of 1 completed\n"
          ]
        }
      ],
      "source": [
        "import yfinance as yf\n",
        "\n",
        "data = yf.download(\"MSFT\", start=\"2012-1-1\", end=\"2015-6-1\") "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7kioGPx8EnEv"
      },
      "source": [
        "Our data is now a dataframe. You can see the datetime index and the colums with different pricing data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 42,
      "metadata": {
        "id": "7w96Hr4QEnEv",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "outputId": "7d0eca02-96f1-4cd2-c521-dd390bea4207"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 Open       High        Low      Close  Adj Close    Volume\n",
              "Date                                                                       \n",
              "2012-01-03  26.549999  26.959999  26.389999  26.770000  21.413069  64731500\n",
              "2012-01-04  26.820000  27.469999  26.780001  27.400000  21.916996  80516100\n",
              "2012-01-05  27.379999  27.730000  27.290001  27.680000  22.140965  56081400\n",
              "2012-01-06  27.530001  28.190001  27.530001  28.110001  22.484921  99455500\n",
              "2012-01-09  28.049999  28.100000  27.719999  27.740000  22.188965  59706800\n",
              "...               ...        ...        ...        ...        ...       ...\n",
              "2015-05-22  47.299999  47.349998  46.820000  46.900002  41.389179  25720600\n",
              "2015-05-26  46.830002  46.880001  46.189999  46.590000  41.115597  29581900\n",
              "2015-05-27  46.820000  47.770000  46.619999  47.610001  42.015755  27335600\n",
              "2015-05-28  47.500000  48.020000  47.389999  47.450001  41.874542  19283700\n",
              "2015-05-29  47.430000  47.570000  46.590000  46.860001  41.353878  36519600\n",
              "\n",
              "[856 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a4241afb-1be8-4764-b43c-195f19076c5f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2012-01-03</th>\n",
              "      <td>26.549999</td>\n",
              "      <td>26.959999</td>\n",
              "      <td>26.389999</td>\n",
              "      <td>26.770000</td>\n",
              "      <td>21.413069</td>\n",
              "      <td>64731500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-01-04</th>\n",
              "      <td>26.820000</td>\n",
              "      <td>27.469999</td>\n",
              "      <td>26.780001</td>\n",
              "      <td>27.400000</td>\n",
              "      <td>21.916996</td>\n",
              "      <td>80516100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-01-05</th>\n",
              "      <td>27.379999</td>\n",
              "      <td>27.730000</td>\n",
              "      <td>27.290001</td>\n",
              "      <td>27.680000</td>\n",
              "      <td>22.140965</td>\n",
              "      <td>56081400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-01-06</th>\n",
              "      <td>27.530001</td>\n",
              "      <td>28.190001</td>\n",
              "      <td>27.530001</td>\n",
              "      <td>28.110001</td>\n",
              "      <td>22.484921</td>\n",
              "      <td>99455500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-01-09</th>\n",
              "      <td>28.049999</td>\n",
              "      <td>28.100000</td>\n",
              "      <td>27.719999</td>\n",
              "      <td>27.740000</td>\n",
              "      <td>22.188965</td>\n",
              "      <td>59706800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-05-22</th>\n",
              "      <td>47.299999</td>\n",
              "      <td>47.349998</td>\n",
              "      <td>46.820000</td>\n",
              "      <td>46.900002</td>\n",
              "      <td>41.389179</td>\n",
              "      <td>25720600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-05-26</th>\n",
              "      <td>46.830002</td>\n",
              "      <td>46.880001</td>\n",
              "      <td>46.189999</td>\n",
              "      <td>46.590000</td>\n",
              "      <td>41.115597</td>\n",
              "      <td>29581900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-05-27</th>\n",
              "      <td>46.820000</td>\n",
              "      <td>47.770000</td>\n",
              "      <td>46.619999</td>\n",
              "      <td>47.610001</td>\n",
              "      <td>42.015755</td>\n",
              "      <td>27335600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-05-28</th>\n",
              "      <td>47.500000</td>\n",
              "      <td>48.020000</td>\n",
              "      <td>47.389999</td>\n",
              "      <td>47.450001</td>\n",
              "      <td>41.874542</td>\n",
              "      <td>19283700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-05-29</th>\n",
              "      <td>47.430000</td>\n",
              "      <td>47.570000</td>\n",
              "      <td>46.590000</td>\n",
              "      <td>46.860001</td>\n",
              "      <td>41.353878</td>\n",
              "      <td>36519600</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>856 rows × 6 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a4241afb-1be8-4764-b43c-195f19076c5f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a4241afb-1be8-4764-b43c-195f19076c5f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a4241afb-1be8-4764-b43c-195f19076c5f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ],
      "source": [
        "data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "diGtny7QEnEv"
      },
      "source": [
        "This is a pandas dataframe, so we can index in to just get price like this. For more info on pandas, please [click here](http://pandas.pydata.org/pandas-docs/stable/10min.html)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 43,
      "metadata": {
        "id": "vaf4dM2-EnEv"
      },
      "outputs": [],
      "source": [
        "X = data['Close']"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 12**"
      ],
      "metadata": {
        "id": "HPxyQ56TzqKG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Y = data['Low']"
      ],
      "metadata": {
        "id": "UwWYNslKzwAp"
      },
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1sTxUhA-EnEv"
      },
      "source": [
        "Because there is now also date information in our data, we provide two series to `.plot`. `X.index` gives us the datetime index, and `X.values` gives us the pricing values. These are used as the X and Y coordinates to make a graph."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 45,
      "metadata": {
        "id": "2r71p2hsEnEv",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "6f58b0a2-751f-4441-b5f9-a9a4bccff440"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plt.plot(X.index, X.values)\n",
        "plt.ylabel('Price')\n",
        "plt.legend(['MSFT']);"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "P3Ek8yFqEnEw"
      },
      "source": [
        "We can get statistics again on real data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 46,
      "metadata": {
        "id": "Tj9mYK7nEnEw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e4c219c7-4240-4d50-c795-49ec038c05c7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "36.05204441837061"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ],
      "source": [
        "np.mean(X)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 47,
      "metadata": {
        "id": "XcdS5rHtEnEw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a4e6a5a9-f685-47bb-d58f-f0a0a4614e02"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6.691260772637948"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ],
      "source": [
        "np.std(X)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j17G-VFVEnEw"
      },
      "source": [
        "##Getting Returns from Prices\n",
        "\n",
        "We can use the `pct_change` function to get returns. Notice how we drop the first element after doing this, as it will be `NaN` (nothing -> something results in a NaN percent change)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 48,
      "metadata": {
        "id": "3Y8YbrMUEnEw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "53ebe9e4-5bf6-40c6-bd88-57cbd394eea5"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Date\n",
              "2012-01-04    0.023534\n",
              "2012-01-05    0.010219\n",
              "2012-01-06    0.015535\n",
              "2012-01-09   -0.013163\n",
              "2012-01-10    0.003605\n",
              "                ...   \n",
              "2015-05-22   -0.010966\n",
              "2015-05-26   -0.006610\n",
              "2015-05-27    0.021893\n",
              "2015-05-28   -0.003361\n",
              "2015-05-29   -0.012434\n",
              "Name: Close, Length: 855, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ],
      "source": [
        "R = X.pct_change()[1:]\n",
        "R"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 13**"
      ],
      "metadata": {
        "id": "wAJZdzgNzU41"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "T = Y.pct_change()[2:]\n",
        "T"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XrDsR6VGzaRZ",
        "outputId": "f85cfe14-ef5a-4d74-eef7-aafd1dba7165"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Date\n",
              "2012-01-05    0.019044\n",
              "2012-01-06    0.008794\n",
              "2012-01-09    0.006902\n",
              "2012-01-10    0.001082\n",
              "2012-01-11   -0.013694\n",
              "                ...   \n",
              "2015-05-22   -0.004042\n",
              "2015-05-26   -0.013456\n",
              "2015-05-27    0.009309\n",
              "2015-05-28    0.016517\n",
              "2015-05-29   -0.016881\n",
              "Name: Low, Length: 854, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "71Uay1KKEnEw"
      },
      "source": [
        "We can plot the returns distribution as a histogram."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 51,
      "metadata": {
        "id": "B9MXHP_EEnEw",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "outputId": "a50b2803-dd23-4fcc-b9ea-94c36791d989"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plt.hist(R, bins=20)\n",
        "plt.xlabel('Return')\n",
        "plt.ylabel('Frequency')\n",
        "plt.legend(['MSFT Returns']);"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 14**"
      ],
      "metadata": {
        "id": "Wj1ibiDaz8tp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.hist(T, bins=50)\n",
        "plt.xlabel('Low')\n",
        "plt.ylabel('Frequency')\n",
        "plt.legend('MSFT low');"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "06jtO7xCz_hx",
        "outputId": "1030c28c-ba35-42d6-921d-05cf50544a07"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CcPoe3DdEnEx"
      },
      "source": [
        "Get statistics again."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 53,
      "metadata": {
        "id": "11CaKif7EnEx",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3a932161-dc4b-4b1a-a1d5-9b769f4a2b5c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.0007593053938455802"
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ],
      "source": [
        "np.mean(R)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 54,
      "metadata": {
        "id": "zsIYQvb4EnEx",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dbe3010e-8c46-4aff-8af9-f16f8bb35034"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.014427919863141543"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ],
      "source": [
        "np.std(R)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 15**"
      ],
      "metadata": {
        "id": "WE0VHYui0Wae"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "np.mean(T)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2iSLwCS-0ZZk",
        "outputId": "b99f98ee-e086-4231-bf2e-0fffb62ebf9b"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.0007328034277142104"
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.std(T)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WQ0xCBXH0cDX",
        "outputId": "c72e8666-593f-4900-a9ba-48396754692d"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.01291423051364664"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gy8pR0Q6EnEx"
      },
      "source": [
        "Now let's go backwards and generate data out of a normal distribution using the statistics we estimated from Microsoft's returns. We'll see that we have good reason to suspect Microsoft's returns may not be normal, as the resulting normal distribution looks far different."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 57,
      "metadata": {
        "id": "6gHkrbyzEnEx",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "outputId": "66697943-2d35-4ace-f099-f6657817cc02"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plt.hist(np.random.normal(np.mean(R), np.std(R), 10000), bins=20)\n",
        "plt.xlabel('Return')\n",
        "plt.ylabel('Frequency')\n",
        "plt.legend(['Normally Distributed Returns']);"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 16**"
      ],
      "metadata": {
        "id": "Hw6jsmqx0lXU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.hist(np.random.lognormal(np.mean(T),np.std(T), 1010), bins=60)\n",
        "plt.xlabel('Track')\n",
        "plt.ylabel('Frequency')\n",
        "plt.legend(['Track frequency']);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "a3vlDkL40n0W",
        "outputId": "cfc21c4d-d1ea-4849-bb89-ffadb2390ce6"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RhK0dRHQEnEx"
      },
      "source": [
        "##Generating a Moving Average\n",
        "\n",
        "`pandas` has some nice tools to allow us to generate rolling statistics. Here's an example. Notice how there's no moving average for the first 60 days, as we don't have 60 days of data on which to generate the statistic."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 59,
      "metadata": {
        "id": "-Dg6Jj-aEnEx",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "a0716aa1-3c03-4984-abd6-9ed9f3149791"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# Take the average of the last 60 days at each timepoint.\n",
        "MAVG = X.rolling(2).mean()\n",
        "plt.plot(X.index, X.values)\n",
        "plt.plot(MAVG.index, MAVG.values)\n",
        "plt.ylabel('Price')\n",
        "plt.legend(['MSFT', '60-day MAVG']);"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "T51K3OvSEnEy"
      },
      "source": [
        "This presentation is for informational purposes only and does not constitute an offer to sell, a solicitation to buy, or a recommendation for any security; nor does it constitute an offer to provide investment advisory or other services by Quantopian, Inc. (\"Quantopian\"). Nothing contained herein constitutes investment advice or offers any opinion with respect to the suitability of any security, and any views expressed herein should not be taken as advice to buy, sell, or hold any security or as an endorsement of any security or company. In preparing the information contained herein, Quantopian, Inc. has not taken into account the investment needs, objectives, and financial circumstances of any particular investor. Any views expressed and data illustrated herein were prepared based upon information, believed to be reliable, available to Quantopian, Inc. at the time of publication. Quantopian makes no guarantees as to their accuracy or completeness. All information is subject to change and may quickly become unreliable for various reasons, including changes in market conditions or economic circumstances."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vlZsrHJjFoDm"
      },
      "source": [
        "<div align=\"center\">\n",
        "<img style=\"display: block; margin: auto;\" alt=\"photo\" src=\"https://upload.wikimedia.org/wikipedia/en/d/de/Quantopian_logo_2017.png\">\n",
        "</div> \n",
        "\n",
        "# Introduction to Python\n",
        "by Maxwell Margenot\n",
        "\n",
        "Part of the Quantopian Lecture Series:\n",
        "\n",
        "* [www.quantopian.com/lectures](https://www.quantopian.com/lectures)\n",
        "* [github.com/quantopian/research_public](https://github.com/quantopian/research_public)\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "All of the coding that you will do on the Quantopian platform will be in Python. It is also just a good, jack-of-all-trades language to know! Here we will provide you with the basics so that you can feel confident going through our other lectures and understanding what is happening."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v_LtlPxAFoDq"
      },
      "source": [
        "## Code Comments\n",
        "\n",
        "A comment is a note made by a programmer in the source code of a program. Its purpose is to clarify the source code and make it easier for people to follow along with what is happening. Anything in a comment is generally ignored when the code is actually run, making comments useful for including explanations and reasoning as well as removing specific lines of code that you may be unsure about. Comments in Python are created by using the pound symbol (`# Insert Text Here`). Including a `#` in a line of code will comment out anything that follows it."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 61,
      "metadata": {
        "id": "HzTSteQCFoDq"
      },
      "outputs": [],
      "source": [
        "# This is a comment\n",
        "# These lines of code will not change any values\n",
        "# Anything following the first # is not run as code"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PtVGWe--FoDs"
      },
      "source": [
        "You may hear text enclosed in triple quotes (`\"\"\" Insert Text Here \"\"\"`) referred to as multi-line comments, but this is not entirely accurate. This is a special type of `string` (a data type we will cover), called a `docstring`, used to explain the purpose of a function."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 60,
      "metadata": {
        "id": "3CT735yUFoDs",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "1c94762b-ee41-4534-dff7-26c3c96dee23"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "' This is a special string '"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 60
        }
      ],
      "source": [
        "\"\"\" This is a special string \"\"\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GL2nO4x4FoDs"
      },
      "source": [
        "Make sure you read the comments within each code cell (if they are there). They will provide more real-time explanations of what is going on as you look at each line of code."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uqjGQD7RFoDt"
      },
      "source": [
        "## Variables\n",
        "\n",
        "Variables provide names for values in programming. If you want to save a value for later or repeated use, you give the value a name, storing the contents in a variable. Variables in programming work in a fundamentally similar way to variables in algebra, but in Python they can take on various different data types.\n",
        "\n",
        "The basic variable types that we will cover in this section are `integers`, `floating point numbers`, `booleans`, and `strings`. \n",
        "\n",
        "An `integer` in programming is the same as in mathematics, a round number with no values after the decimal point. We use the built-in `print` function here to display the values of our variables as well as their types!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 62,
      "metadata": {
        "id": "y04ss69-FoDt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e1ffca4b-2115-42d9-976a-61dc6f98c6b5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "50 <class 'int'>\n"
          ]
        }
      ],
      "source": [
        "my_integer = 50\n",
        "print(my_integer, type(my_integer))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 17**"
      ],
      "metadata": {
        "id": "lvUai6Tl3NI6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "my_int = 35\n",
        "print (my_int, type(my_int))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uhpXwJYd3TFl",
        "outputId": "91cc7520-3e4e-4edc-9d6d-f325251c035b"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "35 <class 'int'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "z7Ij8n00vgjq"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "R-ZekhXqFoDu"
      },
      "source": [
        "Variables, regardless of type, are assigned by using a single equals sign (`=`). Variables are case-sensitive so any changes in variation in the capitals of a variable name will reference a different variable entirely."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 64,
      "metadata": {
        "id": "G3RiuMSNFoDv",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 186
        },
        "outputId": "867fd29e-8b50-4263-c736-2c831df6fdba"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-64-6b74af782f90>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mOne\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'One' is not defined"
          ]
        }
      ],
      "source": [
        "one = 1\n",
        "print(One)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5HTX8HdpFoDv"
      },
      "source": [
        "A `floating point` number, or a `float` is a fancy name for a real number (again as in mathematics). To define a `float`, we need to either include a decimal point or specify that the value is a float."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 66,
      "metadata": {
        "id": "zzWlMRAfFoDw",
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "897b27a7-5cf0-4406-dbef-a6a6339e0092"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.0 <class 'float'>\n",
            "1.0 <class 'float'>\n"
          ]
        }
      ],
      "source": [
        "my_float = 1.0\n",
        "print(my_float, type(my_float))\n",
        "my_float = float(1)\n",
        "print(my_float, type(my_float))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 18**"
      ],
      "metadata": {
        "id": "FPqwNFD23eIg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "myflo = 3.89\n",
        "print ((myflo), type(myflo))\n",
        "myflo = float(3.89)\n",
        "print ((myflo), type(myflo))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KiYv5ndB3mlp",
        "outputId": "d59a6c97-9a42-4ac1-cfb0-439a569325ac"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.89 <class 'float'>\n",
            "3.89 <class 'float'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UkvGMNzFFoDw"
      },
      "source": [
        "A variable of type `float` will not round the number that you store in it, while a variable of type `integer` will. This makes `floats` more suitable for mathematical calculations where you want more than just integers.\n",
        "\n",
        "Note that as we used the `float()` function to force an number to be considered a `float`, we can use the `int()` function to force a number to be considered an `int`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 69,
      "metadata": {
        "id": "9AMfS9UWFoDw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fb4e6095-892e-45a5-8af9-642f5485e3f8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3 <class 'int'>\n"
          ]
        }
      ],
      "source": [
        "my_int = int(3.14159)\n",
        "print(my_int, type(my_int))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 19**"
      ],
      "metadata": {
        "id": "-eGWi-Bv376n"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "myinte = int(4.569)\n",
        "print((myinte), type(myinte))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CwLVXu1z3-xZ",
        "outputId": "edcd3b79-c5e5-4165-c2dc-e7d81a4ccac7"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4 <class 'int'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xHx5IzlWFoDx"
      },
      "source": [
        "The `int()` function will also truncate any digits that a number may have after the decimal point!\n",
        "\n",
        "Strings allow you to include text as a variable to operate on. They are defined using either single quotes ('') or double quotes (\"\")."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 71,
      "metadata": {
        "id": "I0CTXrOJFoDx",
        "outputId": "4fe7d9fa-ac98-44d5-e07c-955748149252",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "This is a string with single quotes\n",
            "This is a string with double quotes\n"
          ]
        }
      ],
      "source": [
        "my_string = 'This is a string with single quotes'\n",
        "print(my_string)\n",
        "my_string = \"This is a string with double quotes\"\n",
        "print(my_string)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 20**"
      ],
      "metadata": {
        "id": "YrCVIAYp4EWG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mystr = 'This is a code line'\n",
        "print (mystr)\n",
        "mystr = \"This is a double quotes code line\"\n",
        "print (mystr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vNdsGxoA4Hb_",
        "outputId": "bbd4e2b9-7805-4799-fcc7-2759b6b7799f"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "This is a code line\n",
            "This is a double quotes code line\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yfDKfL5pFoDx"
      },
      "source": [
        "Both are allowed so that we can include apostrophes or quotation marks in a string if we so choose."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cG2x0vfLFoDx",
        "outputId": "08aa7b25-285d-4086-89f3-6d121d0cb2d2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\"Jabberwocky\", by Lewis Carroll\n",
            "'Twas brillig, and the slithy toves / Did gyre and gimble in the wabe;\n"
          ]
        }
      ],
      "source": [
        "my_string = '\"Jabberwocky\", by Lewis Carroll'\n",
        "print(my_string)\n",
        "my_string = \"'Twas brillig, and the slithy toves / Did gyre and gimble in the wabe;\"\n",
        "print(my_string)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 21**"
      ],
      "metadata": {
        "id": "41o8m0Sg4MiF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mystr = '\"Cien años de soledad\", by Gabriel García Marquez'\n",
        "print (mystr)\n",
        "mystr = \"'A quote before the line\"\n",
        "print (mystr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZZO2oS5Z4RJ6",
        "outputId": "39de6997-51c3-439c-c91d-d2397948873c"
      },
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\"Cien años de soledad\", by Gabriel García Marquez\n",
            "'A quote before the line\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DQ99vPLTFoDy"
      },
      "source": [
        "Booleans, or `bools` are binary variable types. A `bool` can only take on one of two values, these being `True` or `False`. There is much more to this idea of truth values when it comes to programming, which we cover later in the [Logical Operators](#id-section5) of this notebook."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 74,
      "metadata": {
        "id": "GHnExq2RFoDy",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c0b62d6a-b876-4565-efc3-0b41584f2c34"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True <class 'bool'>\n"
          ]
        }
      ],
      "source": [
        "my_bool = True\n",
        "print(my_bool, type(my_bool))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 22**"
      ],
      "metadata": {
        "id": "hvlfUref4UYn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "myboolean = False\n",
        "print ((myboolean), type(myboolean))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bcQgEd-J4XJz",
        "outputId": "c192c114-0b4c-4e0b-a6f0-bade7dd86b6d"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False <class 'bool'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cpSPSEm3FoDy"
      },
      "source": [
        "There are many more data types that you can assign as variables in Python, but these are the basic ones! We will cover a few more later as we move through this tutorial."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PGCRBsP6FoDy"
      },
      "source": [
        "## Basic Math\n",
        "\n",
        "Python has a number of built-in math functions. These can be extended even further by importing the **math** package or by including any number of other calculation-based packages.\n",
        "\n",
        "All of the basic arithmetic operations are supported: `+`, `-`, `/`, and `*`. You can create exponents by using `**` and modular arithmetic is introduced with the mod operator, `%`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 76,
      "metadata": {
        "id": "VM2xhbFdFoDy",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d5d09657-307f-41ae-828b-3134baf852bd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Addition:  4\n",
            "Subtraction:  3\n",
            "Multiplication:  10\n",
            "Division:  5.0\n",
            "Exponentiation:  9\n"
          ]
        }
      ],
      "source": [
        "print('Addition: ', 2 + 2)\n",
        "print('Subtraction: ', 7 - 4)\n",
        "print('Multiplication: ', 2 * 5)\n",
        "print('Division: ', 10 / 2)\n",
        "print('Exponentiation: ', 3**2)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 23**"
      ],
      "metadata": {
        "id": "GKhZECKK4mS-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print ('Addition: ', 8+5)\n",
        "print ('Subtraction: ', 10 - 1)\n",
        "print ('Multiplication: ', 20 * 4)\n",
        "print ('Division: ', 9 / 3)\n",
        "print ('Exponentiation: ', 8**2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bQJQPJPT4pe1",
        "outputId": "280f373d-dc17-4db8-fcd7-9ac670388e87"
      },
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Addition:  13\n",
            "Subtraction:  9\n",
            "Multiplication:  80\n",
            "Division:  3.0\n",
            "Exponentiation:  64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5LzOa0NOFoDz"
      },
      "source": [
        "If you are not familiar with the the mod operator, it operates like a remainder function. If we type $15 \\ \\% \\ 4$, it will return the remainder after dividing $15$ by $4$."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 78,
      "metadata": {
        "id": "lAtQTTtxFoDz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fb1f8247-0115-4f43-f3ba-262910a00fff"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Modulo:  3\n"
          ]
        }
      ],
      "source": [
        "print('Modulo: ', 15 % 4)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 24**"
      ],
      "metadata": {
        "id": "iHbczo5c4xiv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print ('Modulo', 32%8)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wRgRvUQz40T9",
        "outputId": "7230fb77-ce40-4f90-9476-690be511ba91"
      },
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Modulo 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "C-wTIUthFoDz"
      },
      "source": [
        "Mathematical functions also work on variables!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 80,
      "metadata": {
        "id": "bN2FqLkbFoDz",
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2ffea724-9cdd-4596-f2d1-08e1737e08dd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "20\n"
          ]
        }
      ],
      "source": [
        "first_integer = 4\n",
        "second_integer = 5\n",
        "print(first_integer * second_integer)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KT-9L5fqFoDz"
      },
      "source": [
        "Make sure that your variables are floats if you want to have decimal points in your answer. If you perform math exclusively with integers, you get an integer. Including any float in the calculation will make the result a float."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 81,
      "metadata": {
        "id": "Al3l_xmQFoD0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3003091d-ac87-41dd-f039-6cb06c9f039d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.6666666666666665\n"
          ]
        }
      ],
      "source": [
        "first_integer = 11\n",
        "second_integer = 3\n",
        "print(first_integer / second_integer)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 82,
      "metadata": {
        "id": "bpDcvmfHFoD0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "db0de9dd-b0c1-4310-8891-2ee2b3cf9b62"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.6666666666666665\n"
          ]
        }
      ],
      "source": [
        "first_number = 11.0\n",
        "second_number = 3.0\n",
        "print(first_number / second_number)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "D-pXsykpFoD0"
      },
      "source": [
        "Python has a few built-in math functions. The most notable of these are:\n",
        "\n",
        "* `abs()`\n",
        "* `round()`\n",
        "* `max()`\n",
        "* `min()`\n",
        "* `sum()`\n",
        "\n",
        "These functions all act as you would expect, given their names. Calling `abs()` on a number will return its absolute value. The `round()` function will round a number to a specified number of the decimal points (the default is $0$). Calling `max()` or `min()` on a collection of numbers will return, respectively, the maximum or minimum value in the collection. Calling `sum()` on a collection of numbers will add them all up. If you're not familiar with how collections of values in Python work, don't worry! We will cover collections in-depth in the next section. \n",
        "\n",
        "Additional math functionality can be added in with the `math` package."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 83,
      "metadata": {
        "id": "emPg334BFoD0"
      },
      "outputs": [],
      "source": [
        "import math"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "McyMZcnQFoD0"
      },
      "source": [
        "The math library adds a long list of new mathematical functions to Python. Feel free to check out the [documentation](https://docs.python.org/2/library/math.html) for the full list and details. It concludes some mathematical constants"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 84,
      "metadata": {
        "id": "L2k9rxKzFoD0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9f01cd66-1fcc-4a83-c8bf-6c3bec58a987"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Pi:  3.141592653589793\n",
            "Euler's Constant:  2.718281828459045\n"
          ]
        }
      ],
      "source": [
        "print('Pi: ', math.pi)\n",
        "print(\"Euler's Constant: \", math.e)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9Rv4S_NjFoD0"
      },
      "source": [
        "As well as some commonly used math functions"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 85,
      "metadata": {
        "id": "VWf7haJBFoD1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0f88ea34-1ff6-417d-96d3-3ba9947bc9da"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cosine of pi:  -1.0\n"
          ]
        }
      ],
      "source": [
        "print('Cosine of pi: ', math.cos(math.pi))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 25**"
      ],
      "metadata": {
        "id": "9atGX7sS478-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print ('Sine of e: ', math.sin(math.pi))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nIEI6UPo4_ie",
        "outputId": "fe4ce17a-99f1-4ab9-f0c1-c881a8f2ed34"
      },
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sine of e:  1.2246467991473532e-16\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4IXs_3ueFoD1"
      },
      "source": [
        "## Collections\n",
        "### Lists\n",
        "\n",
        "A `list` in Python is an ordered collection of objects that can contain any data type. We define a `list` using brackets (`[]`)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 87,
      "metadata": {
        "id": "VaKo0mCRFoD1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7275f483-474f-4b29-e7c3-18290122d00d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 3]\n"
          ]
        }
      ],
      "source": [
        "my_list = [1, 2, 3]\n",
        "print(my_list)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 26**"
      ],
      "metadata": {
        "id": "Zy0b-Ac25IFD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "milista = [6,10,16,38]\n",
        "print (milista)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w4aXfKcC5Mel",
        "outputId": "1aeb0b29-ce4b-4435-8d66-ccf96359bf4b"
      },
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[6, 10, 16, 38]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qMKvepO5FoD1"
      },
      "source": [
        "We can access and index the list by using brackets as well. In order to select an individual element, simply type the list name followed by the index of the item you are looking for in braces."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 90,
      "metadata": {
        "id": "TvaK4gOgFoD1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9c3d4dcb-05ed-4452-e0fa-de586c689f53"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "3\n"
          ]
        }
      ],
      "source": [
        "print(my_list[0])\n",
        "print(my_list[2])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 27**"
      ],
      "metadata": {
        "id": "OMcdipmA5PN3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print (milista[1])\n",
        "print (milista[3])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kJ1q_DoR5RPr",
        "outputId": "69d391a6-f269-4482-91de-9f8d8589dd11"
      },
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10\n",
            "38\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rw1U2_RsFoD1"
      },
      "source": [
        "Indexing in Python starts from $0$. If you have a list of length $n$, the first element of the list is at index $0$, the second element is at index $1$, and so on and so forth. The final element of the list will be at index $n-1$. Be careful! Trying to access a non-existent index will cause an error."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 94,
      "metadata": {
        "id": "a5OIwA_aFoD1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "c4fa7049-d18a-4d24-d8e0-b047f68ad7a6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The first, second, and third list elements:  1 2 3\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "IndexError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-94-a098d5dd42c3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'The first, second, and third list elements: '\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmy_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmy_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmy_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Accessing outside the list bounds causes an error: '\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmy_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mIndexError\u001b[0m: list index out of range"
          ]
        }
      ],
      "source": [
        "print('The first, second, and third list elements: ', my_list[0], my_list[1], my_list[2])\n",
        "print('Accessing outside the list bounds causes an error: ', my_list[3])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "L7hR-hrAFoD2"
      },
      "source": [
        "We can see the number of elements in a list by calling the `len()` function."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 95,
      "metadata": {
        "id": "XX7u73fJFoD2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c16caee3-b252-4e82-e7bd-58686836a7f2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3\n"
          ]
        }
      ],
      "source": [
        "print(len(my_list))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 28**"
      ],
      "metadata": {
        "id": "pfXsjbK65llt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print (len(milista))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GOp9Mj4e5oSI",
        "outputId": "5e8f6a6c-a4d3-4c33-b836-0a593d7cc5e5"
      },
      "execution_count": 96,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J_PbE6tRFoD2"
      },
      "source": [
        "We can update and change a list by accessing an index and assigning new value."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 97,
      "metadata": {
        "id": "Bj6Q87-5FoD2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1872211d-255d-44ae-f203-3138b2a39d42"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 3]\n",
            "[42, 2, 3]\n"
          ]
        }
      ],
      "source": [
        "print(my_list)\n",
        "my_list[0] = 42\n",
        "print(my_list)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 29**"
      ],
      "metadata": {
        "id": "_hAoOfVe5rH9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print (milista)\n",
        "milista[1]=28\n",
        "print(milista)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KPo6c1G05uFu",
        "outputId": "e826305c-577d-4d50-dcde-7734fa10023a"
      },
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[6, 18, 16, 38]\n",
            "[6, 28, 16, 38]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MuVSNrtkFoD2"
      },
      "source": [
        "This is fundamentally different from how strings are handled. A `list` is mutable, meaning that you can change a `list`'s elements without changing the list itself. Some data types, like `strings`, are immutable, meaning you cannot change them at all. Once a `string` or other immutable data type has been created, it cannot be directly modified without creating an entirely new object."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 100,
      "metadata": {
        "id": "GoyEP8i3FoD2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 186
        },
        "outputId": "06b13de9-6176-4d6f-c0f2-d3e7c8356b76"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-100-85065ecd61ab>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mmy_string\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"Strings never change\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mmy_string\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'Z'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m: 'str' object does not support item assignment"
          ]
        }
      ],
      "source": [
        "my_string = \"Strings never change\"\n",
        "my_string[0] = 'Z'"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_RDIF2aaFoD2"
      },
      "source": [
        "As we stated before, a list can contain any data type. Thus, lists can also contain strings."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 101,
      "metadata": {
        "id": "ir0UkJXoFoD3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "503eb145-fc3e-47b5-9d8e-15040eb41a3b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['one', 'two', 'three']\n"
          ]
        }
      ],
      "source": [
        "my_list_2 = ['one', 'two', 'three']\n",
        "print(my_list_2)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 30**"
      ],
      "metadata": {
        "id": "irwxuqDf54H_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "milista2 = ['dos','tres','cuatro']\n",
        "print(milista2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6u4PEVL-57wE",
        "outputId": "a90b29e6-f403-4ce4-c32f-942e650480ea"
      },
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['dos', 'tres', 'cuatro']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jdQh8CaAFoD3"
      },
      "source": [
        "Lists can also contain multiple different data types at once!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 104,
      "metadata": {
        "id": "Sw44yHNcFoD3"
      },
      "outputs": [],
      "source": [
        "my_list_3 = [True, 'False', 42]"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 31**"
      ],
      "metadata": {
        "id": "FS-shyl65_Wz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "milista3 = [False, 'abcd', 78, 86.8]\n",
        "milista3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VNSyhMEZ6EoG",
        "outputId": "ecb7433c-5bc2-4455-a6a2-749cec361484"
      },
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[False, 'abcd', 78, 86.8]"
            ]
          },
          "metadata": {},
          "execution_count": 105
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HJ9JUXP4FoD3"
      },
      "source": [
        "If you want to put two lists together, they can be combined with a `+` symbol."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 106,
      "metadata": {
        "id": "gMH5VwORFoD3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "623ff740-2b6f-4cbe-90f4-1bffcac507e1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[42, 2, 3, 'one', 'two', 'three', True, 'False', 42]\n"
          ]
        }
      ],
      "source": [
        "my_list_4 = my_list + my_list_2 + my_list_3\n",
        "print(my_list_4)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 32**"
      ],
      "metadata": {
        "id": "xHvGqhZ15-nM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "milista4 = milista + milista2 + milista3\n",
        "print(milista4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yg0mOKnS6I2N",
        "outputId": "e199c86b-08e6-4683-c7e3-bf78fc874b28"
      },
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[6, 28, 16, 38, 'dos', 'tres', 'cuatro', False, 'abcd', 78, 86.8]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fFKwuDVlFoD3"
      },
      "source": [
        "In addition to accessing individual elements of a list, we can access groups of elements through slicing."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 108,
      "metadata": {
        "id": "LuBcG0F-FoD3"
      },
      "outputs": [],
      "source": [
        "my_list = ['friends', 'romans', 'countrymen', 'lend', 'me', 'your', 'ears']"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "milista = ['Korea', 'Norway', 'Germany', 'Poland', 'Belgium']"
      ],
      "metadata": {
        "id": "UXK3y-bv6RKr"
      },
      "execution_count": 109,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-KQfwrvWFoD4"
      },
      "source": [
        "#### Slicing\n",
        "\n",
        "We use the colon (`:`) to slice lists. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 110,
      "metadata": {
        "id": "mpSXnk-4FoD4",
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e9fe43b2-2da0-4fdb-b64e-99238067777e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['countrymen', 'lend']\n"
          ]
        }
      ],
      "source": [
        "print(my_list[2:4])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 33**"
      ],
      "metadata": {
        "id": "zw_9kqKA6fdb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print (milista4[3:6])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FDeDflQf6iFO",
        "outputId": "2f25501a-2a0b-466c-f616-b5a33eaff4d8"
      },
      "execution_count": 111,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[38, 'dos', 'tres']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zQDjVMNqFoD4"
      },
      "source": [
        "Using `:` we can select a group of elements in the list starting from the first element indicated and going up to  (but not including) the last element indicated.\n",
        "\n",
        "We can also select everything after a certain point"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 112,
      "metadata": {
        "id": "7Hg8AlVrFoD4",
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c68c86c0-3c4c-47fc-ed2b-4ce2c6668576"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['romans', 'countrymen', 'lend', 'me', 'your', 'ears']\n"
          ]
        }
      ],
      "source": [
        "print(my_list[1:])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 34**"
      ],
      "metadata": {
        "id": "KBdXgNiF6muj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print (milista4[2:])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w4V-AMmI6pMG",
        "outputId": "ec0a6fcb-c672-4733-99a7-938dfa5cf58f"
      },
      "execution_count": 113,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[16, 38, 'dos', 'tres', 'cuatro', False, 'abcd', 78, 86.8]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TtpCetfyFoD4"
      },
      "source": [
        "And everything before a certain point"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 114,
      "metadata": {
        "id": "uTSBNghEFoD4",
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "327678ec-ef4d-4a5b-a23d-3b44636c57ff"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['friends', 'romans', 'countrymen', 'lend']\n"
          ]
        }
      ],
      "source": [
        "print(my_list[:4])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 35**"
      ],
      "metadata": {
        "id": "mgsJor-k6qxb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print (milista4[:7])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rgnHq3LS6so9",
        "outputId": "1aaf7abe-591a-44fa-bb9e-95970ede78be"
      },
      "execution_count": 115,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[6, 28, 16, 38, 'dos', 'tres', 'cuatro']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-clmh8qeFoD4"
      },
      "source": [
        "Using negative numbers will count from the end of the indices instead of from the beginning. For example, an index of `-1` indicates the last element of the list."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 116,
      "metadata": {
        "id": "rZFoZxinFoD4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "be8ee2c5-e257-4cd2-e2f3-14fb71d8c163"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ears\n"
          ]
        }
      ],
      "source": [
        "print(my_list[-1])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nVwM9euhFoD5"
      },
      "source": [
        "You can also add a third component to slicing. Instead of simply indicating the first and final parts of your slice, you can specify the step size that you want to take. So instead of taking every single element, you can take every other element."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 117,
      "metadata": {
        "id": "IAB5tIZIFoD5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8d4c339a-5c84-42b7-d7c0-2236df1401e6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['friends', 'countrymen', 'me', 'ears']\n"
          ]
        }
      ],
      "source": [
        "print(my_list[0:7:2])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MexIuTBkFoD5"
      },
      "source": [
        "Here we have selected the entire list (because `0:7` will yield elements `0` through `6`) and we have selected a step size of `2`. So this will spit out element `0` , element `2`, element `4`, and so on through the list element selected. We can skip indicated the beginning and end of our slice, only indicating the step, if we like."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 118,
      "metadata": {
        "id": "vffUQsX8FoD5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4edb1642-915d-4928-b332-131a7cffffc0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['friends', 'countrymen', 'me', 'ears']\n"
          ]
        }
      ],
      "source": [
        "print(my_list[::2])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H9VMPjYtFoD5"
      },
      "source": [
        "Lists implictly select the beginning and end of the list when not otherwise specified."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 119,
      "metadata": {
        "id": "MYjDHm27FoD5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bb70c616-9b25-438b-ab93-e616fc862460"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['friends', 'romans', 'countrymen', 'lend', 'me', 'your', 'ears']\n"
          ]
        }
      ],
      "source": [
        "print(my_list[:])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cjo1zwgFFoD5"
      },
      "source": [
        "With a negative step size we can even reverse the list!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 120,
      "metadata": {
        "id": "OWN0poONFoD5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "57fc785f-a074-4ddc-ddd7-e5daa2b51e30"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['ears', 'your', 'me', 'lend', 'countrymen', 'romans', 'friends']\n"
          ]
        }
      ],
      "source": [
        "print(my_list[::-1])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x6_6xtF2FoD6"
      },
      "source": [
        "Python does not have native matrices, but with lists we can produce a working fascimile. Other packages, such as `numpy`, add matrices as a separate data type, but in base Python the best way to create a matrix is to use a list of lists."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zWqgZdeEFoD6"
      },
      "source": [
        "We can also use built-in functions to generate lists. In particular we will look at `range()` (because we will be using it later!). Range can take several different inputs and will return a list."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 121,
      "metadata": {
        "id": "Wd-P0xfxFoD6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "eda0990f-39a9-4cca-9821-ef34569ff1cb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "range(0, 10)\n"
          ]
        }
      ],
      "source": [
        "b = 10\n",
        "my_list = range(b)\n",
        "print(my_list)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 36**"
      ],
      "metadata": {
        "id": "1v89Xfax62zS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "c = 35\n",
        "milist=range(c)\n",
        "print(milist)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jSRPBnZ264t2",
        "outputId": "38eed373-175c-4d68-87c0-c23834924bae"
      },
      "execution_count": 123,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "range(0, 35)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_md2uQsnFoD6"
      },
      "source": [
        "Similar to our list-slicing methods from before, we can define both a start and an end for our range. This will return a list that is includes the start and excludes the end, just like a slice."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 124,
      "metadata": {
        "id": "wdk3ho-UFoD6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a4fb8c39-f140-47cb-fb1f-eb5811f10957"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "range(0, 10)\n"
          ]
        }
      ],
      "source": [
        "a = 0\n",
        "b = 10\n",
        "my_list = range(a, b)\n",
        "print(my_list)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 37**"
      ],
      "metadata": {
        "id": "u0pVpSGF6_Ef"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "d = 25\n",
        "c = 31\n",
        "milist = range (d,c)\n",
        "print (milist)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z9ZSM6207BTp",
        "outputId": "f1cad18d-ab05-49cc-d072-31d985e29ea8"
      },
      "execution_count": 125,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "range(25, 31)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Jg-GPGK2FoD6"
      },
      "source": [
        "We can also specify a step size. This again has the same behavior as a slice."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 126,
      "metadata": {
        "id": "FcwF1eTEFoD6",
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cbacd377-dc0a-497a-b179-bea80f52652f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "range(0, 10, 2)\n"
          ]
        }
      ],
      "source": [
        "a = 0\n",
        "b = 10\n",
        "step = 2\n",
        "my_list = range(a, b, step)\n",
        "print(my_list)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZmyePuhlFoD6"
      },
      "source": [
        "### Tuples\n",
        "\n",
        "A `tuple` is a data type similar to a list in that it can hold different kinds of data types. The key difference here is that a `tuple` is immutable. We define a `tuple` by separating the elements we want to include by commas. It is conventional to surround a `tuple` with parentheses."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 127,
      "metadata": {
        "id": "9ysQy7WlFoD7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "adacb3cc-c308-4fb3-e818-ec1ee12de8d0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "('I', 'have', 30, 'cats')\n"
          ]
        }
      ],
      "source": [
        "my_tuple = 'I', 'have', 30, 'cats'\n",
        "print(my_tuple)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 128,
      "metadata": {
        "id": "tPZCo0-ZFoD7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "00cf4a49-d01c-437e-eb5d-c3c83c8eccc1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "('I', 'have', 30, 'cats')\n"
          ]
        }
      ],
      "source": [
        "my_tuple = ('I', 'have', 30, 'cats')\n",
        "print(my_tuple)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_Je71O5DFoD7"
      },
      "source": [
        "As mentioned before, tuples are immutable. You can't change any part of them without defining a new tuple."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 129,
      "metadata": {
        "id": "oe088TXRFoD7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 168
        },
        "outputId": "9f01ebda-e6c2-49da-b031-3c0181be297a"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-129-c821a6bdb1a6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmy_tuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'dogs'\u001b[0m \u001b[0;31m# Attempts to change the 'cats' value stored in the the tuple to 'dogs'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m: 'tuple' object does not support item assignment"
          ]
        }
      ],
      "source": [
        "my_tuple[3] = 'dogs' # Attempts to change the 'cats' value stored in the the tuple to 'dogs'"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WubVHM_TFoD7"
      },
      "source": [
        "You can slice tuples the same way that you slice lists!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 130,
      "metadata": {
        "id": "PUjnA7BRFoD7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "be372bfd-bafe-4fe2-8295-db9360de9efd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "('have', 30)\n"
          ]
        }
      ],
      "source": [
        "print(my_tuple[1:3])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YanwulkcFoD7"
      },
      "source": [
        "And concatenate them the way that you would with strings!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 131,
      "metadata": {
        "id": "SJL-JHy1FoD7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0648506b-d255-488e-fa3a-ba8e97e78f29"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "('I', 'have', 30, 'cats', 'make', 'that', 50)\n"
          ]
        }
      ],
      "source": [
        "my_other_tuple = ('make', 'that', 50)\n",
        "print(my_tuple + my_other_tuple)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eTaN3hNoFoD7"
      },
      "source": [
        "We can 'pack' values together, creating a tuple (as above), or we can 'unpack' values from a tuple, taking them out."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 132,
      "metadata": {
        "id": "wQ078PFDFoD8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9ffdee83-d061-4c02-c4b8-c18e4081cc23"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "make that 50\n"
          ]
        }
      ],
      "source": [
        "str_1, str_2, int_1 = my_other_tuple\n",
        "print(str_1, str_2, int_1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SddvFxc-FoD8"
      },
      "source": [
        "Unpacking assigns each value of the tuple in order to each variable on the left hand side of the equals sign. Some functions, including user-defined functions, may return tuples, so we can use this to directly unpack them and access the values that we want."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oPKhq758FoD8"
      },
      "source": [
        "### Sets\n",
        "\n",
        "A `set` is a collection of unordered, unique elements. It works almost exactly as you would expect a normal set of things in mathematics to work and is defined using braces (`{}`)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 133,
      "metadata": {
        "id": "FIFvUdqAFoD8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "52fac83a-d415-4311-9826-0ce41c657ae1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{4, 7, 42, 'dogs', 'lizards', 'man I just LOVE the number 4', 'the number 4'} <class 'set'>\n"
          ]
        }
      ],
      "source": [
        "things_i_like = {'dogs', 7, 'the number 4', 4, 4, 4, 42, 'lizards', 'man I just LOVE the number 4'}\n",
        "print(things_i_like, type(things_i_like))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XREec0hiFoD8"
      },
      "source": [
        "Note how any extra instances of the same item are removed in the final set. We can also create a `set` from a list, using the `set()` function."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 134,
      "metadata": {
        "id": "8nXoJ66yFoD8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3041af63-3cbf-491b-b9a1-28d21e3f5473"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'bats', 'cows', 'lizards', 'dogs', 'sponges', 'cats'}\n"
          ]
        }
      ],
      "source": [
        "animal_list = ['cats', 'dogs', 'dogs', 'dogs', 'lizards', 'sponges', 'cows', 'bats', 'sponges']\n",
        "animal_set = set(animal_list)\n",
        "print(animal_set) # Removes all extra instances from the list)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tJBIq0oRFoD8"
      },
      "source": [
        "Calling `len()` on a set will tell you how many elements are in it."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 135,
      "metadata": {
        "id": "KYCm3WB6FoD8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8942e981-c27f-4736-c40a-1801a1516f68"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "6\n"
          ]
        }
      ],
      "source": [
        "print(len(animal_set))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uJKlBiNVFoD9"
      },
      "source": [
        "Because a `set` is unordered, we can't access individual elements using an index. We can, however, easily check for membership (to see if something is contained in a set) and take the unions and intersections of sets by using the built-in set functions."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 136,
      "metadata": {
        "id": "h5pRRuudFoD9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ef2a5c66-376b-442b-81b5-be5745c85819"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 136
        }
      ],
      "source": [
        "'cats' in animal_set # Here we check for membership using the `in` keyword."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "e6ChS9b6FoD9"
      },
      "source": [
        "Here we checked to see whether the string 'cats' was contained within our `animal_set` and it returned `True`, telling us that it is indeed in our set.\n",
        "\n",
        "We can connect sets by using typical mathematical set operators, namely `|`, for union, and `&`, for intersection. Using `|` or `&` will return exactly what you would expect if you are familiar with sets in mathematics."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 137,
      "metadata": {
        "id": "rGYsFiPDFoD9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7af2092b-8aea-4705-f83b-3325aa3966f8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{4, 7, 42, 'bats', 'cows', 'lizards', 'dogs', 'man I just LOVE the number 4', 'sponges', 'cats', 'the number 4'}\n"
          ]
        }
      ],
      "source": [
        "print(animal_set | things_i_like) # You can also write things_i_like | animal_set with no difference"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rG0TEbmFFoD9"
      },
      "source": [
        "Pairing two sets together with `|` combines the sets, removing any repetitions to make every set element unique."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 138,
      "metadata": {
        "id": "b1YFGkdcFoD9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2a11377c-2f8e-4c03-aa1c-2ac63b039966"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'lizards', 'dogs'}\n"
          ]
        }
      ],
      "source": [
        "print(animal_set & things_i_like) # You can also write things_i_like & animal_set with no difference"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aKeZWkr7FoD9"
      },
      "source": [
        "Pairing two sets together with `&` will calculate the intersection of both sets, returning a set that only contains what they have in common.\n",
        "\n",
        "If you are interested in learning more about the built-in functions for sets, feel free to check out the [documentation](https://docs.python.org/2/library/sets.html)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p2VkM1SOFoD9"
      },
      "source": [
        "### Dictionaries\n",
        "\n",
        "Another essential data structure in Python is the dictionary. Dictionaries are defined with a combination of curly braces (`{}`) and colons (`:`). The braces define the beginning and end of a dictionary and the colons indicate key-value pairs. A dictionary is essentially a set of key-value pairs. The key of any entry must be an immutable data type. This makes both strings and tuples candidates. Keys can be both added and deleted.\n",
        "\n",
        "In the following example, we have a dictionary composed of key-value pairs where the key is a genre of fiction (`string`) and the value is a list of books (`list`) within that genre. Since a collection is still considered a single entity, we can use one to collect multiple variables or values into one key-value pair."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 139,
      "metadata": {
        "id": "LxaBLDmaFoD9"
      },
      "outputs": [],
      "source": [
        "my_dict = {\"High Fantasy\": [\"Wheel of Time\", \"Lord of the Rings\"], \n",
        "           \"Sci-fi\": [\"Book of the New Sun\", \"Neuromancer\", \"Snow Crash\"],\n",
        "           \"Weird Fiction\": [\"At the Mountains of Madness\", \"The House on the Borderland\"]}"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uKVyem2UFoD-"
      },
      "source": [
        "After defining a dictionary, we can access any individual value by indicating its key in brackets."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 140,
      "metadata": {
        "id": "qEpJj6DAFoD-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a714c2ed-cfa0-474f-a45c-773052516a3c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Book of the New Sun', 'Neuromancer', 'Snow Crash']\n"
          ]
        }
      ],
      "source": [
        "print(my_dict[\"Sci-fi\"])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JhQiqbsDFoD-"
      },
      "source": [
        "We can also change the value associated with a given key"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 141,
      "metadata": {
        "id": "Luu1AKCuFoD-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5165b8e6-0638-4a50-e2bf-71a7fe0d5fef"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "I can't read\n"
          ]
        }
      ],
      "source": [
        "my_dict[\"Sci-fi\"] = \"I can't read\"\n",
        "print(my_dict[\"Sci-fi\"])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wTw5m4UaFoD-"
      },
      "source": [
        "Adding a new key-value pair is as simple as defining it."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sgw4pHv_FoD-"
      },
      "outputs": [],
      "source": [
        "my_dict[\"Historical Fiction\"] = [\"Pillars of the Earth\"]\n",
        "print(my_dict[\"Historical Fiction\"])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 143,
      "metadata": {
        "id": "EE2MTbwVFoD-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fef2a007-866e-4a18-d570-0267b9ab58d4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'High Fantasy': ['Wheel of Time', 'Lord of the Rings'], 'Sci-fi': \"I can't read\", 'Weird Fiction': ['At the Mountains of Madness', 'The House on the Borderland'], 'Historical Fiction': ['Pillars of the Earth']}\n"
          ]
        }
      ],
      "source": [
        "print(my_dict)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ddAKfXm-FoD_"
      },
      "source": [
        "## String Shenanigans\n",
        "\n",
        "We already know that strings are generally used for text. We can used built-in operations to combine, split, and format strings easily, depending on our needs.\n",
        "\n",
        "The `+` symbol indicates concatenation in string language. It will combine two strings into a longer string."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 144,
      "metadata": {
        "id": "PZHvv7kQFoD_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6a6cb3eb-99f3-42b9-96ab-830a64e53e2e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\"Beware the Jabberwock, my son! /The jaws that bite, the claws that catch! /Beware the Jubjub bird, and shun /The frumious Bandersnatch!\"/\n"
          ]
        }
      ],
      "source": [
        "first_string = '\"Beware the Jabberwock, my son! /The jaws that bite, the claws that catch! /'\n",
        "second_string = 'Beware the Jubjub bird, and shun /The frumious Bandersnatch!\"/'\n",
        "third_string = first_string + second_string\n",
        "print(third_string)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bajyTjCzFoD_"
      },
      "source": [
        "Strings are also indexed much in the same way that lists are."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 145,
      "metadata": {
        "id": "AFMtJjhpFoD_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "26350c39-d43e-408a-8669-26e1cd893304"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The first letter is:  S\n",
            "The last letter is:  s\n",
            "The second to last letter is:  u\n",
            "The first five characters are:  Super\n",
            "Reverse it!:  suoicodilaipxecitsiligarfilacrepuS\n"
          ]
        }
      ],
      "source": [
        "my_string = 'Supercalifragilisticexpialidocious'\n",
        "print('The first letter is: ', my_string[0]) # Uppercase S\n",
        "print('The last letter is: ', my_string[-1]) # lowercase s\n",
        "print('The second to last letter is: ', my_string[-2]) # lowercase u\n",
        "print('The first five characters are: ', my_string[0:5]) # Remember: slicing doesn't include the final element!\n",
        "print('Reverse it!: ', my_string[::-1])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WvG44l_GFoD_"
      },
      "source": [
        "Built-in objects and classes often have special functions associated with them that are called methods. We access these methods by using a period ('.'). We will cover objects and their associated methods more in another lecture!\n",
        "\n",
        "Using string methods we can count instances of a character or group of characters."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 146,
      "metadata": {
        "id": "61EalnMkFoD_",
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6ab49e2e-e5ea-4572-8a73-8c52f4ce77a9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Count of the letter i in Supercalifragilisticexpialidocious:  7\n",
            "Count of \"li\" in the same word:  3\n"
          ]
        }
      ],
      "source": [
        "print('Count of the letter i in Supercalifragilisticexpialidocious: ', my_string.count('i'))\n",
        "print('Count of \"li\" in the same word: ', my_string.count('li'))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SX_yLtX6FoD_"
      },
      "source": [
        "We can also find the first instance of a character or group of characters in a string."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 147,
      "metadata": {
        "id": "JvLAjGUeFoD_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d374c678-1e20-47b8-c855-8a124bedeb57"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The first time i appears is at index:  8\n"
          ]
        }
      ],
      "source": [
        "print('The first time i appears is at index: ', my_string.find('i'))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IEOGz_rvFoEA"
      },
      "source": [
        "As well as replace characters in a string."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 148,
      "metadata": {
        "id": "Ikuy7IAcFoEA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b45d7ce1-1a2a-40f9-bedf-9e9f928e8573"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "All i's are now a's:  Supercalafragalastacexpaaladocaous\n"
          ]
        }
      ],
      "source": [
        "print(\"All i's are now a's: \", my_string.replace('i', 'a'))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 149,
      "metadata": {
        "id": "ok5v-cptFoEA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0e1bd69e-3d46-4e9f-8344-6a3648a59658"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "It's raining cats and more cats\n"
          ]
        }
      ],
      "source": [
        "print(\"It's raining cats and dogs\".replace('dogs', 'more cats'))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vZmvnJrYFoEA"
      },
      "source": [
        "There are also some methods that are unique to strings. The function `upper()` will convert all characters in a string to uppercase, while `lower()` will convert all characters in a string to lowercase!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 150,
      "metadata": {
        "id": "8Yy6ARmsFoEA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cfe6b042-1dd7-4605-90ca-8bcf77db6dc3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "I CAN'T HEAR YOU\n",
            "i said hello\n"
          ]
        }
      ],
      "source": [
        "my_string = \"I can't hear you\"\n",
        "print(my_string.upper())\n",
        "my_string = \"I said HELLO\"\n",
        "print(my_string.lower())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c8r30Yp2FoEA"
      },
      "source": [
        "### String Formatting\n",
        "\n",
        "Using the `format()` method we can add in variable values and generally format our strings."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 151,
      "metadata": {
        "id": "CB0N5uYvFoEA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1db3b8d8-c09a-4afe-9453-4d1c34647c36"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Marco Polo\n"
          ]
        }
      ],
      "source": [
        "my_string = \"{0} {1}\".format('Marco', 'Polo')\n",
        "print(my_string)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 152,
      "metadata": {
        "id": "fFohD_WsFoEA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7e84e256-3095-46bb-aaba-d482ca1f02de"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Polo Marco\n"
          ]
        }
      ],
      "source": [
        "my_string = \"{1} {0}\".format('Marco', 'Polo')\n",
        "print(my_string)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 38**"
      ],
      "metadata": {
        "id": "eDyMJU-_7b75"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "micadena = \"{0} {1}\".format('arroz', 'dumplings')\n",
        "print (micadena)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vxx3NVHS7e0j",
        "outputId": "c58bcf88-b198-4659-e0a2-5f1b3dda2c0d"
      },
      "execution_count": 154,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "arroz dumplings\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "micadena = \"{1} {0}\".format('arroz', 'dumplings')\n",
        "print (micadena)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zN4m0dA37hOF",
        "outputId": "272538d1-285b-491e-c2bb-4e9c735cedd4"
      },
      "execution_count": 156,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dumplings arroz\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "81iiRyDCFoEB"
      },
      "source": [
        "We use braces (`{}`) to indicate parts of the string that will be filled in later and we use the arguments of the `format()` function to provide the values to substitute. The numbers within the braces indicate the index of the value in the `format()` arguments."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CdGtNZpCFoEB"
      },
      "source": [
        "See the `format()` [documentation](https://docs.python.org/2/library/string.html#format-examples) for additional examples."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "r0_borerFoEB"
      },
      "source": [
        "If you need some quick and dirty formatting, you can instead use the `%` symbol, called the string formatting operator. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 157,
      "metadata": {
        "id": "l1sIt2_TFoEB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "12c1b8f8-3bb8-4ac3-be70-e5c3fe77ea41"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "insert value here\n"
          ]
        }
      ],
      "source": [
        "print('insert %s here' % 'value')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 39**"
      ],
      "metadata": {
        "id": "eEXBpzhs7k7j"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print ('Inserte %s aquí' % 'codigo')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1c2bPTEZ7oGf",
        "outputId": "3868c190-6837-40e7-b12a-ead12d608509"
      },
      "execution_count": 159,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Inserte codigo aquí\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oLTK1_mIFoEB"
      },
      "source": [
        "The `%` symbol basically cues Python to create a placeholder. Whatever character follows the `%` (in the string) indicates what sort of type the value put into the placeholder will have. This character is called a *conversion type*. Once the string has been closed, we need another `%` that will be followed by the values to insert. In the case of one value, you can just put it there. If you are inserting more than one value, they must be enclosed in a tuple."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 160,
      "metadata": {
        "id": "lGeMTz_8FoEB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "11cba217-6391-443c-8e63-1811e7c74893"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "There are 13 cats in my apartment\n"
          ]
        }
      ],
      "source": [
        "print('There are %s cats in my %s' % (13, 'apartment'))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iYj3P-VEFoEB"
      },
      "source": [
        "In these examples, the `%s` indicates that Python should convert the values into strings. There are multiple conversion types that you can use to get more specific with the the formatting. See the string formatting [documentation](https://docs.python.org/2/library/stdtypes.html#string-formatting) for additional examples and more complete details on use."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1FITrDL9FoEC"
      },
      "source": [
        "## Logical Operators\n",
        "### Basic Logic\n",
        "\n",
        "Logical operators deal with `boolean` values, as we briefly covered before. If you recall, a `bool` takes on one of two values, `True` or `False` (or $1$ or $0$). The basic logical statements that we can make are defined using the built-in comparators. These are `==` (equal), `!=` (not equal), `<` (less than), `>` (greater than), `<=` (less than or equal to), and `>=` (greater than or equal to)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 161,
      "metadata": {
        "id": "kQqgs1_iFoEC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4d519b14-1827-4fa5-d192-92d0a8520b28"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ],
      "source": [
        "print(5 == 5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 162,
      "metadata": {
        "id": "8D2UNKM5FoEC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d0d487e0-8b1f-431e-dff1-0066f97adb5b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n"
          ]
        }
      ],
      "source": [
        "print(5 > 5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b8UleYT_FoEC"
      },
      "source": [
        "These comparators also work in conjunction with variables."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 163,
      "metadata": {
        "id": "HHEygt0vFoEC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c0d97d3a-c965-418d-945b-527a7ce9cadc"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ],
      "source": [
        "m = 2\n",
        "n = 23\n",
        "print(m < n)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 40**"
      ],
      "metadata": {
        "id": "CS2KP0Qb7vru"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a = 89\n",
        "b = 52\n",
        "print (b<=a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tRaKXAQd7zPd",
        "outputId": "0a40d485-c367-4ad5-8909-b6bf0a3b4291"
      },
      "execution_count": 164,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3kRjOwB6FoEC"
      },
      "source": [
        "We can string these comparators together to make more complex logical statements using the logical operators `or`, `and`, and `not`. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 165,
      "metadata": {
        "id": "VbeJOQ3mFoEC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2f277d2f-7e94-412f-fcf4-2cca4e355059"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Statement 1 truth value: True\n",
            "Statement 2 truth value: True\n",
            "Statement 1 and Statement 2: True\n"
          ]
        }
      ],
      "source": [
        "statement_1 = 10 > 2\n",
        "statement_2 = 4 <= 6\n",
        "print(\"Statement 1 truth value: {0}\".format(statement_1))\n",
        "print(\"Statement 2 truth value: {0}\".format(statement_2))\n",
        "print(\"Statement 1 and Statement 2: {0}\".format(statement_1 and statement_2))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YifI4YkiFoEC"
      },
      "source": [
        "The `or` operator performs a logical `or` calculation. This is an inclusive `or`, so if either component paired together by `or` is `True`, the whole statement will be `True`. The `and` statement only outputs `True` if all components that are `and`ed together are True. Otherwise it will output `False`. The `not` statement simply inverts the truth value of whichever statement follows it. So a `True` statement will be evaluated as `False` when a `not` is placed in front of it. Similarly, a `False` statement will become `True` when a `not` is in front of it.\n",
        "\n",
        "Say that we have two logical statements, or assertions, $P$ and $Q$. The truth table for the basic logical operators is as follows:\n",
        "\n",
        "|  P  |  Q  | `not` P| P `and` Q | P `or` Q|\n",
        "|:-----:|:-----:|:---:|:---:|:---:|\n",
        "| `True` | `True` | `False` | `True` | `True` |\n",
        "| `False` | `True` | `True` | `False` | `True` |\n",
        "| `True` | `False` | `False` | `False` | `True` |\n",
        "| `False` | `False` | `True` | `False` | `False` |\n",
        "\n",
        "We can string multiple logical statements together using the logical operators."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 166,
      "metadata": {
        "id": "UJVjSNyRFoEC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e094417f-b030-48a2-ae62-215482a5d4b6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ],
      "source": [
        "print (((2 < 3) and (3 > 0)) or ((5 > 6) and not (4 < 2)))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1KvAi3oDFoED"
      },
      "source": [
        "Logical statements can be as simple or complex as we like, depending on what we need to express. Evaluating the above logical statement step by step we see that we are evaluating (`True and True`) `or` (`False and not False`). This becomes `True or (False and True`), subsequently becoming `True or False`, ultimately being evaluated as `True`."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jOnWfDnpFoED"
      },
      "source": [
        "#### Truthiness\n",
        "\n",
        "Data types in Python have a fun characteristic called truthiness. What this means is that most built-in types will evaluate as either `True` or `False` when a boolean value is needed (such as with an if-statement). As a general rule, containers like strings, tuples, dictionaries, lists, and sets, will return `True` if they contain anything at all and `False` if they contain nothing."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 167,
      "metadata": {
        "id": "_wmZPFZ2FoED",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "09c24c8d-3e2f-4e2e-b3e9-fb104cb4b993"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n"
          ]
        }
      ],
      "source": [
        "# Similar to how float() and int() work, bool() forces a value to be considered a boolean!\n",
        "print(bool(''))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 168,
      "metadata": {
        "id": "V1GH2saiFoED",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1dc55856-25bd-4f0c-da37-369d73d61ff7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ],
      "source": [
        "print(bool('I have character!'))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 169,
      "metadata": {
        "id": "rElnUFxzFoED",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5efec88c-dfcc-45c7-f077-d5ae71084c92"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n"
          ]
        }
      ],
      "source": [
        "print(bool([]))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 170,
      "metadata": {
        "id": "nMM8RgbyFoED",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "159aaa44-213f-450a-c86f-612b81354dc2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ],
      "source": [
        "print(bool([1, 2, 3]))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tmJMx3jpFoED"
      },
      "source": [
        "And so on, for the other collections and containers. `None` also evaluates as `False`. The number `1` is equivalent to `True` and the number `0` is equivalent to `False` as well, in a boolean context."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tBp-6Le6FoED"
      },
      "source": [
        "### If-statements\n",
        "\n",
        "We can create segments of code that only execute if a set of conditions is met. We use if-statements in conjunction with logical statements in order to create branches in our code. \n",
        "\n",
        "An `if` block gets entered when the condition is considered to be `True`. If condition is evaluated as `False`, the `if` block will simply be skipped unless there is an `else` block to accompany it. Conditions are made using either logical operators or by using the truthiness of values in Python. An if-statement is defined with a colon and a block of indented text."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 171,
      "metadata": {
        "id": "mxFMnO_IFoEE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b0dab5e9-edc5-4839-e73c-f9a7d63840ee"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ],
      "source": [
        "# This is the basic format of an if statement. This is a vacuous example. \n",
        "# The string \"Condition\" will always evaluated as True because it is a\n",
        "# non-empty string. he purpose of this code is to show the formatting of\n",
        "# an if-statement.\n",
        "if \"Condition\": \n",
        "    # This block of code will execute because the string is non-empty\n",
        "    # Everything on these indented lines\n",
        "    print(True)\n",
        "else:\n",
        "    # So if the condition that we examined with if is in fact False\n",
        "    # This block of code will execute INSTEAD of the first block of code\n",
        "    # Everything on these indented lines\n",
        "    print(False)\n",
        "# The else block here will never execute because \"Condition\" is a non-empty string."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 172,
      "metadata": {
        "id": "My8WwU_1FoEE"
      },
      "outputs": [],
      "source": [
        "i = 4\n",
        "if i == 5:\n",
        "    print('The variable i has a value of 5')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TbO0lHSNFoEE"
      },
      "source": [
        "Because in this example `i = 4` and the if-statement is only looking for whether `i` is equal to `5`, the print statement will never be executed. We can add in an `else` statement to create a contingency block of code in case the condition in the if-statement is not evaluated as `True`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 173,
      "metadata": {
        "id": "CnG8Il02FoEE",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 133
        },
        "outputId": "35b9c417-5103-423e-d623-d12f7cb6101e"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-173-58410d34faa9>\"\u001b[0;36m, line \u001b[0;32m3\u001b[0m\n\u001b[0;31m    print \"All lines in this indented block are part of this block\"\u001b[0m\n\u001b[0m          ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m Missing parentheses in call to 'print'. Did you mean print(\"All lines in this indented block are part of this block\")?\n"
          ]
        }
      ],
      "source": [
        "i = 4\n",
        "if i == 5:\n",
        "    print \"All lines in this indented block are part of this block\"\n",
        "    print 'The variable i has a value of 5'\n",
        "else:\n",
        "    print \"All lines in this indented block are part of this block\"\n",
        "    print 'The variable i is not equal to 5'"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zddc9WQ6FoEE"
      },
      "source": [
        "We can implement other branches off of the same if-statement by using `elif`, an abbreviation of \"else if\". We can include as many `elifs` as we like until we have exhausted all the logical branches of a condition."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 174,
      "metadata": {
        "id": "TVT7JgSEFoEE",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 133
        },
        "outputId": "23bd1093-3bcc-405b-fc4f-e23f97fdc683"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-174-440d77c5ad07>\"\u001b[0;36m, line \u001b[0;32m3\u001b[0m\n\u001b[0;31m    print 'The variable i has a value of 1'\u001b[0m\n\u001b[0m          ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m Missing parentheses in call to 'print'. Did you mean print('The variable i has a value of 1')?\n"
          ]
        }
      ],
      "source": [
        "i = 1\n",
        "if i == 1:\n",
        "    print 'The variable i has a value of 1'\n",
        "elif i == 2:\n",
        "    print 'The variable i has a value of 2'\n",
        "elif i == 3:\n",
        "    print 'The variable i has a value of 3'\n",
        "else:\n",
        "    print \"I don't care what i is\""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "r5RmsmJrFoEE"
      },
      "source": [
        "You can also nest if-statements within if-statements to check for further conditions."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VZG0jXoBFoEF"
      },
      "outputs": [],
      "source": [
        "i = 10\n",
        "if i % 2 == 0:\n",
        "    if i % 3 == 0:\n",
        "        print 'i is divisible by both 2 and 3! Wow!'\n",
        "    elif i % 5 == 0:\n",
        "        print 'i is divisible by both 2 and 5! Wow!'\n",
        "    else:\n",
        "        print 'i is divisible by 2, but not 3 or 5. Meh.'\n",
        "else:\n",
        "    print 'I guess that i is an odd number. Boring.'"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CrVlxKmiFoEF"
      },
      "source": [
        "Remember that we can group multiple conditions together by using the logical operators!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "EG6jRcrqFoEF"
      },
      "outputs": [],
      "source": [
        "i = 5\n",
        "j = 12\n",
        "if i < 10 and j > 11:\n",
        "    print '{0} is less than 10 and {1} is greater than 11! How novel and interesting!'.format(i, j)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gtbboMvVFoEF"
      },
      "source": [
        "You can use the logical comparators to compare strings!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lorg4NQSFoEF"
      },
      "outputs": [],
      "source": [
        "my_string = \"Carthago delenda est\"\n",
        "if my_string == \"Carthago delenda est\":\n",
        "    print 'And so it was! For the glory of Rome!'\n",
        "else:\n",
        "    print 'War elephants are TERRIFYING. I am staying home.'"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6dJwNfn7FoEF"
      },
      "source": [
        "As with other data types, `==` will check for whether the two things on either side of it have the same value. In this case, we compare whether the value of the strings are the same. Using `>` or `<` or any of the other comparators is not quite so intuitive, however, so we will stay from using comparators with strings in this lecture. Comparators will examine the [lexicographical order](https://en.wikipedia.org/wiki/Lexicographical_order) of the strings, which might be a bit more in-depth than you might like."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9aBoNyUCFoEF"
      },
      "source": [
        "Some built-in functions return a boolean value, so they can be used as conditions in an if-statement. User-defined functions can also be constructed so that they return a boolean value. This will be covered later with function definition!\n",
        "\n",
        "The `in` keyword is generally used to check membership of a value within another value. We can check memebership in the context of an if-statement and use it to output a truth value."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 175,
      "metadata": {
        "id": "iZrCba4nFoEG",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 133
        },
        "outputId": "5ea0fbd9-f36c-4c2d-d9b7-42877d5e83ca"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-175-adffd6a2f9d0>\"\u001b[0;36m, line \u001b[0;32m2\u001b[0m\n\u001b[0;31m    print 'Those are my favorite vowels!'\u001b[0m\n\u001b[0m          ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m Missing parentheses in call to 'print'. Did you mean print('Those are my favorite vowels!')?\n"
          ]
        }
      ],
      "source": [
        "if 'a' in my_string or 'e' in my_string:\n",
        "    print 'Those are my favorite vowels!'"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Hk0QWMh1FoEG"
      },
      "source": [
        "Here we use `in` to check whether the variable `my_string` contains any particular letters. We will later use `in` to iterate through lists!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "T9Ls0C_tFoEG"
      },
      "source": [
        "## Loop Structures\n",
        "\n",
        "Loop structures are one of the most important parts of programming. The `for` loop and the `while` loop provide a way to repeatedly run a block of code repeatedly. A `while` loop will iterate until a certain condition has been met. If at any point after an iteration that condition is no longer satisfied, the loop terminates. A `for` loop will iterate over a sequence of values and terminate when the sequence has ended. You can instead include conditions within the `for` loop to decide whether it should terminate early or you could simply let it run its course."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 176,
      "metadata": {
        "id": "Ms-WVlLFFoEG",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 133
        },
        "outputId": "a0c31857-ed2e-4375-eb99-609ee780a42d"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-176-cb97cd7228af>\"\u001b[0;36m, line \u001b[0;32m4\u001b[0m\n\u001b[0;31m    print 'I am looping! {0} more to go!'.format(i)\u001b[0m\n\u001b[0m          ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ],
      "source": [
        "i = 5\n",
        "while i > 0: # We can write this as 'while i:' because 0 is False!\n",
        "    i -= 1\n",
        "    print 'I am looping! {0} more to go!'.format(i)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "n8nh_T9NFoEG"
      },
      "source": [
        "\n",
        "With `while` loops we need to make sure that something actually changes from iteration to iteration so that that the loop actually terminates. In this case, we use the shorthand `i -= 1` (short for `i = i - 1`) so that the value of `i` gets smaller with each iteration. Eventually `i` will be reduced to `0`, rendering the condition `False` and exiting the loop."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QrsyozWkFoEG"
      },
      "source": [
        "A `for` loop iterates a set number of times, determined when you state the entry into the loop. In this case we are iterating over the list returned from `range()`. The `for` loop selects a value from the list, in order, and temporarily assigns the value of `i` to it so that operations can be performed with the value."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FzSaDOCkFoEG"
      },
      "outputs": [],
      "source": [
        "for i in range(5):\n",
        "    print 'I am looping! I have looped {0} times!'.format(i + 1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xTZFJmuJFoEG"
      },
      "source": [
        "Note that in this `for` loop we use the `in` keyword. Use of the `in` keyword is not limited to checking for membership as in the if-statement example. You can iterate over any collection with a `for` loop by using the `in` keyword.\n",
        "\n",
        "In this next example, we will iterate over a `set` because we want to check for containment and add to a new set."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Q3WFM4JhFoEG"
      },
      "outputs": [],
      "source": [
        "my_list = {'cats', 'dogs', 'lizards', 'cows', 'bats', 'sponges', 'humans'} # Lists all the animals in the world\n",
        "mammal_list = {'cats', 'dogs', 'cows', 'bats', 'humans'} # Lists all the mammals in the world\n",
        "my_new_list = set()\n",
        "for animal in my_list:\n",
        "    if animal in mammal_list:\n",
        "        # This adds any animal that is both in my_list and mammal_list to my_new_list\n",
        "        my_new_list.add(animal)\n",
        "        \n",
        "print my_new_list"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RfneVEo4FoEH"
      },
      "source": [
        "There are two statements that are very helpful in dealing with both `for` and `while` loops. These are `break` and `continue`. If `break` is encountered at any point while a loop is executing, the loop will immediately end."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9_6L7mg9FoEH"
      },
      "outputs": [],
      "source": [
        "i = 10\n",
        "while True:\n",
        "    if i == 14:\n",
        "        break\n",
        "    i += 1 # This is shorthand for i = i + 1. It increments i with each iteration.\n",
        "    print i"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lMOrNMXrFoEH"
      },
      "outputs": [],
      "source": [
        "for i in range(5):\n",
        "    if i == 2:\n",
        "        break\n",
        "    print i"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4PWUv6rPFoEH"
      },
      "source": [
        "The `continue` statement will tell the loop to immediately end this iteration and continue onto the next iteration of the loop."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5yTU37UcFoEH"
      },
      "outputs": [],
      "source": [
        "i = 0\n",
        "while i < 5:\n",
        "    i += 1\n",
        "    if i == 3:\n",
        "        continue\n",
        "    print i"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_DqPNV75FoEH"
      },
      "source": [
        "This loop skips printing the number $3$ because of the `continue` statement that executes when we enter the if-statement. The code never sees the command to print the number $3$ because it has already moved to the next iteration. The `break` and `continue` statements are further tools to help you control the flow of your loops and, as a result, your code."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lHXxNx1UFoEH"
      },
      "source": [
        "The variable that we use to iterate over a loop will retain its value when the loop exits. Similarly, any variables defined within the context of the loop will continue to exist outside of it."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 182,
      "metadata": {
        "id": "omj2nhhSFoEH",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 133
        },
        "outputId": "4d385e88-ae7a-4e18-cdca-97d24b4bbdbe"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-182-31e210266e0c>\"\u001b[0;36m, line \u001b[0;32m3\u001b[0m\n\u001b[0;31m    print 'I am eternal! I am {0} and I exist everywhere!'.format(i)\u001b[0m\n\u001b[0m          ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ],
      "source": [
        "for i in range(5):\n",
        "    loop_string = 'I transcend the loop!'\n",
        "    print 'I am eternal! I am {0} and I exist everywhere!'.format(i)\n",
        "\n",
        "print 'I persist! My value is {0}'.format(i)\n",
        "print loop_string"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DXzwZ5vNFoEH"
      },
      "source": [
        "We can also iterate over a dictionary!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 177,
      "metadata": {
        "id": "0I96X2iGFoEI"
      },
      "outputs": [],
      "source": [
        "my_dict = {'firstname' : 'Inigo', 'lastname' : 'Montoya', 'nemesis' : 'Rugen'}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 179,
      "metadata": {
        "id": "hL_4lsFsFoEI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "820d7820-8616-468b-e21c-728138ba22a8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "firstname\n",
            "lastname\n",
            "nemesis\n"
          ]
        }
      ],
      "source": [
        "for key in my_dict:\n",
        "    print (key)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6f0EFigBFoEI"
      },
      "source": [
        "If we just iterate over a dictionary without doing anything else, we will only get the keys. We can either use the keys to get the values, like so:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 181,
      "metadata": {
        "id": "s7lUuL-KFoEI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3a370193-af7f-4977-af55-112a1c52b2ed"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Inigo\n",
            "Montoya\n",
            "Rugen\n"
          ]
        }
      ],
      "source": [
        "for key in my_dict:\n",
        "    print (my_dict[key])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Qg2pT2fVFoEI"
      },
      "source": [
        "Or we can use the `items()` function to get both key and value at the same time."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 184,
      "metadata": {
        "id": "tht1QrB3FoEI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8e6f0515-b85b-43ba-e057-7ffb4dff334d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "firstname : Inigo\n",
            "lastname : Montoya\n",
            "nemesis : Rugen\n"
          ]
        }
      ],
      "source": [
        "for key, value in my_dict.items():\n",
        "    print (key, ':', value)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5p1itnERFoEI"
      },
      "source": [
        "The `items()` function creates a tuple of each key-value pair and the for loop unpacks that tuple into `key, value` on each separate execution of the loop!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p45mzY-ZFoEI"
      },
      "source": [
        "## Functions\n",
        "\n",
        "A function is a reusable block of code that you can call repeatedly to make calculations, output data, or really do anything that you want. This is one of the key aspects of using a programming language. To add to the built-in functions in Python, you can define your own!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 186,
      "metadata": {
        "id": "LvqCYc8tFoEI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d88024cd-85b7-43f8-eab7-48e1a7eb20a9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello, world!\n"
          ]
        }
      ],
      "source": [
        "def hello_world():\n",
        "    \"\"\" Prints Hello, world! \"\"\"\n",
        "    print ('Hello, world!')\n",
        "\n",
        "hello_world()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 187,
      "metadata": {
        "id": "ErmlaARJFoEJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "82f61ebf-c10e-41dd-9d85-1a3a0b525984"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello, world!\n",
            "Hello, world!\n",
            "Hello, world!\n",
            "Hello, world!\n",
            "Hello, world!\n"
          ]
        }
      ],
      "source": [
        "for i in range(5):\n",
        "    hello_world()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XODIHqcmFoEJ"
      },
      "source": [
        "Functions are defined with `def`, a function name, a list of parameters, and a colon. Everything indented below the colon will be included in the definition of the function.\n",
        "\n",
        "We can have our functions do anything that you can do with a normal block of code. For example, our `hello_world()` function prints a string every time it is called. If we want to keep a value that a function calculates, we can define the function so that it will `return` the value we want. This is a very important feature of functions, as any variable defined purely within a function will not exist outside of it."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 190,
      "metadata": {
        "id": "p_AzCIJpFoEJ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "54d736a0-88f5-4d6c-c122-5af4a651bb53"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-190-fb168f245f67>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0msee_the_scope\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0min_function_string\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'in_function_string' is not defined"
          ]
        }
      ],
      "source": [
        "def see_the_scope():\n",
        "    in_function_string = \"I'm stuck in here!\"\n",
        "\n",
        "see_the_scope()\n",
        "print(in_function_string)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iMxFYUWeFoEJ"
      },
      "source": [
        " The **scope** of a variable is the part of a block of code where that variable is tied to a particular value. Functions in Python have an enclosed scope, making it so that variables defined within them can only be accessed directly within them. If we pass those values to a return statement we can get them out of the function. This makes it so that the function call returns values so that you can store them in variables that have a greater scope.\n",
        " \n",
        "In this case specifically, including a return statement allows us to keep the string value that we define in the function."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 192,
      "metadata": {
        "id": "nXjHW4VDFoEJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "99df25b8-a55c-4541-e644-7d155a2c2d08"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Anything you can do I can do better!\n"
          ]
        }
      ],
      "source": [
        "def free_the_scope():\n",
        "    in_function_string = \"Anything you can do I can do better!\"\n",
        "    return in_function_string\n",
        "my_string = free_the_scope()\n",
        "print(my_string)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CoOZKOmeFoEJ"
      },
      "source": [
        "Just as we can get values out of a function, we can also put values into a function. We do this by defining our function with parameters."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1Q0AALExFoEJ"
      },
      "outputs": [],
      "source": [
        "def multiply_by_five(x):\n",
        "    \"\"\" Multiplies an input number by 5 \"\"\"\n",
        "    return x * 5\n",
        "\n",
        "n = 4\n",
        "print n\n",
        "print multiply_by_five(n)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3EPbcGc7FoEJ"
      },
      "source": [
        "In this example we only had one parameter for our function, `x`. We can easily add more parameters, separating everything with a comma."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "aAUcIayKFoEK"
      },
      "outputs": [],
      "source": [
        "def calculate_area(length, width):\n",
        "    \"\"\" Calculates the area of a rectangle \"\"\"\n",
        "    return length * width"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hUZ-fcMlFoEK"
      },
      "outputs": [],
      "source": [
        "l = 5\n",
        "w = 10\n",
        "print 'Area: ', calculate_area(l, w)\n",
        "print 'Length: ', l\n",
        "print 'Width: ', w"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "25FkWIIFFoEK"
      },
      "outputs": [],
      "source": [
        "def calculate_volume(length, width, depth):\n",
        "    \"\"\" Calculates the volume of a rectangular prism \"\"\"\n",
        "    return length * width * depth"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cAULjP2QFoEK"
      },
      "source": [
        "If we want to, we can define a function so that it takes an arbitrary number of parameters. We tell Python that we want this by using an asterisk (`*`)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5XfySOQ_FoEK"
      },
      "outputs": [],
      "source": [
        "def sum_values(*args):\n",
        "    sum_val = 0\n",
        "    for i in args:\n",
        "        sum_val += i\n",
        "    return sum_val"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ABOB7qh2FoEK"
      },
      "outputs": [],
      "source": [
        "print sum_values(1, 2, 3)\n",
        "print sum_values(10, 20, 30, 40, 50)\n",
        "print sum_values(4, 2, 5, 1, 10, 249, 25, 24, 13, 6, 4)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SiJi5u2DFoEK"
      },
      "source": [
        "The time to use `*args` as a parameter for your function is when you do not know how many values may be passed to it, as in the case of our sum function. The asterisk in this case is the syntax that tells Python that you are going to pass an arbitrary number of parameters into your function. These parameters are stored in the form of a tuple."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "uyhAdHC9FoEK"
      },
      "outputs": [],
      "source": [
        "def test_args(*args):\n",
        "    print type(args)\n",
        "\n",
        "test_args(1, 2, 3, 4, 5, 6)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1I8sAMD-FoEL"
      },
      "source": [
        "We can put as many elements into the `args` tuple as we want to when we call the function. However, because `args` is a tuple, we cannot modify it after it has been created.\n",
        "\n",
        "The `args` name of the variable is purely by convention. You could just as easily name your parameter `*vars` or `*things`. You can treat the `args` tuple like you would any other tuple, easily accessing `arg`'s values and iterating over it, as in the above `sum_values(*args)` function."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6m0gmheeFoEL"
      },
      "source": [
        "Our functions can return any data type. This makes it easy for us to create functions that check for conditions that we might want to monitor.\n",
        "\n",
        "Here we define a function that returns a boolean value. We can easily use this in conjunction with if-statements and  other situations that require a boolean."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Oj31FFUeFoEL"
      },
      "outputs": [],
      "source": [
        "def has_a_vowel(word):\n",
        "    \"\"\" \n",
        "    Checks to see whether a word contains a vowel \n",
        "    If it doesn't contain a conventional vowel, it\n",
        "    will check for the presence of 'y' or 'w'. Does\n",
        "    not check to see whether those are in the word\n",
        "    in a vowel context.\n",
        "    \"\"\"\n",
        "    vowel_list = ['a', 'e', 'i', 'o', 'u']\n",
        "    \n",
        "    for vowel in vowel_list:\n",
        "        if vowel in word:\n",
        "            return True\n",
        "    # If there is a vowel in the word, the function returns, preventing anything after this loop from running\n",
        "    return False"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "O6kx19IgFoEL"
      },
      "outputs": [],
      "source": [
        "my_word = 'catnapping'\n",
        "if has_a_vowel(my_word):\n",
        "    print 'How surprising, an english word contains a vowel.'\n",
        "else:\n",
        "    print 'This is actually surprising.'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vB6wGRy7FoEL"
      },
      "outputs": [],
      "source": [
        "def point_maker(x, y):\n",
        "    \"\"\" Groups x and y values into a point, technically a tuple \"\"\"\n",
        "    return x, y"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "l9AO7884FoEL"
      },
      "source": [
        "This above function returns an ordered pair of the input parameters, stored as a tuple."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IQr6BWpnFoEL",
        "scrolled": true
      },
      "outputs": [],
      "source": [
        "a = point_maker(0, 10)\n",
        "b = point_maker(5, 3)\n",
        "def calculate_slope(point_a, point_b):\n",
        "    \"\"\" Calculates the linear slope between two points \"\"\"\n",
        "    return (point_b[1] - point_a[1])/(point_b[0] - point_a[0])\n",
        "print \"The slope between a and b is {0}\".format(calculate_slope(a, b))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4qLxRJ6vFoEL"
      },
      "source": [
        "And that one calculates the slope between two points!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 259,
      "metadata": {
        "id": "d5RKJsE5FoEL",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 151
        },
        "outputId": "c87c3866-865d-474d-fa66-55f73fd2271e"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-259-384b8b2fde64>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    print \"The slope-intercept form of the line between a and b, using point a, is: y - {0} = {2}(x - {1})\".format(a[1], a[0], calculate_slope(a, b))\u001b[0m\n\u001b[0m          ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ],
      "source": [
        "print \"The slope-intercept form of the line between a and b, using point a, is: y - {0} = {2}(x - {1})\".format(a[1], a[0], calculate_slope(a, b))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v04drhqWFoEM"
      },
      "source": [
        "With the proper syntax, you can define functions to do whatever calculations you want. This makes them an indispensible part of programming in any language."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TGUZCs8cFoEM"
      },
      "source": [
        "## Next Steps\n",
        "\n",
        "This was a lot of material and there is still even more to cover! Make sure you play around with the cells in each notebook to accustom yourself to the syntax featured here and to figure out any limitations. If you want to delve even deeper into the material, the [documentation for Python](https://docs.python.org/2/) is all available online. We are in the process of developing a second part to this Python tutorial, designed to provide you with even more programming knowledge, so keep an eye on the [Quantopian Lectures Page](quantopian.com/lectures) and the [forums](quantopian.com/posts) for any new lectures."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J5VNrzrqFoEM"
      },
      "source": [
        "*This presentation is for informational purposes only and does not constitute an offer to sell, a solicitation to buy, or a recommendation for any security; nor does it constitute an offer to provide investment advisory or other services by Quantopian, Inc. (\"Quantopian\"). Nothing contained herein constitutes investment advice or offers any opinion with respect to the suitability of any security, and any views expressed herein should not be taken as advice to buy, sell, or hold any security or as an endorsement of any security or company.  In preparing the information contained herein, Quantopian, Inc. has not taken into account the investment needs, objectives, and financial circumstances of any particular investor. Any views expressed and data illustrated herein were prepared based upon information, believed to be reliable, available to Quantopian, Inc. at the time of publication. Quantopian makes no guarantees as to their accuracy or completeness. All information is subject to change and may quickly become unreliable for various reasons, including changes in market conditions or economic circumstances.*"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3WxjwzlPHs0I"
      },
      "source": [
        "<div align=\"center\">\n",
        "<img style=\"display: block; margin: auto;\" alt=\"photo\" src=\"https://upload.wikimedia.org/wikipedia/en/d/de/Quantopian_logo_2017.png\">\n",
        "</div> \n",
        "\n",
        "# Introduction to pandas\n",
        "by Maxwell Margenot\n",
        "\n",
        "Part of the Quantopian Lecture Series:\n",
        "\n",
        "* [www.quantopian.com/lectures](https://www.quantopian.com/lectures)\n",
        "* [github.com/quantopian/research_public](https://github.com/quantopian/research_public)\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eOKqPldlHs0L"
      },
      "source": [
        "pandas is a Python library that provides a collection of powerful data structures to better help you manage data. In this lecture, we will cover how to use the `Series` and `DataFrame` objects to handle data. These objects have a strong integration with NumPy, covered elsewhere in the [lecture series](http://www.quantopian.com/lectures#Introduction-to-NumPy), allowing us to easily do the necessary statistical and mathematical calculations that we need for finance."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 279,
      "metadata": {
        "id": "pzhf-KnPHs0M"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas_datareader.data as web\n",
        "import datetime\n",
        "import yfinance as yf"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "euf90nnmHs0N"
      },
      "source": [
        "With pandas, it is easy to store, visualize, and perform calculations on your data. With only a few lines of code we can modify our data and present it in an easily-understandable way. Here we simulate some returns in NumPy, put them into a pandas `DataFrame`, and perform calculations to turn them into prices and plot them, all only using a few lines of code."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 276,
      "metadata": {
        "id": "1hn_hFOJHs0N",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "fa6cc1ba-210b-4301-d019-3c7545b28cb9"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "returns = pd.DataFrame(np.random.normal(1.0, 0.03, (100, 10)))\n",
        "prices = returns.cumprod()\n",
        "prices.plot()\n",
        "plt.title('Randomly-generated Prices')\n",
        "plt.xlabel('Time')\n",
        "plt.ylabel('Price')\n",
        "plt.legend(loc=0);"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GI4-UHmBHs0O"
      },
      "source": [
        "So let's have a look at how we actually build up to this point!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "k3cHCvk2Hs0O"
      },
      "source": [
        "## pandas Data Structures\n",
        "\n",
        "### `Series`\n",
        "\n",
        "A pandas `Series` is a 1-dimensional array with labels that can contain any data type. We primarily use them for handling time series data. Creating a `Series` is as easy as calling `pandas.Series()` on a Python list or NumPy array."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 193,
      "metadata": {
        "id": "gtjfgCEfHs0P",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "830e3932-d1e6-48d5-c6fc-288fead6f6a7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0    1.0\n",
            "1    2.0\n",
            "2    NaN\n",
            "3    4.0\n",
            "4    5.0\n",
            "dtype: float64\n"
          ]
        }
      ],
      "source": [
        "s = pd.Series([1, 2, np.nan, 4, 5])\n",
        "print(s)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 41**"
      ],
      "metadata": {
        "id": "chBTQCC78HZW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "z = pd.Series([5, 7, 9, np.nan, np.nan, 19])\n",
        "print(z)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_CfDafj58Kop",
        "outputId": "e1b4c61c-2810-4ba8-bbbd-e9da2ae868bc"
      },
      "execution_count": 194,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0     5.0\n",
            "1     7.0\n",
            "2     9.0\n",
            "3     NaN\n",
            "4     NaN\n",
            "5    19.0\n",
            "dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Do2pkpaOHs0Q"
      },
      "source": [
        "Every `Series` has a name. We can give the series a name as a parameter or we can define it afterwards by directly accessing the name attribute. In this case, we have given our time series no name so the attribute should be empty."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 195,
      "metadata": {
        "id": "ygQ492kjHs0Q",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b8b9c46e-dd77-46fd-f47a-5dcbcc45393d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "None\n"
          ]
        }
      ],
      "source": [
        "print(s.name)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1O6Prsw_Hs0R"
      },
      "source": [
        "This name can be directly modified with no repercussions."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 196,
      "metadata": {
        "id": "9tyh6s2oHs0R",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "03ed9842-23a5-4bfe-d91c-f9fe4badb1fc"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Toy Series\n"
          ]
        }
      ],
      "source": [
        "s.name = \"Toy Series\"\n",
        "print(s.name)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 42**"
      ],
      "metadata": {
        "id": "LAAJ3vsU8gwB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "z.name = \"Movies Z\"\n",
        "print(z.name)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tZSbUOTR8joP",
        "outputId": "05ea594e-d185-473d-c026-f13382310a20"
      },
      "execution_count": 197,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Movies Z\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GFpVlGQqHs0S"
      },
      "source": [
        "We call the collected axis labels of a `Series` its index. An index can either passed to a `Series` as a parameter or added later, similarly to its name. In the absence of an index, a `Series` will simply contain an index composed of integers, starting at $0$, as in the case of our \"Toy Series\"."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 198,
      "metadata": {
        "id": "PNbzjAg9Hs0S",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "15565f35-fa08-4712-d47b-278e24a8fafa"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RangeIndex(start=0, stop=5, step=1)\n"
          ]
        }
      ],
      "source": [
        "print (s.index)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 43**"
      ],
      "metadata": {
        "id": "JUcDV93y8zV9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(z.index)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VoVkQQiJ81uU",
        "outputId": "44fcfaa0-937b-4ade-cb02-c9d8218ca3eb"
      },
      "execution_count": 199,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RangeIndex(start=0, stop=6, step=1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JMhFrJRiHs0S"
      },
      "source": [
        "pandas has a built-in function specifically for creating date indices, `date_range()`. We use the function here to create a new index for `s`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 200,
      "metadata": {
        "id": "p1tq3INsHs0S",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2061a493-b157-4586-c75a-f61285658f21"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DatetimeIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n",
            "               '2016-01-05'],\n",
            "              dtype='datetime64[ns]', freq='D')\n"
          ]
        }
      ],
      "source": [
        "new_index = pd.date_range(\"2016-01-01\", periods=len(s), freq=\"D\")\n",
        "print (new_index)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ngTfZsDFHs0T"
      },
      "source": [
        "An index must be exactly the same length as the `Series` itself. Each index must match one-to-one with each element of the `Series`. Once this is satisfied, we can directly modify the `Series` index, as with the name, to use our new and more informative index (relatively speaking)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 201,
      "metadata": {
        "id": "L_rdI8juHs0T",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5ba76a24-b036-4a96-b24f-ca0ba873d945"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DatetimeIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n",
            "               '2016-01-05'],\n",
            "              dtype='datetime64[ns]', freq='D')\n"
          ]
        }
      ],
      "source": [
        "s.index = new_index\n",
        "print (s.index)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cv6qygOuHs0T"
      },
      "source": [
        "The index of the `Series` is crucial for handling time series, which we will get into a little later."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Eb-i9HDWHs0U"
      },
      "source": [
        "#### Accessing `Series` Elements\n",
        "\n",
        "`Series` are typically accessed using the `iloc[]` and `loc[]` methods. We use `iloc[]` to access elements by integer index and we use `loc[]` to access the index of the Series."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 202,
      "metadata": {
        "id": "KFCz7QIpHs0U",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ef23005c-f098-495f-a169-ae562f1ad2c8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "First element of the series:  1.0\n",
            "Last element of the series:  5.0\n"
          ]
        }
      ],
      "source": [
        "print (\"First element of the series: \", s.iloc[0])\n",
        "print (\"Last element of the series: \", s.iloc[len(s)-1])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 44**"
      ],
      "metadata": {
        "id": "XYFWU2Hd9Opz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Primer elemento de la serie: \",z.iloc[0])\n",
        "print(\"Último elemento de la serie: \",z.iloc[len(z)-1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nHqfq4iL9WW3",
        "outputId": "25d5222b-f87b-4a6c-ffac-8dae362942cb"
      },
      "execution_count": 203,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Primer elemento de la serie:  5.0\n",
            "Último elemento de la serie:  19.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Cv-UzEsMHs0U"
      },
      "source": [
        "We can slice a `Series` similarly to our favorite collections, Python lists and NumPy arrays. We use the colon operator to indicate the slice."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 204,
      "metadata": {
        "id": "Rwr5OIQIHs0U",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "75e978c9-b917-4be5-9e48-fdb66c403733"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2016-01-01    1.0\n",
              "2016-01-02    2.0\n",
              "Freq: D, Name: Toy Series, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 204
        }
      ],
      "source": [
        "s.iloc[:2]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ELufJEW-Hs0V"
      },
      "source": [
        "When creating a slice, we have the options of specifying a beginning, an end, and a step. The slice will begin at the start index, and take steps of size `step` until it passes the end index, not including the end."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 257,
      "metadata": {
        "id": "cppKemi1Hs0V",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2088fb3c-369a-4f33-9283-dd7df4826f8e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2016-01-01    1.0\n",
              "2016-01-02    2.0\n",
              "2016-01-03    NaN\n",
              "2016-01-04    4.0\n",
              "Freq: D, Name: Toy Series, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 257
        }
      ],
      "source": [
        "start = 0\n",
        "end = len(s) - 1\n",
        "step = 1\n",
        "\n",
        "s.iloc[start:end:step]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vrVpxeMrHs0V"
      },
      "source": [
        "We can even reverse a `Series` by specifying a negative step size. Similarly, we can index the start and end with a negative integer value."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 205,
      "metadata": {
        "id": "1_CoIrtSHs0V",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "20dbe8d2-fd40-43ad-d2a8-43b613c9fd07"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2016-01-05    5.0\n",
              "2016-01-04    4.0\n",
              "2016-01-03    NaN\n",
              "2016-01-02    2.0\n",
              "2016-01-01    1.0\n",
              "Freq: -1D, Name: Toy Series, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 205
        }
      ],
      "source": [
        "s.iloc[::-1]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FMGjtc63Hs0W"
      },
      "source": [
        "This returns a slice of the series that starts from the second to last element and ends at the third to last element (because the fourth to last is not included, taking steps of size $1$)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 206,
      "metadata": {
        "id": "WBPIIryLHs0W",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cbf58164-ea69-48f1-cd49-7f4d8c613198"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2016-01-04    4.0\n",
              "2016-01-03    NaN\n",
              "Freq: -1D, Name: Toy Series, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 206
        }
      ],
      "source": [
        "s.iloc[-2:-4:-1]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NGcgARRsHs0W"
      },
      "source": [
        "We can also access a series by using the values of its index. Since we indexed `s` with a collection of dates (`Timestamp` objects) we can look at the value contained in `s` for a particular date."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 207,
      "metadata": {
        "id": "BvAWyZvkHs0W",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "68ecb89a-0276-40c8-e14a-87b2974dfb2b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0"
            ]
          },
          "metadata": {},
          "execution_count": 207
        }
      ],
      "source": [
        "s.loc['2016-01-01']"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Nj7OVKhVHs0W"
      },
      "source": [
        "Or even for a range of dates!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 208,
      "metadata": {
        "id": "mi_7afOcHs0W",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b2d8a910-f6ba-4adb-a6a0-ec9d13e0175b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2016-01-02    2.0\n",
              "2016-01-03    NaN\n",
              "2016-01-04    4.0\n",
              "Freq: D, Name: Toy Series, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 208
        }
      ],
      "source": [
        "s.loc['2016-01-02':'2016-01-04']"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p25gL_JIHs0X"
      },
      "source": [
        "With `Series`, we *can* just use the brackets (`[]`) to access elements, but this is not best practice. The brackets are ambiguous because they can be used to access `Series` (and `DataFrames`) using both index and integer values and the results will change based on context (especially with `DataFrames`)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_kV2rjSTHs0X"
      },
      "source": [
        "#### Boolean Indexing\n",
        "\n",
        "In addition to the above-mentioned access methods, you can filter `Series` using boolean arrays. `Series` are compatible with your standard comparators. Once compared with whatever condition you like, you get back yet another `Series`, this time filled with boolean values."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 209,
      "metadata": {
        "id": "f6e7gd5OHs0X",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "20b1b843-14c7-4682-cf2a-3053e06376f6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2016-01-01     True\n",
            "2016-01-02     True\n",
            "2016-01-03    False\n",
            "2016-01-04    False\n",
            "2016-01-05    False\n",
            "Freq: D, Name: Toy Series, dtype: bool\n"
          ]
        }
      ],
      "source": [
        "print (s < 3)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 45**"
      ],
      "metadata": {
        "id": "-PSSrX4W9seC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(z>8)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D-GXAkbX9xbq",
        "outputId": "a53e7fd2-9c4b-46f3-d414-558ea4e4f131"
      },
      "execution_count": 210,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0    False\n",
            "1    False\n",
            "2     True\n",
            "3    False\n",
            "4    False\n",
            "5     True\n",
            "Name: Movies Z, dtype: bool\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FI-6yhq5Hs0X"
      },
      "source": [
        "We can pass *this* `Series` back into the original `Series` to filter out only the elements for which our condition is `True`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 211,
      "metadata": {
        "id": "WE_RUJl8Hs0X",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b9082d93-8ca9-4861-bf21-7fe20c48e616"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2016-01-01    1.0\n",
            "2016-01-02    2.0\n",
            "Freq: D, Name: Toy Series, dtype: float64\n"
          ]
        }
      ],
      "source": [
        "print (s.loc[s < 3])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 46**"
      ],
      "metadata": {
        "id": "nKoG6Bml94P_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print (z.loc[z<9])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GMjOpdIo96MG",
        "outputId": "163a99d2-33f1-4021-e11d-45e67ce76894"
      },
      "execution_count": 213,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0    5.0\n",
            "1    7.0\n",
            "Name: Movies Z, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Shld9-uTHs0Y"
      },
      "source": [
        "If we so desire, we can group multiple conditions together using the logical operators `&`, `|`, and `~` (and, or, and not, respectively)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 268,
      "metadata": {
        "id": "we1dMwOOHs0Y",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e81e906e-0081-4b7c-a5f3-8b7b44790dec"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2016-01-02    2.0\n",
            "Freq: D, Name: Toy Series, dtype: float64\n"
          ]
        }
      ],
      "source": [
        "print (s.loc[(s < 3) & (s > 1)])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iMoKC5wMHs0Y"
      },
      "source": [
        "This is very convenient for getting only elements of a `Series` that fulfill specific criteria that we need. It gets even more convenient when we are handling `DataFrames`."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NrupLS36Hs0Y"
      },
      "source": [
        "#### Indexing and Time Series\n",
        "\n",
        "Since we use `Series` for handling time series, it's worth covering a little bit of how we handle the time component. For our purposes we use pandas `Timestamp` objects. Let's pull a full time series, complete with all the appropriate labels, by using our `get_pricing()` method. All data pulled with `get_pricing()` or using our Pipeline API will be in either `Series` or `DataFrame` format. We can modify this index however we like."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 280,
      "metadata": {
        "id": "GxCAmvucHs0Y",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "97faa10a-830d-4fc4-885a-591723241c84"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-280-daa1891c3bb9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mstart\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"2012-01-01\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mend\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"2016-01-01\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mprices\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_pricing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msymbol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart_date\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstart\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend_date\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfields\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"price\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'get_pricing' is not defined"
          ]
        }
      ],
      "source": [
        "symbol = \"CMG\"\n",
        "start = \"2012-01-01\"\n",
        "end = \"2016-01-01\"\n",
        "prices = get_pricing(symbol, start_date=start, end_date=end, fields=\"price\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Correción get_pricing\n",
        "import yfinance as yf\n",
        "\n",
        "company = yf.Ticker(\"CMG\")\n",
        "\n",
        "# get stock info\n",
        "print (company.info)\n",
        "\n",
        "# get historical market data\n",
        "prices = company.history(start=\"2012-01-01\",  end=\"2016-01-01\")\n",
        "prices"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 388
        },
        "id": "RLkoZVqnQCX2",
        "outputId": "fb9ec55b-a975-453b-881d-442358a0ea29"
      },
      "execution_count": 281,
      "outputs": [
        {
          "output_type": "error",
          "ename": "Exception",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mException\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-281-5d7879b1d485>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# get stock info\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mcompany\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;31m# get historical market data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/yfinance/ticker.py\u001b[0m in \u001b[0;36minfo\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    136\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    137\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0minfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 138\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_info\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    139\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    140\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/yfinance/base.py\u001b[0m in \u001b[0;36mget_info\u001b[0;34m(self, proxy)\u001b[0m\n\u001b[1;32m   1473\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget_info\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproxy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1474\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_quote\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mproxy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mproxy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1475\u001b[0;31m         \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_quote\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1476\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1477\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/yfinance/scrapers/quote.py\u001b[0m in \u001b[0;36minfo\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     93\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0minfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     94\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 95\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_scrape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mproxy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     96\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_scrape_complementary\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mproxy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     97\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/yfinance/scrapers/quote.py\u001b[0m in \u001b[0;36m_scrape\u001b[0;34m(self, proxy)\u001b[0m\n\u001b[1;32m    122\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    123\u001b[0m         \u001b[0;31m# get info and sustainability\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 124\u001b[0;31m         \u001b[0mjson_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_json_data_stores\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mproxy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mproxy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    125\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    126\u001b[0m             \u001b[0mquote_summary_store\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mjson_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'QuoteSummaryStore'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/yfinance/data.py\u001b[0m in \u001b[0;36mwrapped\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     39\u001b[0m         \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m         \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mv\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     42\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m     \u001b[0;31m# copy over the lru_cache extra methods to this wrapper to be able to access them\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/yfinance/data.py\u001b[0m in \u001b[0;36mget_json_data_stores\u001b[0;34m(self, sub_page, proxy)\u001b[0m\n\u001b[1;32m    309\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    310\u001b[0m         \u001b[0;31m# Decrypt!\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 311\u001b[0;31m         \u001b[0mstores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdecrypt_cryptojs_aes_stores\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeys\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    312\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mstores\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    313\u001b[0m             \u001b[0;31m# Maybe Yahoo returned old format, not encrypted\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/yfinance/data.py\u001b[0m in \u001b[0;36mdecrypt_cryptojs_aes_stores\u001b[0;34m(data, keys)\u001b[0m\n\u001b[1;32m    160\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    161\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0msuccess\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 162\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"yfinance failed to decrypt Yahoo data response\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    163\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    164\u001b[0m     \u001b[0mdecoded_stores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloads\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mplaintext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mException\u001b[0m: yfinance failed to decrypt Yahoo data response"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SH9w8y8lHs0Y"
      },
      "source": [
        "We can display the first few elements of our series by using the `head()` method and specifying the number of elements that we want. The analogous method for the last few elements is `tail()`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 217,
      "metadata": {
        "id": "7eQOihahHs0Y",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 186
        },
        "outputId": "09635518-7471-44de-861c-aaeddb263d62"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-217-34975609935e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m\"\\n\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprices\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'prices' is not defined"
          ]
        }
      ],
      "source": [
        "print (\"\\n\", type(prices))\n",
        "prices.head(5) "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8_-B8mzpHs0Z"
      },
      "source": [
        "As with our toy example, we can specify a name for our time series, if only to clarify the name the `get_pricing()` provides us."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 282,
      "metadata": {
        "id": "CTSLVePxHs0Z",
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 133
        },
        "outputId": "7d3477d1-87c7-469d-a283-4654befa60de"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-282-867c95f8f4d6>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    print 'Old name: ', prices.name\u001b[0m\n\u001b[0m          ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m Missing parentheses in call to 'print'. Did you mean print('Old name: ', prices.name)?\n"
          ]
        }
      ],
      "source": [
        "print 'Old name: ', prices.name\n",
        "prices.name = symbol\n",
        "print 'New name: ', prices.name"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lJcC9Y-mHs0Z"
      },
      "source": [
        "Let's take a closer look at the `DatetimeIndex` of our `prices` time series."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 255,
      "metadata": {
        "id": "LYIuAIezHs0Z",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 168
        },
        "outputId": "f4f71b90-083c-48ce-ace7-eca4a2279a73"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-255-e093899a3ce4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'prices' is not defined"
          ]
        }
      ],
      "source": [
        "print(prices.index)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ckzGNBJ9Hs0Z"
      },
      "source": [
        "Notice that this `DatetimeIndex` has a collection of associated information. In particular it has an associated frequency (`freq`) and an associated timezone (`tz`). The frequency indicates whether the data is daily vs monthly vs some other period while the timezone indicates what locale this index is relative to. We can modify all of this extra information!\n",
        "\n",
        "If we resample our `Series`, we can adjust the frequency of our data. We currently have daily data (excluding weekends) because `get_pricing()` pulls only data from market days. Let's up-sample from this daily data to monthly data using the `resample()` method."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 283,
      "metadata": {
        "id": "XYEz0k4wHs0Z",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 334
        },
        "outputId": "38f6d891-99f4-4fe6-8895-e59accd4c843"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-283-a1ca7dcf26dc>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmonthly_prices\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'M'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mmonthly_prices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mresample\u001b[0;34m(self, rule, axis, closed, label, convention, kind, loffset, base, on, level, origin, offset)\u001b[0m\n\u001b[1;32m  10348\u001b[0m         \u001b[0moffset\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTimedeltaConvertibleTypes\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m  10349\u001b[0m     ) -> Resampler:\n\u001b[0;32m> 10350\u001b[0;31m         return super().resample(\n\u001b[0m\u001b[1;32m  10351\u001b[0m             \u001b[0mrule\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrule\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m  10352\u001b[0m             \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mresample\u001b[0;34m(self, rule, axis, closed, label, convention, kind, loffset, base, on, level, origin, offset)\u001b[0m\n\u001b[1;32m   8124\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   8125\u001b[0m         \u001b[0maxis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_axis_number\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 8126\u001b[0;31m         return get_resampler(\n\u001b[0m\u001b[1;32m   8127\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   8128\u001b[0m             \u001b[0mfreq\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrule\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/resample.py\u001b[0m in \u001b[0;36mget_resampler\u001b[0;34m(obj, kind, **kwds)\u001b[0m\n\u001b[1;32m   1380\u001b[0m     \"\"\"\n\u001b[1;32m   1381\u001b[0m     \u001b[0mtg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTimeGrouper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1382\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mtg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_resampler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkind\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1383\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1384\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/resample.py\u001b[0m in \u001b[0;36m_get_resampler\u001b[0;34m(self, obj, kind)\u001b[0m\n\u001b[1;32m   1556\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mTimedeltaIndexResampler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroupby\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1557\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1558\u001b[0;31m         raise TypeError(\n\u001b[0m\u001b[1;32m   1559\u001b[0m             \u001b[0;34m\"Only valid with DatetimeIndex, \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1560\u001b[0m             \u001b[0;34m\"TimedeltaIndex or PeriodIndex, \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: Only valid with DatetimeIndex, TimedeltaIndex or PeriodIndex, but got an instance of 'RangeIndex'"
          ]
        }
      ],
      "source": [
        "monthly_prices = prices.resample('M')\n",
        "monthly_prices.head(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Wj1WFSpvHs0Z"
      },
      "source": [
        "The `resample()` method defaults to using the mean of the lower level data to create the higher level data. We can specify how else we might want the up-sampling to be calculated by specifying the `how` parameter."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YEkx6clnHs0a"
      },
      "outputs": [],
      "source": [
        "monthly_prices_med = prices.resample('M', how='median')\n",
        "monthly_prices_med.head(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GXlP28PCHs0a"
      },
      "source": [
        "We can even specify how we want the calculation of the new period to be done. Here we create a `custom_resampler()` function that will return the first value of the period. In our specific case, this will return a `Series` where the monthly value is the first value of that month."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KQNGZhRrHs0a"
      },
      "outputs": [],
      "source": [
        "def custom_resampler(array_like):\n",
        "    \"\"\" Returns the first value of the period \"\"\"\n",
        "    return array_like[0]\n",
        "\n",
        "first_of_month_prices = prices.resample('M', how=custom_resampler)\n",
        "first_of_month_prices.head(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SG_S83MbHs0a"
      },
      "source": [
        "We can also adjust the timezone of a `Series` to adapt the time of real-world data. In our case, our time series is already localized to UTC, but let's say that we want to adjust the time to be 'US/Eastern'. In this case we use the `tz_convert()` method, since the time is already localized."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7ysYd93ZHs0a"
      },
      "outputs": [],
      "source": [
        "eastern_prices = prices.tz_convert('US/Eastern')\n",
        "eastern_prices.head(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DsGzYSHIHs0b"
      },
      "source": [
        "In addition to the capacity for timezone and frequency management, each time series has a built-in `reindex()` method that we can use to realign the existing data according to a new set of index labels. If data does not exist for a particular label, the data will be filled with a placeholder value. This is typically `np.nan`, though we can provide a fill method.\n",
        "\n",
        "The data that we `get_pricing()` only includes market days. But what if we want prices for every single calendar day? This will include holidays and weekends, times when you normally cannot trade equities.  First let's create a new `DatetimeIndex` that contains all that we want."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GlsyWoEzHs0b",
        "scrolled": false
      },
      "outputs": [],
      "source": [
        "calendar_dates = pd.date_range(start=start, end=end, freq='D', tz='UTC')\n",
        "print calendar_dates"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iteupvB1Hs0b"
      },
      "source": [
        "Now let's use this new set of dates to reindex our time series. We tell the function that the fill method that we want is `ffill`. This denotes \"forward fill\". Any `NaN` values will be filled by the *last value* listed. So the price on the weekend or on a holiday will be listed as the price on the last market day that we know about."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Nkv6E6rNHs0b"
      },
      "outputs": [],
      "source": [
        "calendar_prices = prices.reindex(calendar_dates, method='ffill')\n",
        "calendar_prices.head(15)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "O2dAluLEHs0b"
      },
      "source": [
        "You'll notice that we still have a couple of `NaN` values right at the beginning of our time series. This is because the first of January in 2012 was a Sunday and the second was a market holiday! Because these are the earliest data points and we don't have any information from before them, they cannot be forward-filled. We will take care of these `NaN` values in the next section, when we deal with missing data."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NjYs1vWrHs0b"
      },
      "source": [
        "#### Missing Data\n",
        "\n",
        "Whenever we deal with real data, there is a very real possibility of encountering missing values. Real data is riddled with holes and pandas provides us with ways to handle them. Sometimes resampling or reindexing can create `NaN` values. Fortunately, pandas provides us with ways to handle them. We have two primary means of coping with missing data. The first of these is filling in the missing data with  `fillna()`. For example, say that we want to fill in the missing days with the mean price of all days."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GBxhQxABHs0b"
      },
      "outputs": [],
      "source": [
        "meanfilled_prices = calendar_prices.fillna(calendar_prices.mean())\n",
        "meanfilled_prices.head(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W_BnjUNmHs0c"
      },
      "source": [
        "Using `fillna()` is fairly easy. It is just a matter of indicating the value that you want to fill the spaces with. Unfortunately, this particular case doesn't make a whole lot of sense, for reasons discussed in the [lecture on stationarity](https://www.quantopian.com/lectures/integration-cointegration-and-stationarity) in the Lecture series. We could fill them with with $0$, simply, but that's similarly uninformative.\n",
        "\n",
        "Rather than filling in specific values, we can use the `method` parameter, similarly to how the `reindex()` method works. We could use \"backward fill\", where `NaN`s are filled with the *next* filled value (instead of forward fill's *last* filled value) like so:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UQMNOZJKHs0c"
      },
      "outputs": [],
      "source": [
        "bfilled_prices = calendar_prices.fillna(method='bfill')\n",
        "bfilled_prices.head(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BFYp3QokHs0c"
      },
      "source": [
        "But again, this is a bad idea for the same reasons as the previous option. Both of these so-called solutions take into account *future data* that was not available at the time of the data points that we are trying to fill. In the case of using the mean or the median, these summary statistics are calculated by taking into account the entire time series. Backward filling is equivalent to saying that the price of a particular security today, right now, tomorrow's price. This also makes no sense. These two options are both examples of look-ahead bias, using data that would be unknown or unavailable at the desired time, and should be avoided.\n",
        "\n",
        "Our next option is significantly more appealing. We could simply drop the missing data using the `dropna()` method. This is much better alternative than filling `NaN` values in with arbitrary numbers."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 254,
      "metadata": {
        "id": "WIew7x2CHs0c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 186
        },
        "outputId": "f0309a30-814e-4684-86fa-5901457ce49a"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-254-f78c62562c38>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdropped_prices\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcalendar_prices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdropna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mdropped_prices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'calendar_prices' is not defined"
          ]
        }
      ],
      "source": [
        "dropped_prices = calendar_prices.dropna()\n",
        "dropped_prices.head(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RLX5oj2XHs0c"
      },
      "source": [
        "Now our time series is cleaned for the calendar year, with all of our `NaN` values properly handled. It is time to talk about how to actually do time series analysis with pandas data structures."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nfBXOY7SHs0c"
      },
      "source": [
        "#### Time Series Analysis with pandas\n",
        "\n",
        "Let's do some basic time series analysis on our original prices. Each pandas `Series` has a built-in plotting method."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 219,
      "metadata": {
        "id": "RxL-3JkUHs0c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 239
        },
        "outputId": "acc7c593-e2f8-49fd-ae35-7ca447f7c766"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-219-7fe350907b77>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;31m# We still need to add the axis labels and title ourselves\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msymbol\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m\" Prices\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Price\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Date\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'prices' is not defined"
          ]
        }
      ],
      "source": [
        "prices.plot();\n",
        "# We still need to add the axis labels and title ourselves\n",
        "plt.title(symbol + \" Prices\")\n",
        "plt.ylabel(\"Price\")\n",
        "plt.xlabel(\"Date\");"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_pG0Hp_2Hs0d"
      },
      "source": [
        "As well as some built-in descriptive statistics. We can either calculate these individually or using the `describe()` method."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 220,
      "metadata": {
        "id": "KBz2Xc0CHs0d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 133
        },
        "outputId": "d763c4d8-7096-43fc-c22e-a5440362f340"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-220-de2b372badd7>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    print \"Mean: \", prices.mean()\u001b[0m\n\u001b[0m          ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ],
      "source": [
        "print \"Mean: \", prices.mean()\n",
        "print \"Standard deviation: \", prices.std()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 253,
      "metadata": {
        "id": "Ex75tqesHs0d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "312d8b26-f2fe-472d-87bd-8f4d1c8ef1d5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Summary Statistics\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-253-082e4bc72f9f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m\"Summary Statistics\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdescribe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'prices' is not defined"
          ]
        }
      ],
      "source": [
        "print (\"Summary Statistics\")\n",
        "print (prices.describe())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z4QLChYHHs0d"
      },
      "source": [
        "We can easily modify `Series` with scalars using our basic mathematical operators."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Isg3Y578Hs0d"
      },
      "outputs": [],
      "source": [
        "modified_prices = prices * 2 - 10\n",
        "modified_prices.head(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YhBB_oHSHs0d"
      },
      "source": [
        "And we can create linear combinations of `Series` themselves using the basic mathematical operators. pandas will group up matching indices and perform the calculations elementwise to produce a new `Series`. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wPvaiZpvHs0d"
      },
      "outputs": [],
      "source": [
        "noisy_prices = prices + 5 * pd.Series(np.random.normal(0, 5, len(prices)), index=prices.index) + 20\n",
        "noisy_prices.head(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oTPgd_SSHs0e"
      },
      "source": [
        "If there are no matching indices, however, we may get an empty `Series` in return."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HQXtyqy2Hs0e"
      },
      "outputs": [],
      "source": [
        "empty_series = prices + pd.Series(np.random.normal(0, 1, len(prices)))\n",
        "empty_series.head(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qk2TbRFXHs0e"
      },
      "source": [
        "Rather than looking at a time series itself, we may want to look at its first-order differences or percent change (in order to get additive or multiplicative returns, in our particular case). Both of these are built-in methods."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 284,
      "metadata": {
        "collapsed": true,
        "id": "66lqB-ceHs0g"
      },
      "outputs": [],
      "source": [
        "add_returns = prices.diff()[1:]\n",
        "mult_returns = prices.pct_change()[1:]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 285,
      "metadata": {
        "id": "-M6342uVHs0g",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 543
        },
        "outputId": "9423e56a-9605-445b-858e-4c412d0a6071"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plt.title(\"Multiplicative returns of \" + symbol)\n",
        "plt.xlabel(\"Date\")\n",
        "plt.ylabel(\"Percent Returns\")\n",
        "mult_returns.plot();"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aRrtXJTdHs0g"
      },
      "source": [
        "pandas has convenient functions for calculating rolling means and standard deviations, as well!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 286,
      "metadata": {
        "id": "l_4YgtrrHs0g",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 310
        },
        "outputId": "4e27276d-fdab-427c-e2a7-a1d02e2f7e4d"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-286-61350e7af348>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mrolling_mean\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrolling_mean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprices\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m30\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mrolling_mean\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"30-day rolling mean\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/__init__.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(name)\u001b[0m\n\u001b[1;32m    242\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0m_SparseArray\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    243\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 244\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"module 'pandas' has no attribute '{name}'\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    245\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    246\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: module 'pandas' has no attribute 'rolling_mean'"
          ]
        }
      ],
      "source": [
        "rolling_mean = pd.rolling_mean(prices, 30)\n",
        "rolling_mean.name = \"30-day rolling mean\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 287,
      "metadata": {
        "id": "mEAn0JA7Hs0g",
        "scrolled": false,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "outputId": "7e510784-7a35-410e-b89b-60b4209f3be5"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-287-260c4e2bdda3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mrolling_mean\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msymbol\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m\"Price\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Date\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Price\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'rolling_mean' is not defined"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "prices.plot()\n",
        "rolling_mean.plot()\n",
        "plt.title(symbol + \"Price\")\n",
        "plt.xlabel(\"Date\")\n",
        "plt.ylabel(\"Price\")\n",
        "plt.legend();"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "id": "9CFJRx35Hs0h",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 304
        },
        "outputId": "a8d20cde-fb82-44e0-d708-7edcbf9121c6"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-6-4f247c2c52cf>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mrolling_std\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrolling_std\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprices\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m30\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mrolling_std\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"30-day rolling volatility\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/__init__.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(name)\u001b[0m\n\u001b[1;32m    242\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0m_SparseArray\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    243\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 244\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"module 'pandas' has no attribute '{name}'\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    245\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    246\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: module 'pandas' has no attribute 'rolling_std'"
          ]
        }
      ],
      "source": [
        "rolling_std = pd.rolling_std(prices, 30)\n",
        "rolling_std.name = \"30-day rolling volatility\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_hhUYmn_Hs0h"
      },
      "outputs": [],
      "source": [
        "rolling_std.plot()\n",
        "plt.title(rolling_std.name);\n",
        "plt.xlabel(\"Date\")\n",
        "plt.ylabel(\"Standard Deviation\");"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "chXXq_FdHs0h"
      },
      "source": [
        "Many NumPy functions will work on `Series` the same way that they work on 1-dimensional NumPy arrays."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6Q35KEYOHs0h"
      },
      "outputs": [],
      "source": [
        "print np.median(mult_returns)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "r2uuHlv_Hs0h"
      },
      "source": [
        "The majority of these functions, however, are already implemented directly as `Series` and `DataFrame` methods."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7DC8zMlwHs0h"
      },
      "outputs": [],
      "source": [
        "print mult_returns.median()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nISYL1qUHs0h"
      },
      "source": [
        "In every case, using the built-in pandas method will be better than using the NumPy function on a pandas data structure due to improvements in performance. Make sure to check out the `Series` [documentation](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.html) before resorting to other calculations of common functions."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oBFeQ1ixHs0i"
      },
      "source": [
        "### `DataFrames`\n",
        "\n",
        "Many of the aspects of working with `Series` carry over into `DataFrames`. pandas `DataFrames` allow us to easily manage our data with their intuitive structure. \n",
        "\n",
        "Like `Series`, `DataFrames` can hold multiple types of data, but `DataFrames` are 2-dimensional objects, unlike `Series`. Each `DataFrame` has an index and a columns attribute, which we will cover more in-depth when we start actually playing with an object. The index attribute is like the index of a `Series`, though indices in pandas have some extra features that we will unfortunately not be able to cover here. If you are interested in this, check out the [pandas documentation](http://pandas.pydata.org/pandas-docs/version/0.18.1/advanced.html) on advanced indexing. The columns attribute is what provides the second dimension of our `DataFrames`, allowing us to combine named columns (all `Series`), into a cohesive object with the index lined-up.\n",
        "\n",
        "We can create a `DataFrame` by calling `pandas.DataFrame()` on a dictionary or NumPy `ndarray`. We can also concatenate a group of pandas `Series` into a `DataFrame` using `pandas.concat()`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 222,
      "metadata": {
        "id": "IKL7KTNJHs0i",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5e8b8057-0dbd-4da9-b292-ce2072a30ff3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'a': [1, 2, 3, 4, 5], 'b': ['L', 'K', 'J', 'M', 'Z'], 'c': array([ 0.44613689, -2.03564262, -1.47024932, -0.37666492, -0.92296845])}\n"
          ]
        }
      ],
      "source": [
        "dict_data = {\n",
        "    'a' : [1, 2, 3, 4, 5],\n",
        "    'b' : ['L', 'K', 'J', 'M', 'Z'],\n",
        "    'c' : np.random.normal(0, 1, 5)\n",
        "}\n",
        "print (dict_data)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 47**"
      ],
      "metadata": {
        "id": "conFxo87-qLL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dicc = { 'first':['spl', 'hyt'],'second': [4,5,2,3],\n",
        "        'Third' : [np.random.normal(1,2,11)]}\n",
        "print(dicc)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VcoyIbiq-sz5",
        "outputId": "5c6b9ac2-b5ca-4b27-a5c8-176a9c65e243"
      },
      "execution_count": 225,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'first': ['spl', 'hyt'], 'second': [4, 5, 2, 3], 'Third': [array([-1.18812975,  1.43770826,  0.83649407,  5.69356915,  0.94598743,\n",
            "        1.8001069 ,  2.10823629, -1.4537553 , -0.12332452,  4.19097378,\n",
            "        4.05431688])]}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kktroM8yHs0i"
      },
      "source": [
        "Each `DataFrame` has a few key attributes that we need to keep in mind. The first of these is the index attribute. We can easily include an index of `Timestamp` objects like we did with `Series`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 251,
      "metadata": {
        "id": "tVHd7ThAHs0i",
        "scrolled": false,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8280cc21-4588-493c-e16e-8114826705fd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "            a  b         c\n",
            "2016-01-01  1  L  0.446137\n",
            "2016-01-02  2  K -2.035643\n",
            "2016-01-03  3  J -1.470249\n",
            "2016-01-04  4  M -0.376665\n",
            "2016-01-05  5  Z -0.922968\n"
          ]
        }
      ],
      "source": [
        "frame_data = pd.DataFrame(dict_data, index=pd.date_range('2016-01-01', periods=5))\n",
        "print (frame_data)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KDrZ1pMIHs0i"
      },
      "source": [
        "As mentioned above, we can combine `Series` into `DataFrames`. Concatatenating `Series` like this will match elements up based on their corresponding index. As the following `Series` do not have an index assigned, they each default to an integer index. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 227,
      "metadata": {
        "id": "p6-7NC0zHs0i",
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "010e4833-23ba-4761-9327-c8f24da27f0d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Evens  Odds\n",
            "0      2     1\n",
            "1      4     3\n",
            "2      6     5\n",
            "3      8     7\n",
            "4     10     9\n"
          ]
        }
      ],
      "source": [
        "s_1 = pd.Series([2, 4, 6, 8, 10], name='Evens')\n",
        "s_2 = pd.Series([1, 3, 5, 7, 9], name=\"Odds\")\n",
        "numbers = pd.concat([s_1, s_2], axis=1)\n",
        "print (numbers)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 48**"
      ],
      "metadata": {
        "id": "O2eCABRm_X1U"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "z_1 = pd.Series([6,11,15,29], name=\"Multi5\")\n",
        "z_2 = pd.Series([5,9,12,22], name=\"Multi3\")\n",
        "nums = pd.concat([z_1,z_2],axis=1)\n",
        "print(nums)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tegIcDo-_als",
        "outputId": "92b64965-779f-4080-a43b-95083711a5f5"
      },
      "execution_count": 228,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Multi5  Multi3\n",
            "0       6       5\n",
            "1      11       9\n",
            "2      15      12\n",
            "3      29      22\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3iVyJyqIHs0i"
      },
      "source": [
        "We will use `pandas.concat()` again later to combine multiple `DataFrame`s into one. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5msiDgjXHs0j"
      },
      "source": [
        "Each `DataFrame` also has a `columns` attribute. These can either be assigned when we call `pandas.DataFrame` or they can be modified directly like the index. Note that when we concatenated the two `Series` above, the column names were the names of those `Series`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 229,
      "metadata": {
        "id": "rbcZcKYWHs0j",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4d6226b6-c5b6-4e04-8a6a-1e9de820efb9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['Evens', 'Odds'], dtype='object')\n"
          ]
        }
      ],
      "source": [
        "print (numbers.columns)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 49**"
      ],
      "metadata": {
        "id": "2C-JS3Kl_zIX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print (nums.columns)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qQ-OJm1c_1hm",
        "outputId": "f5cdd316-8490-4e11-c2f0-58fadd1e757e"
      },
      "execution_count": 230,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['Multi5', 'Multi3'], dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c4_tCdjvHs0j"
      },
      "source": [
        "To modify the columns after object creation, we need only do the following:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 231,
      "metadata": {
        "id": "6lNwCkN3Hs0j",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4cf3fca3-b128-4d53-e633-dc35e474bbb4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Shmevens  Shmodds\n",
            "0         2        1\n",
            "1         4        3\n",
            "2         6        5\n",
            "3         8        7\n",
            "4        10        9\n"
          ]
        }
      ],
      "source": [
        "numbers.columns = ['Shmevens', 'Shmodds']\n",
        "print (numbers)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 50**"
      ],
      "metadata": {
        "id": "Jmu2v6Fj_7L3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "nums.columns = ['Multiplos5', 'Multiplos3']\n",
        "print(nums)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LokNI7XG_9_Y",
        "outputId": "14168849-2194-44f0-c85c-936b1c95bedf"
      },
      "execution_count": 232,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Multiplos5  Multiplos3\n",
            "0           6           5\n",
            "1          11           9\n",
            "2          15          12\n",
            "3          29          22\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CVIF5FP_Hs0j"
      },
      "source": [
        "In the same vein, the index of a `DataFrame` can be changed after the fact."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 233,
      "metadata": {
        "id": "yzFh0li5Hs0j",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c82ebf47-1b24-48a1-8fe8-bc530f3d5591"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RangeIndex(start=0, stop=5, step=1)\n"
          ]
        }
      ],
      "source": [
        "print (numbers.index)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 51**"
      ],
      "metadata": {
        "id": "_ymvURpDALd9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print (nums.index)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sT7uIf-tANrI",
        "outputId": "dbcdffa8-7bcb-46ac-8819-d15931e1db60"
      },
      "execution_count": 234,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RangeIndex(start=0, stop=4, step=1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 235,
      "metadata": {
        "id": "CGIX_93JHs0j",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2b857d11-0e9d-4195-ec10-abdf40279ed3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "            Shmevens  Shmodds\n",
            "2016-01-01         2        1\n",
            "2016-01-02         4        3\n",
            "2016-01-03         6        5\n",
            "2016-01-04         8        7\n",
            "2016-01-05        10        9\n"
          ]
        }
      ],
      "source": [
        "numbers.index = pd.date_range(\"2016-01-01\", periods=len(numbers))\n",
        "print(numbers)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "os0OOYc4Hs0k"
      },
      "source": [
        "Separate from the columns and index of a `DataFrame`, we can also directly access the values they contain by looking at the values attribute."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 236,
      "metadata": {
        "id": "prg3Sly7Hs0k",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "33ac882f-c95c-4474-8da1-ccbabbeb6373"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 2,  1],\n",
              "       [ 4,  3],\n",
              "       [ 6,  5],\n",
              "       [ 8,  7],\n",
              "       [10,  9]])"
            ]
          },
          "metadata": {},
          "execution_count": 236
        }
      ],
      "source": [
        "numbers.values"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 52**"
      ],
      "metadata": {
        "id": "JJ5KygU0A6AX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "nums.values"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T--itJGuA8Mm",
        "outputId": "ad261dd2-4be6-4ea4-b95c-e689ee6902b8"
      },
      "execution_count": 237,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 6,  5],\n",
              "       [11,  9],\n",
              "       [15, 12],\n",
              "       [29, 22]])"
            ]
          },
          "metadata": {},
          "execution_count": 237
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bziTLOGzHs0k"
      },
      "source": [
        "This returns a NumPy array."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 238,
      "metadata": {
        "id": "-Zll90I7Hs0k",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c12927ca-2025-4834-b425-ef4ac6bc2c48"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "numpy.ndarray"
            ]
          },
          "metadata": {},
          "execution_count": 238
        }
      ],
      "source": [
        "type(numbers.values)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 53**"
      ],
      "metadata": {
        "id": "VlrcHm6zBELo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "type(nums.values)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lLQgtySxBGy6",
        "outputId": "fb683775-d647-4898-de74-93b465be6b7e"
      },
      "execution_count": 239,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "numpy.ndarray"
            ]
          },
          "metadata": {},
          "execution_count": 239
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HgsAN_5NHs0k"
      },
      "source": [
        "#### Accessing `DataFrame` elements\n",
        "\n",
        "Again we see a lot of carryover from `Series` in how we access the elements of `DataFrames`. The key sticking point here is that everything has to take into account multiple dimensions now. The main way that this happens is through the access of the columns of a `DataFrame`, either individually or in groups. We can do this either by directly accessing the attributes or by using the methods we already are familiar with."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 250,
      "metadata": {
        "id": "Q8T9kckaHs0k",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 239
        },
        "outputId": "b33ebd81-4624-42dd-fecc-3ce119582154"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-250-b3304e5b10e1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mstart\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"2012-01-01\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mend\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"2016-01-01\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mprices\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_pricing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msymbol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart_date\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstart\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend_date\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfields\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"price\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msymbol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msymbol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'get_pricing' is not defined"
          ]
        }
      ],
      "source": [
        "symbol = [\"CMG\", \"MCD\", \"SHAK\", \"WFM\"]\n",
        "start = \"2012-01-01\"\n",
        "end = \"2016-01-01\"\n",
        "prices = get_pricing(symbol, start_date=start, end_date=end, fields=\"price\")\n",
        "if isinstance(symbol, list):\n",
        "    prices.columns = map(lambda x: x.symbol, prices.columns)\n",
        "else:\n",
        "    prices.name = symbol"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uuzOJpOJHs0k"
      },
      "source": [
        "Here we directly access the `CMG` column. Note that this style of access will only work if your column name has no spaces or unfriendly characters in it."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 245,
      "metadata": {
        "id": "AvyDTWfyHs0l",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 168
        },
        "outputId": "4299b079-9fe1-47e4-eeb9-6747a0504795"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-245-55683917cb49>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mCMG\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'prices' is not defined"
          ]
        }
      ],
      "source": [
        "prices.CMG.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "khpjjcjFHs0l"
      },
      "source": [
        "We can also use `loc[]` to access an individual column like so."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 244,
      "metadata": {
        "id": "9034XgnaHs0l",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 168
        },
        "outputId": "f19a36b8-6b9f-4739-c1f8-173f39c6708c"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-244-be0af500b969>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'CMG'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'prices' is not defined"
          ]
        }
      ],
      "source": [
        "prices.loc[:, 'CMG'].head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c7HNHAynHs0l"
      },
      "source": [
        "Accessing an individual column will return a `Series`, regardless of how we get it."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0_ForNbbHs0l"
      },
      "outputs": [],
      "source": [
        "print type(prices.CMG)\n",
        "print type(prices.loc[:, 'CMG'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d5Y5C5TcHs0l"
      },
      "source": [
        "Notice how we pass a tuple into the `loc[]` method? This is a key difference between accessing a `Series` and accessing a `DataFrame`, grounded in the fact that a `DataFrame` has multiple dimensions. When you pass a 2-dimensional tuple into a `DataFrame`, the first element of the tuple is applied to the rows and the second is applied to the columns. So, to break it down, the above line of code tells the `DataFrame` to return every single row of the column with label `'CMG'`. Lists of columns are also supported."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 288,
      "metadata": {
        "id": "rLqyEloXHs0l",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "outputId": "c7efd1cd-5688-4d38-8d94-a6e671a8e507"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-288-d7d11f366d68>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'CMG'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'MCD'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    923\u001b[0m                 \u001b[0;32mwith\u001b[0m \u001b[0msuppress\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mKeyError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    924\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtakeable\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_takeable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 925\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    926\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    927\u001b[0m             \u001b[0;31m# we by definition only have the 0th axis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m   1107\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_multi_take\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1108\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1109\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_tuple_same_dim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1110\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1111\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_label\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple_same_dim\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m    804\u001b[0m                 \u001b[0;32mcontinue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    805\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 806\u001b[0;31m             \u001b[0mretval\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mretval\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    807\u001b[0m             \u001b[0;31m# We should never have retval.ndim < self.ndim, as that should\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    808\u001b[0m             \u001b[0;31m#  be handled by the _getitem_lowerdim call above.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1151\u001b[0m                     \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Cannot index with multidimensional key\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1152\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1153\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_iterable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1154\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1155\u001b[0m             \u001b[0;31m# nested tuple slicing\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_iterable\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1091\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1092\u001b[0m         \u001b[0;31m# A collection of keys\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1093\u001b[0;31m         \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_listlike_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1094\u001b[0m         return self.obj._reindex_with_indexers(\n\u001b[1;32m   1095\u001b[0m             \u001b[0;34m{\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_dups\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_get_listlike_indexer\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1312\u001b[0m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_indexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reindex_non_unique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1313\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1314\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_read_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1315\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1316\u001b[0m         if needs_i8_conversion(ax.dtype) or isinstance(\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_validate_read_indexer\u001b[0;34m(self, key, indexer, axis)\u001b[0m\n\u001b[1;32m   1372\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0muse_interval_msg\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1373\u001b[0m                     \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1374\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"None of [{key}] are in the [{axis_name}]\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1375\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1376\u001b[0m             \u001b[0mnot_found\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmissing_mask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnonzero\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: \"None of [Index(['CMG', 'MCD'], dtype='object')] are in the [columns]\""
          ]
        }
      ],
      "source": [
        "prices.loc[:, ['CMG', 'MCD']].head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bQxH7a0DHs0m"
      },
      "source": [
        "We can also simply access the `DataFrame` by index value using `loc[]`, as with `Series`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 242,
      "metadata": {
        "id": "2J9wVG0rHs0m",
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 168
        },
        "outputId": "cddb7074-cabb-4a4e-c024-995b114a96d4"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-242-d753083cd24c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'2015-12-15'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m'2015-12-22'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'prices' is not defined"
          ]
        }
      ],
      "source": [
        "prices.loc['2015-12-15':'2015-12-22']"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 54**"
      ],
      "metadata": {
        "id": "2beUB5tHEqww"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "prices.loc['2014-11-04':'2015-05-23']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 49
        },
        "id": "A9Zh7kVbEvKw",
        "outputId": "4599bc07-9734-4179-b0da-b6f47bdb6706"
      },
      "execution_count": 289,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d23aad3a-3e49-4cd0-8e14-f4372fcbc33d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d23aad3a-3e49-4cd0-8e14-f4372fcbc33d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d23aad3a-3e49-4cd0-8e14-f4372fcbc33d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d23aad3a-3e49-4cd0-8e14-f4372fcbc33d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 289
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AMQNkBASHs0m"
      },
      "source": [
        "This plays nicely with lists of columns, too."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 290,
      "metadata": {
        "id": "vzsYlgPPHs0m",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "outputId": "cf1577ae-256b-49d5-beb4-d8d5f46fccde"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-290-22ad0d39949a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'2015-12-15'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m'2015-12-22'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'CMG'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'MCD'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    923\u001b[0m                 \u001b[0;32mwith\u001b[0m \u001b[0msuppress\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mKeyError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    924\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtakeable\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_takeable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 925\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    926\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    927\u001b[0m             \u001b[0;31m# we by definition only have the 0th axis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m   1107\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_multi_take\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1108\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1109\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_tuple_same_dim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1110\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1111\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_label\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple_same_dim\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m    804\u001b[0m                 \u001b[0;32mcontinue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    805\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 806\u001b[0;31m             \u001b[0mretval\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mretval\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    807\u001b[0m             \u001b[0;31m# We should never have retval.ndim < self.ndim, as that should\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    808\u001b[0m             \u001b[0;31m#  be handled by the _getitem_lowerdim call above.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1151\u001b[0m                     \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Cannot index with multidimensional key\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1152\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1153\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_iterable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1154\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1155\u001b[0m             \u001b[0;31m# nested tuple slicing\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_iterable\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1091\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1092\u001b[0m         \u001b[0;31m# A collection of keys\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1093\u001b[0;31m         \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_listlike_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1094\u001b[0m         return self.obj._reindex_with_indexers(\n\u001b[1;32m   1095\u001b[0m             \u001b[0;34m{\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_dups\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_get_listlike_indexer\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1312\u001b[0m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_indexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reindex_non_unique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1313\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1314\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_read_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1315\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1316\u001b[0m         if needs_i8_conversion(ax.dtype) or isinstance(\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_validate_read_indexer\u001b[0;34m(self, key, indexer, axis)\u001b[0m\n\u001b[1;32m   1372\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0muse_interval_msg\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1373\u001b[0m                     \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1374\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"None of [{key}] are in the [{axis_name}]\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1375\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1376\u001b[0m             \u001b[0mnot_found\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmissing_mask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnonzero\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: \"None of [Index(['CMG', 'MCD'], dtype='object')] are in the [columns]\""
          ]
        }
      ],
      "source": [
        "prices.loc['2015-12-15':'2015-12-22', ['CMG', 'MCD']]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4-mnRagtHs0m"
      },
      "source": [
        "Using `iloc[]` also works similarly, allowing you to access parts of the `DataFrame` by integer index."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sf0WnFiGHs0m"
      },
      "outputs": [],
      "source": [
        "prices.iloc[0:2, 1]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Jwy36iNrHs0m"
      },
      "outputs": [],
      "source": [
        "# Access prices with integer index in\n",
        "# [1, 3, 5, 7, 9, 11, 13, ..., 99]\n",
        "# and in column 0 or 3\n",
        "prices.iloc[[1, 3, 5] + range(7, 100, 2), [0, 3]].head(20)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "89BdBTxcHs0n"
      },
      "source": [
        "#### Boolean indexing\n",
        "\n",
        "As with `Series`, sometimes we want to filter a `DataFrame` according to a set of criteria. We do this by indexing our `DataFrame` with boolean values."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oXh0YR2yHs0n",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 287
        },
        "outputId": "37e3ccbc-47ea-456d-a325-4590208d8185"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-130-3839cc402a02>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMCD\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mWFM\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5485\u001b[0m         ):\n\u001b[1;32m   5486\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5487\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5488\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5489\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'MCD'"
          ]
        }
      ],
      "source": [
        "prices.loc[prices.MCD > prices.WFM].head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eQ9LUmWEHs0n"
      },
      "source": [
        "We can add multiple boolean conditions by using the logical operators `&`, `|`, and `~` (and, or, and not, respectively) again!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "G44UKdRsHs0n",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 287
        },
        "outputId": "f71a46b8-e8d8-4e7c-81ef-02580d18e4fd"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-154-343a79d6cef7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMCD\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mWFM\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m&\u001b[0m \u001b[0;34m~\u001b[0m\u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSHAK\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misnull\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5485\u001b[0m         ):\n\u001b[1;32m   5486\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5487\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5488\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5489\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'MCD'"
          ]
        }
      ],
      "source": [
        "prices.loc[(prices.MCD > prices.WFM) & ~prices.SHAK.isnull()].head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "poylQIvNHs0n"
      },
      "source": [
        "#### Adding, Removing Columns, Combining `DataFrames`/`Series`\n",
        "\n",
        "It is all well and good when you already have a `DataFrame` filled with data, but it is also important to be able to add to the data that you have.\n",
        "\n",
        "We add a new column simply by assigning data to a column that does not already exist. Here we use the `.loc[:, 'COL_NAME']` notation and store the output of `get_pricing()` (which returns a pandas `Series` if we only pass one security) there. This is the method that we would use to add a `Series` to an existing `DataFrame`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gya8_uEWHs0n",
        "scrolled": true
      },
      "outputs": [],
      "source": [
        "s_1 = get_pricing('TSLA', start_date=start, end_date=end, fields='price')\n",
        "prices.loc[:, 'TSLA'] = s_1\n",
        "prices.head(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ibJe2YopHs0o"
      },
      "source": [
        "It is also just as easy to remove a column."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "v2uMoonGHs0o",
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 328
        },
        "outputId": "b351bed4-ee9f-4075-956b-83b2d85ac001"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-153-af14d7abb2de>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprices\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'TSLA'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    309\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstacklevel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    310\u001b[0m                 )\n\u001b[0;32m--> 311\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    312\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    313\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4911\u001b[0m             \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4912\u001b[0m             \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minplace\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4913\u001b[0;31m             \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4914\u001b[0m         )\n\u001b[1;32m   4915\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4148\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32min\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4149\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4150\u001b[0;31m                 \u001b[0mobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_drop_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4151\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4152\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_drop_axis\u001b[0;34m(self, labels, axis, level, errors)\u001b[0m\n\u001b[1;32m   4183\u001b[0m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4184\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4185\u001b[0;31m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4186\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0maxis_name\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mnew_axis\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4187\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   6015\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6016\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0merrors\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6017\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{labels[mask]} not found in axis\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6018\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m~\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6019\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdelete\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: \"['TSLA'] not found in axis\""
          ]
        }
      ],
      "source": [
        "prices = prices.drop('TSLA', axis=1)\n",
        "prices.head(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SahgMT2WHs0o"
      },
      "source": [
        "If we instead want to combine multiple `DataFrame`s into one, we use the `pandas.concat()` method."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GM_dP7CcHs0o",
        "scrolled": false
      },
      "outputs": [],
      "source": [
        "df_1 = get_pricing(['SPY', 'VXX'], start_date=start, end_date=end, fields='price')\n",
        "df_2 = get_pricing(['MSFT', 'AAPL', 'GOOG'], start_date=start, end_date=end, fields='price')\n",
        "df_3 = pd.concat([df_1, df_2], axis=1)\n",
        "df_3.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cJt3RHYHHs0o"
      },
      "source": [
        "#### Missing data (again)\n",
        "Bringing real-life data into a `DataFrame` brings us the same problems that we had with it in a `Series`, only this time in more dimensions. We have access to the same methods as with `Series`, as demonstrated below."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "T4nUAlE8Hs0o"
      },
      "outputs": [],
      "source": [
        "filled0_prices = prices.fillna(0)\n",
        "filled0_prices.head(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fyXfhaAaHs0o"
      },
      "outputs": [],
      "source": [
        "bfilled_prices = prices.fillna(method='bfill')\n",
        "bfilled_prices.head(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QRf4CT5BHs0p"
      },
      "source": [
        "But again, the best choice in this case (since we are still using time series data, handling multiple time series at once) is still to simply drop the missing values."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "h4SxAtSoHs0p"
      },
      "outputs": [],
      "source": [
        "dropped_prices = prices.dropna()\n",
        "dropped_prices.head(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Te_MYHtfHs0p"
      },
      "source": [
        "#### Time Series Analysis with pandas\n",
        "\n",
        "Using the built-in statistics methods for `DataFrames`, we can perform calculations on multiple time series at once! The code to perform calculations on `DataFrames` here is almost exactly the same as the methods used for `Series` above, so don't worry about re-learning everything.\n",
        "\n",
        "The `plot()` method makes another appearance here, this time with a built-in legend that corresponds to the names of the columns that you are plotting."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hJqSI7GjHs0p",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        },
        "outputId": "d5af03e4-df9d-43c1-e784-c39123933a84"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "prices.plot()\n",
        "plt.title(\"Collected Stock Prices\")\n",
        "plt.ylabel(\"Price\")\n",
        "plt.xlabel(\"Date\");"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4MAaLXvVHs0p"
      },
      "source": [
        "The same statistical functions from our interactions with `Series` resurface here with the addition of the `axis` parameter. By specifying the `axis`, we tell pandas to calculate the desired function along either the rows (`axis=0`) or the columns (`axis=1`). We can easily calculate the mean of each columns like so:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 292,
      "metadata": {
        "id": "QAdJ90MHHs0p",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "df0a0b8e-a891-4bd3-930a-f01fd8248839"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    0.938571\n",
              "1    1.172524\n",
              "2    1.062756\n",
              "3    1.170982\n",
              "4    0.743575\n",
              "5    1.029538\n",
              "6    1.145781\n",
              "7    1.166411\n",
              "8    0.985494\n",
              "9    0.821122\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 292
        }
      ],
      "source": [
        "prices.mean(axis=0)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 55**"
      ],
      "metadata": {
        "id": "u8g-qAgMCRaE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "prices.mean(axis=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ssolF6n1CKh4",
        "outputId": "ee7a55c7-b1bb-437e-9991-cb79488d43a2"
      },
      "execution_count": 291,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0     0.987472\n",
              "1     0.984685\n",
              "2     0.987375\n",
              "3     0.994692\n",
              "4     1.003147\n",
              "        ...   \n",
              "95    1.058699\n",
              "96    1.058535\n",
              "97    1.071346\n",
              "98    1.069459\n",
              "99    1.096828\n",
              "Length: 100, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 291
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0Twr6OzmHs0p"
      },
      "source": [
        "As well as the standard deviation:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 293,
      "metadata": {
        "id": "ort6pr9iHs0p",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bec179f5-9ae4-40ff-9535-ac2e9383424e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    0.065315\n",
              "1    0.155142\n",
              "2    0.067502\n",
              "3    0.095086\n",
              "4    0.217172\n",
              "5    0.096626\n",
              "6    0.127799\n",
              "7    0.216308\n",
              "8    0.117552\n",
              "9    0.207297\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 293
        }
      ],
      "source": [
        "prices.std(axis=0)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 56**"
      ],
      "metadata": {
        "id": "CFVwQ0UCCYQ2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "prices.std(axis=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s0NqzH5MCaWf",
        "outputId": "e86f5259-c5ef-4205-e756-39971c91e148"
      },
      "execution_count": 294,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0     0.035889\n",
              "1     0.055461\n",
              "2     0.057504\n",
              "3     0.075097\n",
              "4     0.083612\n",
              "        ...   \n",
              "95    0.320644\n",
              "96    0.316923\n",
              "97    0.325246\n",
              "98    0.323887\n",
              "99    0.336049\n",
              "Length: 100, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 294
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WeY_9J02Hs0q"
      },
      "source": [
        "Again, the `describe()` function will provide us with summary statistics of our data if we would rather have all of our typical statistics in a convenient visual instead of calculating them individually."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 295,
      "metadata": {
        "id": "AaPnbjroHs0q",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "outputId": "caa55ac8-577b-4e54-ab97-e596ce1fc153"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                0           1           2           3           4           5  \\\n",
              "count  100.000000  100.000000  100.000000  100.000000  100.000000  100.000000   \n",
              "mean     0.938571    1.172524    1.062756    1.170982    0.743575    1.029538   \n",
              "std      0.065315    0.155142    0.067502    0.095086    0.217172    0.096626   \n",
              "min      0.793214    0.861811    0.912995    0.935932    0.434508    0.795076   \n",
              "25%      0.890534    1.009119    1.009484    1.102947    0.567399    0.981301   \n",
              "50%      0.955350    1.203104    1.063192    1.183725    0.698014    1.023438   \n",
              "75%      0.984214    1.280362    1.117747    1.234743    0.914641    1.108551   \n",
              "max      1.060654    1.413161    1.218820    1.338120    1.167553    1.273357   \n",
              "\n",
              "                6           7           8           9  \n",
              "count  100.000000  100.000000  100.000000  100.000000  \n",
              "mean     1.145781    1.166411    0.985494    0.821122  \n",
              "std      0.127799    0.216308    0.117552    0.207297  \n",
              "min      0.948310    0.856713    0.801638    0.523328  \n",
              "25%      1.052018    0.960366    0.907099    0.582543  \n",
              "50%      1.102735    1.149424    0.961278    0.839801  \n",
              "75%      1.225102    1.315414    1.045306    1.009863  \n",
              "max      1.426389    1.595027    1.331245    1.125829  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4963fbaa-ac47-405f-a44b-72bde27bc6cb\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>100.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>100.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.938571</td>\n",
              "      <td>1.172524</td>\n",
              "      <td>1.062756</td>\n",
              "      <td>1.170982</td>\n",
              "      <td>0.743575</td>\n",
              "      <td>1.029538</td>\n",
              "      <td>1.145781</td>\n",
              "      <td>1.166411</td>\n",
              "      <td>0.985494</td>\n",
              "      <td>0.821122</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.065315</td>\n",
              "      <td>0.155142</td>\n",
              "      <td>0.067502</td>\n",
              "      <td>0.095086</td>\n",
              "      <td>0.217172</td>\n",
              "      <td>0.096626</td>\n",
              "      <td>0.127799</td>\n",
              "      <td>0.216308</td>\n",
              "      <td>0.117552</td>\n",
              "      <td>0.207297</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.793214</td>\n",
              "      <td>0.861811</td>\n",
              "      <td>0.912995</td>\n",
              "      <td>0.935932</td>\n",
              "      <td>0.434508</td>\n",
              "      <td>0.795076</td>\n",
              "      <td>0.948310</td>\n",
              "      <td>0.856713</td>\n",
              "      <td>0.801638</td>\n",
              "      <td>0.523328</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.890534</td>\n",
              "      <td>1.009119</td>\n",
              "      <td>1.009484</td>\n",
              "      <td>1.102947</td>\n",
              "      <td>0.567399</td>\n",
              "      <td>0.981301</td>\n",
              "      <td>1.052018</td>\n",
              "      <td>0.960366</td>\n",
              "      <td>0.907099</td>\n",
              "      <td>0.582543</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.955350</td>\n",
              "      <td>1.203104</td>\n",
              "      <td>1.063192</td>\n",
              "      <td>1.183725</td>\n",
              "      <td>0.698014</td>\n",
              "      <td>1.023438</td>\n",
              "      <td>1.102735</td>\n",
              "      <td>1.149424</td>\n",
              "      <td>0.961278</td>\n",
              "      <td>0.839801</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>0.984214</td>\n",
              "      <td>1.280362</td>\n",
              "      <td>1.117747</td>\n",
              "      <td>1.234743</td>\n",
              "      <td>0.914641</td>\n",
              "      <td>1.108551</td>\n",
              "      <td>1.225102</td>\n",
              "      <td>1.315414</td>\n",
              "      <td>1.045306</td>\n",
              "      <td>1.009863</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.060654</td>\n",
              "      <td>1.413161</td>\n",
              "      <td>1.218820</td>\n",
              "      <td>1.338120</td>\n",
              "      <td>1.167553</td>\n",
              "      <td>1.273357</td>\n",
              "      <td>1.426389</td>\n",
              "      <td>1.595027</td>\n",
              "      <td>1.331245</td>\n",
              "      <td>1.125829</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4963fbaa-ac47-405f-a44b-72bde27bc6cb')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4963fbaa-ac47-405f-a44b-72bde27bc6cb button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4963fbaa-ac47-405f-a44b-72bde27bc6cb');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 295
        }
      ],
      "source": [
        "prices.describe()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M7xiJm0VHs0q"
      },
      "source": [
        "We can scale and add scalars to our `DataFrame`, as you might suspect after dealing with `Series`. This again works element-wise."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 296,
      "metadata": {
        "id": "x1xRyuAvHs0q",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "fbd777b4-1137-492c-d4b6-f46305bc90c5"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           0          1          2          3          4          5  \\\n",
              "0 -47.943929 -48.138016 -48.052929 -48.079134 -47.994116 -47.895558   \n",
              "1 -48.069248 -48.256218 -48.009427 -48.110352 -47.923809 -47.916073   \n",
              "2 -48.176257 -48.188825 -47.972351 -48.128136 -47.981885 -47.952966   \n",
              "3 -48.174155 -48.276379 -47.892144 -48.062295 -47.857602 -48.021621   \n",
              "4 -48.218676 -48.238279 -47.986044 -47.954705 -47.790582 -48.025002   \n",
              "\n",
              "           6          7          8          9  \n",
              "0 -48.083744 -48.004201 -48.058452 -48.000476  \n",
              "1 -48.103379 -48.060330 -47.922837 -47.934618  \n",
              "2 -48.021521 -48.078554 -47.847816 -47.904186  \n",
              "3 -47.937139 -48.142487 -47.827989 -47.914349  \n",
              "4 -47.860787 -48.140851 -47.754010 -47.968117  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1aee24e3-f771-4f83-83ed-ed75718c0552\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-47.943929</td>\n",
              "      <td>-48.138016</td>\n",
              "      <td>-48.052929</td>\n",
              "      <td>-48.079134</td>\n",
              "      <td>-47.994116</td>\n",
              "      <td>-47.895558</td>\n",
              "      <td>-48.083744</td>\n",
              "      <td>-48.004201</td>\n",
              "      <td>-48.058452</td>\n",
              "      <td>-48.000476</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-48.069248</td>\n",
              "      <td>-48.256218</td>\n",
              "      <td>-48.009427</td>\n",
              "      <td>-48.110352</td>\n",
              "      <td>-47.923809</td>\n",
              "      <td>-47.916073</td>\n",
              "      <td>-48.103379</td>\n",
              "      <td>-48.060330</td>\n",
              "      <td>-47.922837</td>\n",
              "      <td>-47.934618</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-48.176257</td>\n",
              "      <td>-48.188825</td>\n",
              "      <td>-47.972351</td>\n",
              "      <td>-48.128136</td>\n",
              "      <td>-47.981885</td>\n",
              "      <td>-47.952966</td>\n",
              "      <td>-48.021521</td>\n",
              "      <td>-48.078554</td>\n",
              "      <td>-47.847816</td>\n",
              "      <td>-47.904186</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-48.174155</td>\n",
              "      <td>-48.276379</td>\n",
              "      <td>-47.892144</td>\n",
              "      <td>-48.062295</td>\n",
              "      <td>-47.857602</td>\n",
              "      <td>-48.021621</td>\n",
              "      <td>-47.937139</td>\n",
              "      <td>-48.142487</td>\n",
              "      <td>-47.827989</td>\n",
              "      <td>-47.914349</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-48.218676</td>\n",
              "      <td>-48.238279</td>\n",
              "      <td>-47.986044</td>\n",
              "      <td>-47.954705</td>\n",
              "      <td>-47.790582</td>\n",
              "      <td>-48.025002</td>\n",
              "      <td>-47.860787</td>\n",
              "      <td>-48.140851</td>\n",
              "      <td>-47.754010</td>\n",
              "      <td>-47.968117</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1aee24e3-f771-4f83-83ed-ed75718c0552')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1aee24e3-f771-4f83-83ed-ed75718c0552 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1aee24e3-f771-4f83-83ed-ed75718c0552');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 296
        }
      ],
      "source": [
        "(2 * prices - 50).head(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7Pi07nxlHs0q"
      },
      "source": [
        "Here we use the `pct_change()` method to get a `DataFrame` of the multiplicative returns of the securities that we are looking at."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 297,
      "metadata": {
        "id": "2u5eatueHs0q",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "f425e58d-8a0a-41b2-8c17-3ba01ba1636e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          0         1         2         3         4         5         6  \\\n",
              "1 -0.060951 -0.063482  0.022342 -0.016252  0.035051 -0.009748 -0.010247   \n",
              "2 -0.055423  0.038648  0.018626 -0.009411 -0.027972 -0.017704  0.043160   \n",
              "3  0.001152 -0.048341  0.039557  0.035174  0.061583 -0.033539  0.042650   \n",
              "4 -0.024384  0.022105 -0.044547  0.055525  0.031283 -0.001709  0.037013   \n",
              "5 -0.020135  0.018679 -0.026068  0.014988  0.035317  0.004260  0.014640   \n",
              "\n",
              "          7         8         9  \n",
              "1 -0.028124  0.069849  0.032937  \n",
              "2 -0.009395  0.036117  0.014734  \n",
              "3 -0.033273  0.009213 -0.004849  \n",
              "4  0.000881  0.034060 -0.025780  \n",
              "5  0.014362 -0.017675 -0.007094  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-35d4d9a7-d80d-4b5d-aa99-159e248afafc\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-0.060951</td>\n",
              "      <td>-0.063482</td>\n",
              "      <td>0.022342</td>\n",
              "      <td>-0.016252</td>\n",
              "      <td>0.035051</td>\n",
              "      <td>-0.009748</td>\n",
              "      <td>-0.010247</td>\n",
              "      <td>-0.028124</td>\n",
              "      <td>0.069849</td>\n",
              "      <td>0.032937</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.055423</td>\n",
              "      <td>0.038648</td>\n",
              "      <td>0.018626</td>\n",
              "      <td>-0.009411</td>\n",
              "      <td>-0.027972</td>\n",
              "      <td>-0.017704</td>\n",
              "      <td>0.043160</td>\n",
              "      <td>-0.009395</td>\n",
              "      <td>0.036117</td>\n",
              "      <td>0.014734</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.001152</td>\n",
              "      <td>-0.048341</td>\n",
              "      <td>0.039557</td>\n",
              "      <td>0.035174</td>\n",
              "      <td>0.061583</td>\n",
              "      <td>-0.033539</td>\n",
              "      <td>0.042650</td>\n",
              "      <td>-0.033273</td>\n",
              "      <td>0.009213</td>\n",
              "      <td>-0.004849</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-0.024384</td>\n",
              "      <td>0.022105</td>\n",
              "      <td>-0.044547</td>\n",
              "      <td>0.055525</td>\n",
              "      <td>0.031283</td>\n",
              "      <td>-0.001709</td>\n",
              "      <td>0.037013</td>\n",
              "      <td>0.000881</td>\n",
              "      <td>0.034060</td>\n",
              "      <td>-0.025780</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>-0.020135</td>\n",
              "      <td>0.018679</td>\n",
              "      <td>-0.026068</td>\n",
              "      <td>0.014988</td>\n",
              "      <td>0.035317</td>\n",
              "      <td>0.004260</td>\n",
              "      <td>0.014640</td>\n",
              "      <td>0.014362</td>\n",
              "      <td>-0.017675</td>\n",
              "      <td>-0.007094</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-35d4d9a7-d80d-4b5d-aa99-159e248afafc')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-35d4d9a7-d80d-4b5d-aa99-159e248afafc button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-35d4d9a7-d80d-4b5d-aa99-159e248afafc');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 297
        }
      ],
      "source": [
        "mult_returns = prices.pct_change()[1:]\n",
        "mult_returns.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 57**"
      ],
      "metadata": {
        "id": "X5wRfX5sCrxE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "returned = prices.pct_change()[2:]\n",
        "returned.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "WXql3iezCu8d",
        "outputId": "7b00727d-ff88-449c-cfdb-b66df4a7ea81"
      },
      "execution_count": 298,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          0         1         2         3         4         5         6  \\\n",
              "2 -0.055423  0.038648  0.018626 -0.009411 -0.027972 -0.017704  0.043160   \n",
              "3  0.001152 -0.048341  0.039557  0.035174  0.061583 -0.033539  0.042650   \n",
              "4 -0.024384  0.022105 -0.044547  0.055525  0.031283 -0.001709  0.037013   \n",
              "5 -0.020135  0.018679 -0.026068  0.014988  0.035317  0.004260  0.014640   \n",
              "6 -0.050682 -0.004973  0.060599  0.021753  0.016988 -0.035432 -0.028367   \n",
              "\n",
              "          7         8         9  \n",
              "2 -0.009395  0.036117  0.014734  \n",
              "3 -0.033273  0.009213 -0.004849  \n",
              "4  0.000881  0.034060 -0.025780  \n",
              "5  0.014362 -0.017675 -0.007094  \n",
              "6  0.038818 -0.014657  0.058254  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0f066595-978c-4c9b-b992-62666ff0052d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.055423</td>\n",
              "      <td>0.038648</td>\n",
              "      <td>0.018626</td>\n",
              "      <td>-0.009411</td>\n",
              "      <td>-0.027972</td>\n",
              "      <td>-0.017704</td>\n",
              "      <td>0.043160</td>\n",
              "      <td>-0.009395</td>\n",
              "      <td>0.036117</td>\n",
              "      <td>0.014734</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.001152</td>\n",
              "      <td>-0.048341</td>\n",
              "      <td>0.039557</td>\n",
              "      <td>0.035174</td>\n",
              "      <td>0.061583</td>\n",
              "      <td>-0.033539</td>\n",
              "      <td>0.042650</td>\n",
              "      <td>-0.033273</td>\n",
              "      <td>0.009213</td>\n",
              "      <td>-0.004849</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-0.024384</td>\n",
              "      <td>0.022105</td>\n",
              "      <td>-0.044547</td>\n",
              "      <td>0.055525</td>\n",
              "      <td>0.031283</td>\n",
              "      <td>-0.001709</td>\n",
              "      <td>0.037013</td>\n",
              "      <td>0.000881</td>\n",
              "      <td>0.034060</td>\n",
              "      <td>-0.025780</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>-0.020135</td>\n",
              "      <td>0.018679</td>\n",
              "      <td>-0.026068</td>\n",
              "      <td>0.014988</td>\n",
              "      <td>0.035317</td>\n",
              "      <td>0.004260</td>\n",
              "      <td>0.014640</td>\n",
              "      <td>0.014362</td>\n",
              "      <td>-0.017675</td>\n",
              "      <td>-0.007094</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>-0.050682</td>\n",
              "      <td>-0.004973</td>\n",
              "      <td>0.060599</td>\n",
              "      <td>0.021753</td>\n",
              "      <td>0.016988</td>\n",
              "      <td>-0.035432</td>\n",
              "      <td>-0.028367</td>\n",
              "      <td>0.038818</td>\n",
              "      <td>-0.014657</td>\n",
              "      <td>0.058254</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0f066595-978c-4c9b-b992-62666ff0052d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-0f066595-978c-4c9b-b992-62666ff0052d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-0f066595-978c-4c9b-b992-62666ff0052d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 298
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oRIom_V0Hs0r"
      },
      "source": [
        "If we use our statistics methods to standardize the returns, a common procedure when examining data, then we can get a better idea of how they all move relative to each other on the same scale."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 299,
      "metadata": {
        "id": "1T3SXWaxHs0r",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "41badaea-29ec-4785-be62-a7a31e2bbac0"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "norm_returns = (mult_returns - mult_returns.mean(axis=0))/mult_returns.std(axis=0)\n",
        "norm_returns.loc['2014-01-01':'2015-01-01'].plot();"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 58**"
      ],
      "metadata": {
        "id": "9Octo24HDCee"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "normreturned = (returned - returned.mean(axis=0))/returned.std(axis=0)\n",
        "normreturned.loc['2013-01-01':'2014-01-01'].plot();"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "NFsi6GxYDE6z",
        "outputId": "5ed28444-8f24-4c35-d372-f90fb3f1efe2"
      },
      "execution_count": 300,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kCrnn1CtHs0r"
      },
      "source": [
        "This makes it easier to compare the motion of the different time series contained in our example."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "A3AKKGMNHs0r"
      },
      "source": [
        "Rolling means and standard deviations also work with `DataFrames`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 301,
      "metadata": {
        "collapsed": true,
        "id": "EjIDAp4nHs0r",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 310
        },
        "outputId": "e822ae13-f3a1-4c5e-e106-d84591a8b8d0"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-301-aa0a0775c2d9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mrolling_mean\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrolling_mean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprices\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m30\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mrolling_mean\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/__init__.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(name)\u001b[0m\n\u001b[1;32m    242\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0m_SparseArray\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    243\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 244\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"module 'pandas' has no attribute '{name}'\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    245\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    246\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: module 'pandas' has no attribute 'rolling_mean'"
          ]
        }
      ],
      "source": [
        "rolling_mean = pd.rolling_mean(prices, 30)\n",
        "rolling_mean.columns = prices.columns"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Correction Pandas change version\n",
        "rolling_mean = prices.rolling(10).mean()\n",
        "rolling_mean.columns = prices.columns\n",
        "rolling_mean\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "n7zslpNyRLXv",
        "outputId": "7388298f-e231-49c0-aaf6-b53acd4465d2"
      },
      "execution_count": 302,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           0         1         2         3         4         5         6  \\\n",
              "0        NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
              "1        NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
              "2        NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
              "3        NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
              "4        NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
              "..       ...       ...       ...       ...       ...       ...       ...   \n",
              "95  0.949038  1.269839  1.073985  1.170606  0.459442  1.137861  1.385874   \n",
              "96  0.957690  1.261471  1.074448  1.185618  0.459098  1.145991  1.380227   \n",
              "97  0.961095  1.262972  1.073421  1.195999  0.458054  1.159484  1.375872   \n",
              "98  0.959358  1.271918  1.072511  1.206279  0.457327  1.169091  1.374825   \n",
              "99  0.969397  1.285913  1.081406  1.220621  0.455344  1.180079  1.363178   \n",
              "\n",
              "           7         8         9  \n",
              "0        NaN       NaN       NaN  \n",
              "1        NaN       NaN       NaN  \n",
              "2        NaN       NaN       NaN  \n",
              "3        NaN       NaN       NaN  \n",
              "4        NaN       NaN       NaN  \n",
              "..       ...       ...       ...  \n",
              "95  1.122924  1.157557  0.567610  \n",
              "96  1.128636  1.181924  0.562486  \n",
              "97  1.142227  1.201718  0.561066  \n",
              "98  1.158937  1.228000  0.559584  \n",
              "99  1.177862  1.249182  0.554122  \n",
              "\n",
              "[100 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-99a84bbb-3921-44cd-9b2d-a5e087df83cb\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>0.949038</td>\n",
              "      <td>1.269839</td>\n",
              "      <td>1.073985</td>\n",
              "      <td>1.170606</td>\n",
              "      <td>0.459442</td>\n",
              "      <td>1.137861</td>\n",
              "      <td>1.385874</td>\n",
              "      <td>1.122924</td>\n",
              "      <td>1.157557</td>\n",
              "      <td>0.567610</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>0.957690</td>\n",
              "      <td>1.261471</td>\n",
              "      <td>1.074448</td>\n",
              "      <td>1.185618</td>\n",
              "      <td>0.459098</td>\n",
              "      <td>1.145991</td>\n",
              "      <td>1.380227</td>\n",
              "      <td>1.128636</td>\n",
              "      <td>1.181924</td>\n",
              "      <td>0.562486</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>0.961095</td>\n",
              "      <td>1.262972</td>\n",
              "      <td>1.073421</td>\n",
              "      <td>1.195999</td>\n",
              "      <td>0.458054</td>\n",
              "      <td>1.159484</td>\n",
              "      <td>1.375872</td>\n",
              "      <td>1.142227</td>\n",
              "      <td>1.201718</td>\n",
              "      <td>0.561066</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>0.959358</td>\n",
              "      <td>1.271918</td>\n",
              "      <td>1.072511</td>\n",
              "      <td>1.206279</td>\n",
              "      <td>0.457327</td>\n",
              "      <td>1.169091</td>\n",
              "      <td>1.374825</td>\n",
              "      <td>1.158937</td>\n",
              "      <td>1.228000</td>\n",
              "      <td>0.559584</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>0.969397</td>\n",
              "      <td>1.285913</td>\n",
              "      <td>1.081406</td>\n",
              "      <td>1.220621</td>\n",
              "      <td>0.455344</td>\n",
              "      <td>1.180079</td>\n",
              "      <td>1.363178</td>\n",
              "      <td>1.177862</td>\n",
              "      <td>1.249182</td>\n",
              "      <td>0.554122</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>100 rows × 10 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-99a84bbb-3921-44cd-9b2d-a5e087df83cb')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-99a84bbb-3921-44cd-9b2d-a5e087df83cb button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-99a84bbb-3921-44cd-9b2d-a5e087df83cb');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 302
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 59**"
      ],
      "metadata": {
        "id": "-OewAOBaEJAL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "rolling = prices.rolling(15).mean()\n",
        "rolling.columns = prices.columns\n",
        "rolling"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "LxCAYPABEMd2",
        "outputId": "ce10308d-665e-496e-be33-362eb2514414"
      },
      "execution_count": 303,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           0         1         2         3         4         5         6  \\\n",
              "0        NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
              "1        NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
              "2        NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
              "3        NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
              "4        NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
              "..       ...       ...       ...       ...       ...       ...       ...   \n",
              "95  0.913021  1.299530  1.048623  1.189552  0.458133  1.136390  1.376102   \n",
              "96  0.920411  1.287554  1.057126  1.189546  0.458117  1.143532  1.373380   \n",
              "97  0.926464  1.280361  1.068059  1.191061  0.456982  1.152491  1.367173   \n",
              "98  0.934249  1.280950  1.073950  1.189987  0.456232  1.157446  1.365185   \n",
              "99  0.946748  1.283439  1.079990  1.193220  0.456048  1.167441  1.363806   \n",
              "\n",
              "           7         8         9  \n",
              "0        NaN       NaN       NaN  \n",
              "1        NaN       NaN       NaN  \n",
              "2        NaN       NaN       NaN  \n",
              "3        NaN       NaN       NaN  \n",
              "4        NaN       NaN       NaN  \n",
              "..       ...       ...       ...  \n",
              "95  1.159051  1.102322  0.563469  \n",
              "96  1.156627  1.124253  0.560082  \n",
              "97  1.155399  1.146030  0.560186  \n",
              "98  1.156285  1.166238  0.558589  \n",
              "99  1.160129  1.187499  0.557638  \n",
              "\n",
              "[100 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-df0dc179-b0ea-4dae-8b2f-b94f04088ef1\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>0.913021</td>\n",
              "      <td>1.299530</td>\n",
              "      <td>1.048623</td>\n",
              "      <td>1.189552</td>\n",
              "      <td>0.458133</td>\n",
              "      <td>1.136390</td>\n",
              "      <td>1.376102</td>\n",
              "      <td>1.159051</td>\n",
              "      <td>1.102322</td>\n",
              "      <td>0.563469</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>0.920411</td>\n",
              "      <td>1.287554</td>\n",
              "      <td>1.057126</td>\n",
              "      <td>1.189546</td>\n",
              "      <td>0.458117</td>\n",
              "      <td>1.143532</td>\n",
              "      <td>1.373380</td>\n",
              "      <td>1.156627</td>\n",
              "      <td>1.124253</td>\n",
              "      <td>0.560082</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>0.926464</td>\n",
              "      <td>1.280361</td>\n",
              "      <td>1.068059</td>\n",
              "      <td>1.191061</td>\n",
              "      <td>0.456982</td>\n",
              "      <td>1.152491</td>\n",
              "      <td>1.367173</td>\n",
              "      <td>1.155399</td>\n",
              "      <td>1.146030</td>\n",
              "      <td>0.560186</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>0.934249</td>\n",
              "      <td>1.280950</td>\n",
              "      <td>1.073950</td>\n",
              "      <td>1.189987</td>\n",
              "      <td>0.456232</td>\n",
              "      <td>1.157446</td>\n",
              "      <td>1.365185</td>\n",
              "      <td>1.156285</td>\n",
              "      <td>1.166238</td>\n",
              "      <td>0.558589</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>0.946748</td>\n",
              "      <td>1.283439</td>\n",
              "      <td>1.079990</td>\n",
              "      <td>1.193220</td>\n",
              "      <td>0.456048</td>\n",
              "      <td>1.167441</td>\n",
              "      <td>1.363806</td>\n",
              "      <td>1.160129</td>\n",
              "      <td>1.187499</td>\n",
              "      <td>0.557638</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>100 rows × 10 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-df0dc179-b0ea-4dae-8b2f-b94f04088ef1')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-df0dc179-b0ea-4dae-8b2f-b94f04088ef1 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-df0dc179-b0ea-4dae-8b2f-b94f04088ef1');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 303
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xsERigvMHs0r",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        },
        "outputId": "b02b48da-846d-49ab-8c49-6a4459e97a7d"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "rolling_mean.plot()\n",
        "plt.title(\"Rolling Mean of Prices\")\n",
        "plt.xlabel(\"Date\")\n",
        "plt.ylabel(\"Price\")\n",
        "plt.legend();"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 60**"
      ],
      "metadata": {
        "id": "FVToXCR2EU0y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "rolling.plot()\n",
        "plt.title(\"Rolling\")\n",
        "plt.xlabel(\"Date\")\n",
        "plt.ylabel(\"Price\")\n",
        "plt.legend();"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        },
        "id": "05nljeOLEW9-",
        "outputId": "489a6298-aae3-40ae-9e5e-2c91a593ff92"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1Dh89mrCHs0r"
      },
      "source": [
        "For a complete list of all the methods that are built into `DataFrame`s, check out the [documentation](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GJ_Rmuf3Hs0s"
      },
      "source": [
        "# Next Steps\n",
        "\n",
        "Managing data gets a lot easier when you deal with pandas, though this has been a very general introduction. There are many more tools within the package which you may discover while trying to get your data to do precisely what you want. If you would rather read more on the additional capabilities of pandas, check out the [documentation](http://pandas.pydata.org/pandas-docs/stable/)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "collapsed": true,
        "id": "7xEGS11xHs0s"
      },
      "source": [
        "*This presentation is for informational purposes only and does not constitute an offer to sell, a solicitation to buy, or a recommendation for any security; nor does it constitute an offer to provide investment advisory or other services by Quantopian, Inc. (\"Quantopian\"). Nothing contained herein constitutes investment advice or offers any opinion with respect to the suitability of any security, and any views expressed herein should not be taken as advice to buy, sell, or hold any security or as an endorsement of any security or company.  In preparing the information contained herein, Quantopian, Inc. has not taken into account the investment needs, objectives, and financial circumstances of any particular investor. Any views expressed and data illustrated herein were prepared based upon information, believed to be reliable, available to Quantopian, Inc. at the time of publication. Quantopian makes no guarantees as to their accuracy or completeness. All information is subject to change and may quickly become unreliable for various reasons, including changes in market conditions or economic circumstances.*"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eQzBbvyKQymx"
      },
      "source": [
        "<div align=\"center\">\n",
        "<img style=\"display: block; margin: auto;\" alt=\"photo\" src=\"https://cdn.quantconnect.com/web/i/icon.png\">\n",
        "</div> \n",
        "\n",
        "Quantconnect\n",
        "\n",
        "Introduction to Financial Python\n",
        "</div>\n",
        "\n",
        "#Data Types and Data Structures\n",
        "\n",
        "# Introduction\n",
        "\n",
        "This tutorial provides a basic introduction to the Python programming language. If you are new to Python, you should run the code snippets while reading this tutorial. If you are an advanced Python user, please feel free to skip this chapter.\n",
        "\n",
        "# Basic Variable Types\n",
        "The basic types of variables in Python are: strings, integers, floating point numbers and booleans.\n",
        "\n",
        "Strings in python are identified as a contiguous set of characters represented in either single quotes (' ') or double quotes (\" \").\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 304,
      "metadata": {
        "id": "N5t-UrcfOqid",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dfe15c15-9a8e-4e60-827b-6c048fdfb63f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Welcome to QuantConnect\n"
          ]
        }
      ],
      "source": [
        "my_string1 = 'Welcome to'\n",
        "my_string2 = \"QuantConnect\"\n",
        "print(my_string1 + ' ' + my_string2)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 61**"
      ],
      "metadata": {
        "id": "rx529Z1WJUQS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "micadena1 = 'Welcome to'\n",
        "micadena2 = 'The jungle'\n",
        "print(micadena1 + ' ' +micadena2 )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SIVmCfXvJXx9",
        "outputId": "755bb794-4228-47f6-e3ac-0a60d0eada66"
      },
      "execution_count": 306,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Welcome to The jungle\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bXHnxZyHSd1M"
      },
      "source": [
        "An integer is a round number with no values after the decimal point."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 307,
      "metadata": {
        "id": "pNjuz3toOqif",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cd55bbf6-3902-41fe-e553-94796a76b454"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10\n",
            "<class 'int'>\n"
          ]
        }
      ],
      "source": [
        "my_int = 10\n",
        "print(my_int)\n",
        "print(type(my_int))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 62**"
      ],
      "metadata": {
        "id": "VJ_QufUfJoFc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mient = 8\n",
        "print (mient)\n",
        "print(type(mient))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_yQifgzGJqv6",
        "outputId": "831ece1f-4af3-46d1-9cc0-a4a53e0a12d0"
      },
      "execution_count": 309,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "8\n",
            "<class 'int'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_1ZanWrYSnzF"
      },
      "source": [
        "The built-in function int() can convert a string into an integer."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 310,
      "metadata": {
        "id": "zPwGb20FOqif",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "36a4de85-0388-42d6-b6fd-189136eddffb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'str'>\n",
            "<class 'int'>\n"
          ]
        }
      ],
      "source": [
        "my_string = \"100\"\n",
        "print(type(my_string))\n",
        "my_int = int(my_string)\n",
        "print(type(my_int))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WqMDPDTHSrE9"
      },
      "source": [
        "A floating point number, or a float, is a real number in mathematics. In Python we need to include a value after a decimal point to define it as a float"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 311,
      "metadata": {
        "id": "otCzKKW9Oqig",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6ff2038d-9eb2-4dce-bfcc-d5f43e7b7f19"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'float'>\n"
          ]
        }
      ],
      "source": [
        "my_string = \"100\"\n",
        "my_float = float(my_string)\n",
        "print(type(my_float))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2iuyv8Q7StTJ"
      },
      "source": [
        "As you can see above, if we don't include a decimal value, the variable would be defined as an integer. The built-in function float() can convert a string or an integer into a float."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 312,
      "metadata": {
        "id": "wwLw5VthOqig",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "82e8ad68-b067-4a51-8a03-e8ec17c5a78d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n",
            "<class 'bool'>\n"
          ]
        }
      ],
      "source": [
        "my_bool = False\n",
        "print(my_bool)\n",
        "print(type(my_bool))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 63**"
      ],
      "metadata": {
        "id": "QwRgHtyXKAC8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mibool = True\n",
        "print (mibool)\n",
        "print (type(mibool))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KKBUILjnKCs8",
        "outputId": "5ccfda32-c343-4a80-cfb2-f11cf950afc9"
      },
      "execution_count": 313,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n",
            "<class 'bool'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bnGMwH21Szr_"
      },
      "source": [
        "A boolean, or bool, is a binary variable. Its value can only be True or False. It is useful when we do some logic operations, which would be covered in our next chapter."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 314,
      "metadata": {
        "id": "DMa6pDl5Oqig",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1d0dc879-e618-4880-b20e-2a939622ed78"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Addition  2\n",
            "Subtraction  3\n",
            "Multiplication  6\n",
            "Division  5.0\n",
            "exponent 8\n"
          ]
        }
      ],
      "source": [
        "print(\"Addition \", 1+1)\n",
        "print(\"Subtraction \", 5-2)\n",
        "print(\"Multiplication \", 2*3)\n",
        "print(\"Division \", 10/2)\n",
        "print('exponent', 2**3)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1Xc9G9_sS2ju"
      },
      "source": [
        "# Basic Math Operations\n",
        "\n",
        "The basic math operators in python are demonstrated below:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 315,
      "metadata": {
        "id": "KE9gUryAOqig",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "95c130aa-1184-4a70-9bad-fc6a2986d3c0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.3333333333333333\n",
            "0.3333333333333333\n"
          ]
        }
      ],
      "source": [
        "print(1/3)\n",
        "print(1.0/3)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 64**"
      ],
      "metadata": {
        "id": "TMDbl79lKr-D"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(8/25)\n",
        "print(1.5/6.3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zgFH94NyKueA",
        "outputId": "f5bf1522-d0fe-4e03-8203-ea30a1178bbb"
      },
      "execution_count": 316,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.32\n",
            "0.2380952380952381\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AN5Oa3DoS_Nf"
      },
      "source": [
        "# Data Collections\n",
        "\n",
        "## List\n",
        "A list is an ordered collection of values. A list is mutable, which means you can change a list's value without changing the list itself. Creating a list is simply putting different comma-separated values between square brackets."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 317,
      "metadata": {
        "id": "-tQdNqCvOqig",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "78f80e3a-35d2-4434-fe45-f02f0eeb7410"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Quant', 'Connect', 1, 2, 3]\n"
          ]
        }
      ],
      "source": [
        "my_list = ['Quant', 'Connect', 1,2,3]\n",
        "print(my_list)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 65**"
      ],
      "metadata": {
        "id": "3T90Z-KuK0yT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "milista = ['pera', 'manzana', 'Pe', 'Ere', 7, 9 ,10]\n",
        "print(milista)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "79Kpp8vaK3DY",
        "outputId": "24e185a3-debb-46eb-f761-5f57f0ed4f31"
      },
      "execution_count": 319,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['pera', 'manzana', 'Pe', 'Ere', 7, 9, 10]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1O0TsgZCTHrM"
      },
      "source": [
        "The values in a list are called \"elements\". We can access list elements by indexing. Python index starts from 0. So if you have a list of length n, the index of the first element will be 0, and that of the last element will be n − 1. By the way, the length of a list can be obtained by the built-in function len()."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 320,
      "metadata": {
        "id": "QhuVhRR5Oqih",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5d18b53e-b889-4a2e-90c2-aaad8112ccac"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5\n",
            "Quant\n",
            "3\n"
          ]
        }
      ],
      "source": [
        "my_list = ['Quant', 'Connect', 1,2,3]\n",
        "print(len(my_list))\n",
        "print(my_list[0])\n",
        "print(my_list[len(my_list) -1])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jgSZy1VGTKSc"
      },
      "source": [
        "You can also change the elements in the list by accessing an index and assigning a new value."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 321,
      "metadata": {
        "id": "NQBNLjAvOqih",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2b6d6378-986b-47d6-8b41-159e2ad36e55"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Quant', 'Connect', 'go', 2, 3]\n"
          ]
        }
      ],
      "source": [
        "my_list = ['Quant','Connect',1,2,3]\n",
        "my_list[2] = 'go'\n",
        "print(my_list)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 66**"
      ],
      "metadata": {
        "id": "_rU0afhaLF9x"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "milista = ['Eme', 'Ene', 2, 6, 8]\n",
        "milista[1]='Pe'\n",
        "print(milista)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mBSUwnbtLIfj",
        "outputId": "f2690086-6c21-451f-c993-6b6a5afcf1b6"
      },
      "execution_count": 323,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Eme', 'Pe', 2, 6, 8]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EQPs5ojoTVrk"
      },
      "source": [
        "A list can also be sliced with a colon:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 324,
      "metadata": {
        "id": "keNX2RbtOqii",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "58ac5473-9a65-435f-dc7f-a6d6c23c45a5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Connect', 1]\n"
          ]
        }
      ],
      "source": [
        "my_list = ['Quant','Connect',1,2,3]\n",
        "print(my_list[1:3])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 67**"
      ],
      "metadata": {
        "id": "fqLoRFRqLWyC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "milista = ['Te', 'Este', 'Ele', 3, 9]\n",
        "print(milista[0:2])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u0hfKMupLY67",
        "outputId": "8d9cf7d7-1b20-404a-e915-702c8f298cc4"
      },
      "execution_count": 326,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Te', 'Este']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AZqQd0K8TYul"
      },
      "source": [
        "The slice starts from the first element indicated, but excludes the last element indicated. Here we select all elements starting from index 1, which refers to the second element:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 327,
      "metadata": {
        "id": "0-76sLfkOqii",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2283003e-13b2-48b5-de01-7086818a0510"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Connect', 1, 2, 3]\n"
          ]
        }
      ],
      "source": [
        "print(my_list[1:])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 68**"
      ],
      "metadata": {
        "id": "lLGwNUdhLl7r"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(milista[2:])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Oqx6EeyhLn8_",
        "outputId": "1d3f5abf-3e27-4f58-d467-6d3d377f3320"
      },
      "execution_count": 328,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Ele', 3, 9]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XBqvhUdZVKWs"
      },
      "source": [
        "And all elements up to but excluding index 3:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 329,
      "metadata": {
        "id": "5NWr75L9Oqii",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0156fc05-8ee7-4b72-cf67-a702657a1c84"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Quant', 'Connect', 1]\n"
          ]
        }
      ],
      "source": [
        "print(my_list[:3])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 69**"
      ],
      "metadata": {
        "id": "dziLWyHrLsb2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(milista[:2])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IBikxnscLu0I",
        "outputId": "5392726c-7657-4539-e136-e262269f09ef"
      },
      "execution_count": 330,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Te', 'Este']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eAFmM6bkTZz9"
      },
      "source": [
        "If you wish to add or remove an element from a list, you can use the append() and remove() methods for lists as follows:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 331,
      "metadata": {
        "id": "pHmgTPElTo19",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "70584298-ff78-4fd4-b27f-8dbd9926bac9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Hello', 'Quant', 'Hello']\n"
          ]
        }
      ],
      "source": [
        "my_list = ['Hello', 'Quant']\n",
        "my_list.append('Hello')\n",
        "print(my_list)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 332,
      "metadata": {
        "id": "4C4U1Yf0Tr8l",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7844bce1-c1b4-4ded-d10d-98ca22dd8579"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Quant', 'Hello']\n"
          ]
        }
      ],
      "source": [
        "my_list.remove('Hello')\n",
        "print(my_list)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "11W1gG-cVmOU"
      },
      "source": [
        "When there are repeated instances of \"Hello\", the first one is removed.\n",
        "\n",
        "## Tuple\n",
        "A tuple is a data structure type similar to a list. The difference is that a tuple is immutable, which means you can't change the elements in it once it's defined. We create a tuple by putting comma-separated values between parentheses."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 333,
      "metadata": {
        "collapsed": true,
        "id": "vPmn6BAaOqii"
      },
      "outputs": [],
      "source": [
        "my_tuple = ('Welcome','to','QuantConnect')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 70**"
      ],
      "metadata": {
        "id": "5k71fal0L39b"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mitupla = ('Welcome', 'to', 'the jungle')"
      ],
      "metadata": {
        "id": "lN-eyJDbL60w"
      },
      "execution_count": 334,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zMIme4dDV0Wz"
      },
      "source": [
        "Just like a list, a tuple can be sliced by using index."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 335,
      "metadata": {
        "id": "8P-ddO0sOqii",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "736fa9e6-4846-4cc2-d1e2-805cd548b70e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "('to', 'QuantConnect')\n"
          ]
        }
      ],
      "source": [
        "my_tuple = ('Welcome','to','QuantConnect')\n",
        "print(my_tuple[1:])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 71**"
      ],
      "metadata": {
        "id": "NRv-u6t8MDrq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mitupla =('Welcome', 'to', 'the jungle')\n",
        "print(mitupla[0:])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_YxhkG_zMGKQ",
        "outputId": "a5ba1dcd-514d-4d83-a719-32fd34fbde6b"
      },
      "execution_count": 337,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "('Welcome', 'to', 'the jungle')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "l2JqbusAV1Y2"
      },
      "source": [
        "## Set\n",
        "A set is an **unordered**  collection with **no duplicate** elements. The built-in function **set()** can be used to create sets."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 338,
      "metadata": {
        "id": "Plau8r-UOqij",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "abe98f86-ebd4-4acd-bed8-5a982256b0b6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'FB', 'AAPL', 'GOOG', 'IBM', 'F'}\n"
          ]
        }
      ],
      "source": [
        "stock_list = ['AAPL','GOOG','IBM','AAPL','IBM','FB','F','GOOG']\n",
        "stock_set = set(stock_list)\n",
        "print(stock_set)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 72**"
      ],
      "metadata": {
        "id": "QoQfJK4fMUz8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lista_marcas = ['samsung', 'motorola', 'iphone', 'xiaomi']\n",
        "marcas_set = set(lista_marcas)\n",
        "print(marcas_set)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wUK34FU9MXU5",
        "outputId": "ef69cb09-16c4-40b0-d0bf-80040a0fc209"
      },
      "execution_count": 341,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'xiaomi', 'motorola', 'samsung', 'iphone'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Jyb4GGIoWIHk"
      },
      "source": [
        "Set is an easy way to remove duplicate elements from a list.\n",
        "\n",
        "##Dictionary\n",
        "A dictionary is one of the most important data structures in Python. Unlike sequences which are indexed by integers, dictionaries are indexed by keys which can be either strings or floats.\n",
        "\n",
        "A dictionary is an **unordered** collection of key : value pairs, with the requirement that the keys are unique. We create a dictionary by placing a comma-separated list of key : value pairs within the braces."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 342,
      "metadata": {
        "collapsed": true,
        "id": "36mTe5BaOqij"
      },
      "outputs": [],
      "source": [
        "my_dic = {'AAPL':'AAPLE', 'FB':'FaceBook', 'GOOG':'Alphabet'}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 343,
      "metadata": {
        "id": "KUfdVf43Oqij",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7e1a2774-e426-47ff-d4f7-a27290ff1154"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Alphabet\n"
          ]
        }
      ],
      "source": [
        "print(my_dic['GOOG'])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 73**"
      ],
      "metadata": {
        "id": "VqNfm1iAMwE8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "midicc = {'XXB': 'BXX', 'UYO': 'OYU'}\n",
        "print(midicc['UYO'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0AMM-eQGMzEm",
        "outputId": "2b302b25-ba31-4736-f2b1-bb8e7cf1ceae"
      },
      "execution_count": 348,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "OYU\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gSicoNqDWP4c"
      },
      "source": [
        "After defining a dictionary, we can access any value by indicating its key in brackets."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 345,
      "metadata": {
        "id": "IrTZdq9FOqij",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5b2b3770-a89f-4f05-9fe3-daeeec42249e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Alphabet Company\n"
          ]
        }
      ],
      "source": [
        "my_dic['GOOG'] = 'Alphabet Company'\n",
        "print(my_dic['GOOG'])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 74**"
      ],
      "metadata": {
        "id": "iDRE57lQNFcm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "midicc['XXB'] = 'YUI'\n",
        "print(midicc['XXB'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gV1NaQV6NH1M",
        "outputId": "f15cdcee-5055-4443-96a5-d30b0d38bc29"
      },
      "execution_count": 351,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "YUI\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M9sDsTEMWQvc"
      },
      "source": [
        "We can also change the value associated with a specified key:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 352,
      "metadata": {
        "id": "lupRHf1_Oqij",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0bbefecc-a79a-4be1-e7fd-4edcc70a4282"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dict_keys(['AAPL', 'FB', 'GOOG'])\n"
          ]
        }
      ],
      "source": [
        "print(my_dic.keys())"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 75**"
      ],
      "metadata": {
        "id": "dkvEHHcwNb-6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(midicc.keys())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WdTRSUBoNd8D",
        "outputId": "5d0d62f1-5f7c-45dd-af1e-f939f4cf6434"
      },
      "execution_count": 353,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dict_keys(['XXB', 'UYO', 'TTB'])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VPuDinlwWS9D"
      },
      "source": [
        "The built-in method of the dictionary object dict.keys() returns a list of all the keys used in the dictionary."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kSGzgNb2Womz"
      },
      "source": [
        "# Common String Operations\n",
        "A string is an immutable sequence of characters. It can be sliced by index just like a tuple:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 354,
      "metadata": {
        "id": "xPojDnm9Oqik",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "21c333ef-04d8-43b2-8c3c-a2f425bd1691"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "to QuantConnect\n"
          ]
        }
      ],
      "source": [
        "my_str = 'Welcome to QuantConnect'\n",
        "print(my_str[8:])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 79**"
      ],
      "metadata": {
        "id": "IFJPaAV5NnDM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "micad = 'Welcome to the jungle'\n",
        "print (micad[3:])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z3jzBMeKNrfy",
        "outputId": "82a699b9-561d-438f-fab2-a8295a7936f4"
      },
      "execution_count": 356,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "come to the jungle\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wuJYy7tvWtM7"
      },
      "source": [
        "There are many methods associated with strings. We can use string.count() to count the occurrences of a character in a string, use string.find() to return the index of a specific character, and use string.replace() to replace characters"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 357,
      "metadata": {
        "id": "u9deZq1SOqik",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c6a210da-45cf-4591-cf17-31411c6ce324"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "7\n",
            "2\n",
            "ell the e in this sentence now becomes e\n"
          ]
        }
      ],
      "source": [
        "print('Counting the number of e appears in this sentence'.count('e'))\n",
        "print('The first time e appears in this sentence'.find('e'))\n",
        "print('all the a in this sentence now becomes e'.replace('a','e'))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sJPn3rkvWwHN"
      },
      "source": [
        "The most commonly used method for strings is string.split(). This method will split the string by the indicated character and return a list:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 358,
      "metadata": {
        "id": "hbIaFLFHOqik",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e86098c8-6b20-429f-c22c-290b8ab35463"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2016-04-01 09:43:00\n",
            "09\n"
          ]
        }
      ],
      "source": [
        "Time = '2016-04-01 09:43:00'\n",
        "splited_list = Time.split(' ')\n",
        "date = splited_list[0]\n",
        "time = splited_list[1]\n",
        "print(date, time)\n",
        "hour = time.split(':')[0]\n",
        "print(hour)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9cJQGk96WyVc"
      },
      "source": [
        "We can replace parts of a string by our variable. This is called string formatting."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 359,
      "metadata": {
        "id": "-E_rIvv6Oqik",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "635333e5-5ceb-494e-e823-5fc1fb5629ae"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hour: 09, Minute:43\n"
          ]
        }
      ],
      "source": [
        "my_time = 'Hour: {}, Minute:{}'.format('09','43')\n",
        "print(my_time)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 80**"
      ],
      "metadata": {
        "id": "OcVkXoHXN14W"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "my_date = 'Day: {}, Month: {}, Year: {}'.format('24','02','2023')\n",
        "print (my_date)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CyjWlZxLN31X",
        "outputId": "f18e150b-5916-4661-fd42-940dd55b0f4e"
      },
      "execution_count": 363,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Day: 24, Month: 02, Year: 2023\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1_NbVldpWzAs"
      },
      "source": [
        "Another way to format a string is to use the % symbol."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 364,
      "metadata": {
        "id": "4rZ4rkD2Oqik",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "107bb648-c125-4764-ac38-ebd0d896f8b5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "the pi number is 3.140000\n",
            "Welcome to Quantconnect\n"
          ]
        }
      ],
      "source": [
        "print('the pi number is %f'%3.14)\n",
        "print('%s to %s'%('Welcome','Quantconnect'))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v_5cocrDW3MN"
      },
      "source": [
        "# Summary\n",
        "\n",
        "Weave seen the basic data types and data structures in Python. It's important to keep practicing to become familiar with these data structures. In the next tutorial, we will cover for and while loops and logical operations in Python."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QL6dNxwCXNEt"
      },
      "source": [
        "<div align=\"center\">\n",
        "<img style=\"display: block; margin: auto;\" alt=\"photo\" src=\"https://cdn.quantconnect.com/web/i/icon.png\">\n",
        "</div> \n",
        "\n",
        "Quantconnect\n",
        "\n",
        "Introduction to Financial Python\n",
        "</div>\n",
        "\n",
        "# Logical Operations and Loops\n",
        "\n",
        "# Introduction\n",
        "We discussed the basic data types and data structures in Python in the last tutorial. This chapter covers logical operations and loops in Python, which are very common in programming.\n",
        "\n",
        "# Logical Operations\n",
        "Like most programming languages, Python has comparison operators:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 365,
      "metadata": {
        "id": "70Guys_rOv7a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dcdad9ed-138b-4439-b7fb-9dd7ea04eba9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n",
            "True\n",
            "True\n",
            "True\n",
            "False\n"
          ]
        }
      ],
      "source": [
        "print(1 == 0)\n",
        "print(1 == 1)\n",
        "print(1 != 0)\n",
        "print(5 >= 5)\n",
        "print(5 >= 6)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 81**"
      ],
      "metadata": {
        "id": "aW2O2NuBOVS5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print (7 == 8)\n",
        "print (5 == 5)\n",
        "print (25<9)\n",
        "print (8!=8)\n",
        "print (8<=356)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hH6PA9VzOeTD",
        "outputId": "168eae1e-185b-4f1a-bde5-f465b2996fc4"
      },
      "execution_count": 367,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n",
            "True\n",
            "False\n",
            "False\n",
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8aFHYDj-YTXt"
      },
      "source": [
        "Each statement above has a boolean value, which must be either True or False, but not both.\n",
        "\n",
        "We can combine simple statements P and Q to form complex statements using logical operators:\n",
        "\n",
        "- The statement \"P and Q\" is true if both P and Q are true, otherwise it is false.\n",
        "- The statement \"P or Q\" is false if both P and Q are false, otherwise it is true.\n",
        "- The statement \"not P\" is true if P is false, and vice versa."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 368,
      "metadata": {
        "id": "O5YEEcUbOv7d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a37cb5a6-fc57-411b-f6f5-1c26efdde696"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n",
            "False\n",
            "True\n",
            "False\n"
          ]
        }
      ],
      "source": [
        "print(2 > 1 and 3 > 2)\n",
        "print(2 > 1 and 3 < 2) \n",
        "print(2 > 1 or 3 < 2)\n",
        "print(2 < 1 and 3 < 2)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 82**"
      ],
      "metadata": {
        "id": "O563vMaAOyq3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print (5==58 and 12 == 29)\n",
        "print (5==5 or 8>15)\n",
        "print (6<12 and 4>58)\n",
        "print (1==9 or 7>12)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gCWp_3TcO1i-",
        "outputId": "82c4a6a0-00a8-44b7-8f42-89d90450e9fc"
      },
      "execution_count": 371,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n",
            "True\n",
            "False\n",
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Dy7yzoSXYXmL"
      },
      "source": [
        "When dealing with a very complex logical statement that involves in several statements, we can use brackets to separate and combine them."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 372,
      "metadata": {
        "id": "QZ-W2xJZOv7d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "22d6b2bd-65ac-4b05-d008-26e41f01cba9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n",
            "True\n"
          ]
        }
      ],
      "source": [
        "print((3 > 2 or 1 < 3) and (1!=3 and 4>3) and not ( 3 < 2 or 1 < 3 and (1!=3 and 4>3)))\n",
        "print(3 > 2 or 1 < 3 and (1!=3 and 4>3) and not ( 3 < 2 or 1 < 3 and (1!=3 and 4>3)))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "s95xoRYMYaPD"
      },
      "source": [
        "Comparing the above two statements, we can see that it's wise to use brackets when we make a complex logical statement.\n",
        "\n",
        "# If Statement\n",
        "An if statement executes a segment of code only if its condition is true. A standard if statement consists of 3 segments: if, elif and else."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aRzMMitAaBOL"
      },
      "source": [
        "```python\n",
        "if statement1:\n",
        "    # if the statement1 is true, execute the code here.\n",
        "    # code.....\n",
        "    # code.....\n",
        "elif statement2:\n",
        "    # if the statement 1 is false, skip the codes above to this part.\n",
        "    # code......\n",
        "    # code......\n",
        "else:\n",
        "    # if none of the above statements is True, skip to this part\n",
        "    # code......\n",
        "```"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "l59R2AS8aH2K"
      },
      "source": [
        "An if statement doesn't necessarily has elif and else part. If it's not specified, the indented block of code will be executed when the condition is true, otherwise the whole if statement will be skipped."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 373,
      "metadata": {
        "id": "FZ5GoTXfOv7e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ea12c558-8133-4211-9991-0ca69609a1fb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "i==0 is True\n"
          ]
        }
      ],
      "source": [
        "i = 0\n",
        "if i == 0:\n",
        "    print('i==0 is True')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 83**"
      ],
      "metadata": {
        "id": "hO4ZAXCUPQX5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "i = 4\n",
        "if i ==4:\n",
        "  print('i = 4')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DUf-XMJ8PTaL",
        "outputId": "c6e3fd43-fc10-4c02-a04b-9bc2ad2416f2"
      },
      "execution_count": 374,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "i = 4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nPNW-l5eaJn8"
      },
      "source": [
        "As we mentioned above, we can write some complex statements here:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 375,
      "metadata": {
        "id": "gh-U6nMzOv7e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b663bd61-db0d-4a7e-9f2b-a60fc33e27bc"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "q is false\n"
          ]
        }
      ],
      "source": [
        "p = 1 > 0\n",
        "q = 2 > 3\n",
        "if p and q:\n",
        "    print('p and q is true')\n",
        "elif p and not q:\n",
        "    print('q is false')\n",
        "elif q and not p:\n",
        "    print('p is false')\n",
        "else:\n",
        "    print('None of p and q is true')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 84**"
      ],
      "metadata": {
        "id": "C8cJ-RJxPfhB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "p = 8 > 12\n",
        "q = 2 < 8\n",
        "if p and q:\n",
        "    print('p and q is true')\n",
        "elif p and not q:\n",
        "    print('q is false')\n",
        "elif q and not p:\n",
        "    print('p is false')\n",
        "else:\n",
        "    print('None of p and q is true')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L8kbPXFtPhWe",
        "outputId": "79a3b112-26e1-4758-994a-89ee3bf1bb59"
      },
      "execution_count": 377,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "p is false\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tgRDwiAsaMOL"
      },
      "source": [
        "# Loop Structure\n",
        "Loops are an essential part of programming. The \"for\" and \"while\" loops run a block of code repeatedly.\n",
        "\n",
        "## While Loop\n",
        "A \"while\" loop will run repeatedly until a certain condition has been met."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 378,
      "metadata": {
        "id": "uQLau8d5Ov7f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "87e4a4ad-ac99-42b2-b8b3-490ff19194f0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "1\n",
            "2\n",
            "3\n",
            "4\n"
          ]
        }
      ],
      "source": [
        "i = 0\n",
        "while i < 5:\n",
        "    print(i)\n",
        "    i += 1  "
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 85**"
      ],
      "metadata": {
        "id": "qag-wZaRPtwp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "i = 2\n",
        "while i < 9:\n",
        "  print(i)\n",
        "  i +=1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L4kh1fXLPvo0",
        "outputId": "e7a8a8d2-e416-41d3-adb8-9e1fa2b00f1c"
      },
      "execution_count": 379,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n",
            "3\n",
            "4\n",
            "5\n",
            "6\n",
            "7\n",
            "8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ydLddFAPaTOE"
      },
      "source": [
        "When making a while loop, we need to ensure that something changes from iteration to iteration so that the while loop will terminate, otherwise, it will run forever. Here we used i += 1 (short for i = i + 1) to make i larger after each iteration. This is the most commonly used method to control a while loop.\n",
        "\n",
        "## For Loop\n",
        "A \"for\" loop will iterate over a sequence of value and terminate when the sequence has ended."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 380,
      "metadata": {
        "id": "kt8Ie8u1Ov7f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cecd2871-dd6e-48e7-c310-4f45bd9ce7c4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n"
          ]
        }
      ],
      "source": [
        "for i in [1,2,3,4,5]:\n",
        "    print(i)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 86**"
      ],
      "metadata": {
        "id": "_tkR6Gc3P3-m"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for i in [3,6,9,12,15]:\n",
        "  print (i)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P6KM2kJkP60b",
        "outputId": "59cd18ac-00c6-4881-b768-e596f9e6527c"
      },
      "execution_count": 381,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3\n",
            "6\n",
            "9\n",
            "12\n",
            "15\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yWStqpreaX-T"
      },
      "source": [
        "We can also add if statements in a for loop. Here is a real example from our pairs trading algorithm:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 382,
      "metadata": {
        "id": "kElmffvFOv7f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bb0ccd20-d53f-43a8-84fe-e03f8de4cee7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['AAPL', 'GOOG', 'IBM', 'FB', 'F', 'V', 'G', 'GE']\n"
          ]
        }
      ],
      "source": [
        "stocks = ['AAPL','GOOG','IBM','FB','F','V', 'G', 'GE']\n",
        "selected = ['AAPL','IBM']\n",
        "new_list = []\n",
        "for i in stocks:\n",
        "    if i not in selected:\n",
        "        new_list.append(i)\n",
        "print(stocks)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 87**"
      ],
      "metadata": {
        "id": "YdGwOtqWQPVx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "marcas = ['samsung', 'motorola', 'iphone','xiaomi']\n",
        "selected = ['samsung','iphone']\n",
        "newlist = []\n",
        "for i in marcas:\n",
        "  if i in selected:\n",
        "    newlist.append(i)\n",
        "print(marcas)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2W2wYX4hQRGf",
        "outputId": "b6422e77-c5f7-4652-c954-0e06046f5e7e"
      },
      "execution_count": 383,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['samsung', 'motorola', 'iphone', 'xiaomi']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wb2hry9dahE0"
      },
      "source": [
        "Here we iterated all the elements in the list 'stocks'. Later in this chapter, we will introduce a smarter way to do this, which is just a one-line code.\n",
        "\n",
        "## Break and continue\n",
        "These are two commonly used commands in a for loop. If \"break\" is triggered while a loop is executing, the loop will terminate immediately:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 384,
      "metadata": {
        "id": "yF5wMVItOv7g",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d683ca9b-3d8a-42a8-f00d-04dd25c01a53"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AAPL\n",
            "GOOG\n",
            "IBM\n",
            "FB\n"
          ]
        }
      ],
      "source": [
        "stocks = ['AAPL','GOOG','IBM','FB','F','V', 'G', 'GE']\n",
        "for i in stocks:\n",
        "    print(i)\n",
        "    if i == 'FB':\n",
        "        break"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 88**"
      ],
      "metadata": {
        "id": "L_F9fKIfQqv_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "marcas= ['samsung', 'iphone', 'Motorola','xiaomi']\n",
        "for i in marcas:\n",
        "  print(i)\n",
        "  if i == 'Motorola':\n",
        "    break"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VlSjzW5DQslc",
        "outputId": "73e25dce-f89a-4799-cccf-a0c70667f19a"
      },
      "execution_count": 385,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "samsung\n",
            "iphone\n",
            "Motorola\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "R0toxyp3ao0T"
      },
      "source": [
        "The \"continue\" command tells the loop to end this iteration and skip to the next iteration:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 386,
      "metadata": {
        "id": "Stg-CH6IOv7g",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0eb1c31d-149a-4cdf-ec93-3c5b83853036"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AAPL\n",
            "GOOG\n",
            "IBM\n",
            "F\n",
            "V\n",
            "G\n",
            "GE\n"
          ]
        }
      ],
      "source": [
        "stocks = ['AAPL','GOOG','IBM','FB','F','V', 'G', 'GE']\n",
        "for i in stocks:\n",
        "    if i == 'FB':\n",
        "        continue\n",
        "    print(i)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 89**"
      ],
      "metadata": {
        "id": "iZT63mVRQ5r0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "marcas = ['samsung', 'iphone', 'Motorola','Xiaomi']\n",
        "for i in marcas:\n",
        "  if i == 'Motorola':\n",
        "    continue\n",
        "  print(i)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HgjSDtvGQ-wk",
        "outputId": "d3887eb4-2ba7-4e46-f048-16eba915f643"
      },
      "execution_count": 387,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "samsung\n",
            "iphone\n",
            "Xiaomi\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4NusvdhBaxpZ"
      },
      "source": [
        "# List Comprehension\n",
        "List comprehension is a Pythonic way to create lists. Common applications are to make new lists where each element is the result of some operations applied to each member of another sequence. For example, if we want to create a list of squares using for loop:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 388,
      "metadata": {
        "id": "bdxxeOABOv7h",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8c93f66e-9f97-4f0e-e338-38022f222274"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 4, 9, 16, 25]\n"
          ]
        }
      ],
      "source": [
        "squares = []\n",
        "for i in [1,2,3,4,5]:\n",
        "    squares.append(i**2)\n",
        "print(squares)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 90**"
      ],
      "metadata": {
        "id": "LsjYBoVSRG4r"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "logaritmos = []\n",
        "for i in [5, 7, 9, 15]:\n",
        "  logaritmos.append(math.log(i))\n",
        "print(logaritmos)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xhqxdtoVRJHt",
        "outputId": "2db00ca6-a7c7-4567-b899-0c010c451aca"
      },
      "execution_count": 389,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.6094379124341003, 1.9459101490553132, 2.1972245773362196, 2.70805020110221]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "--KliJBOa1CC"
      },
      "source": [
        "Using list comprehension:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 390,
      "metadata": {
        "id": "440-yjG8Ov7h",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "10e6b3d8-0117-4816-f182-3284f86f4dc9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 4, 9, 16, 25]\n"
          ]
        }
      ],
      "source": [
        "list = [1,2,3,4,5]\n",
        "squares = [x**2 for x in list]\n",
        "print(squares)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 91**"
      ],
      "metadata": {
        "id": "tLj5R_huRcqr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lista = [9,5,3,2]\n",
        "log = [math.log(x) for x in lista]\n",
        "print(log)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "naEgCOdORe48",
        "outputId": "ac8f6c83-a332-460c-d181-4540acbde7da"
      },
      "execution_count": 391,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2.1972245773362196, 1.6094379124341003, 1.0986122886681098, 0.6931471805599453]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uMuCfR3ya3zT"
      },
      "source": [
        "Recall the example above where we used a for loop to select stocks. Here we use list comprehension:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 392,
      "metadata": {
        "id": "ZGtCtog2Ov7h",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2eea8cf4-b61c-4003-cb72-19f652934c0a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['AAPL', 'IBM']\n"
          ]
        }
      ],
      "source": [
        "stocks = ['AAPL','GOOG','IBM','FB','F','V', 'G', 'GE']\n",
        "selected = ['AAPL','IBM']\n",
        "new_list = [x for x in stocks if x in selected]\n",
        "print(new_list)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 92**"
      ],
      "metadata": {
        "id": "BF_BJ-12Rtwy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "marcas = ['samsung', 'iphone', 'Motorola','xiaomi']\n",
        "selected = ['samsung','iphone']\n",
        "newlist = [x for x in marcas if x not in selected]\n",
        "print (newlist)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s_6E3fJHRx91",
        "outputId": "f6e2ef84-a8c0-4ab7-eaf2-dda0f4a1ba5d"
      },
      "execution_count": 394,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Motorola', 'xiaomi']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EPeUv6Lia5oD"
      },
      "source": [
        "A list comprehension consists of square brackets containing an expression followed by a \"for\" clause, and possibly \"for\" or \"if\" clauses. For example:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 395,
      "metadata": {
        "id": "O1AMB5d7Ov7i",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "980237f5-ef7f-4af3-c64a-b885784cef41"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]\n",
            "['AAPL vs F', 'AAPL vs V', 'AAPL vs G', 'AAPL vs GE', 'GOOG vs F', 'GOOG vs V', 'GOOG vs G', 'GOOG vs GE', 'IBM vs F', 'IBM vs V', 'IBM vs G', 'IBM vs GE', 'FB vs F', 'FB vs V', 'FB vs G', 'FB vs GE']\n"
          ]
        }
      ],
      "source": [
        "print([(x, y) for x in [1,2,3] for y in [3,1,4] if x != y])\n",
        "print([str(x)+' vs '+str(y) for x in ['AAPL','GOOG','IBM','FB'] for y in ['F','V','G','GE'] if x!=y])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jJpvq-o4a8P7"
      },
      "source": [
        "List comprehension is an elegant way to organize one or more for loops when creating a list.\n",
        "\n",
        "# Summary\n",
        "This chapter has introduced logical operations, loops, and list comprehension. In the next chapter, we will introduce functions and object-oriented programming, which will enable us to make our codes clean and versatile."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Tef_X2wJbdhn"
      },
      "source": [
        "<div align=\"center\">\n",
        "<img style=\"display: block; margin: auto;\" alt=\"photo\" src=\"https://cdn.quantconnect.com/web/i/icon.png\">\n",
        "\n",
        "Quantconnect\n",
        "\n",
        "Introduction to Financial Python\n",
        "</div>\n",
        "\n",
        "# Functions and Object-Oriented Programming\n",
        "\n",
        "# Introduction\n",
        "\n",
        "In the last tutorial we introduced logical operations, loops and list comprehension. We will introduce functions and object-oriented programming in this chapter, which will enable us to build complex algorithms in more flexible ways.\n",
        "\n",
        "# Functions\n",
        "A function is a reusable block of code. We can use a function to output a value, or do anything else we want. We can easily define our own function by using the keyword \"def\"."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 396,
      "metadata": {
        "id": "eE_NkTiSO2PO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4cd9c5ab-da5c-48c1-9b72-d6bfcc8f5dbe"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "6\n",
            "50\n"
          ]
        }
      ],
      "source": [
        "def product(x,y):\n",
        "    return x*y\n",
        "print(product(2,3))\n",
        "print(product(5,10))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 93**"
      ],
      "metadata": {
        "id": "jNULCdvbSJOz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def suma(x,y):\n",
        "  return x+y\n",
        "print(suma(9,12))\n",
        "print(suma(6,8))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5KRgwdyLSYBp",
        "outputId": "2889f5e4-5de1-4ba0-af42-7cf1c24d90e6"
      },
      "execution_count": 398,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "21\n",
            "14\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4oRU_dVJbsdD"
      },
      "source": [
        "The keyword \"def\" is followed by the function name and the parenthesized list of formal parameters. The statements that form the body of the function start at the next line, and must be indented. The product() function above has \"x\" and \"y\" as its parameters. A function doesn't necessarily have parameters:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 399,
      "metadata": {
        "id": "JhdWVLbUO2PQ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "85b2ccea-8cb6-4724-fda8-6dbd6bcc8f58"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Welcome to QuantConnect\n"
          ]
        }
      ],
      "source": [
        "def say_hi():\n",
        "    print('Welcome to QuantConnect')\n",
        "say_hi()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 94**"
      ],
      "metadata": {
        "id": "01OQY_x0SlXf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def ask_gender():\n",
        "  print('Hey, What is your gender?')\n",
        "ask_gender()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5GWI6csYSnFf",
        "outputId": "19911f90-8099-4543-b0fe-b777ef088728"
      },
      "execution_count": 402,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hey, What is your gender?\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lHwqVpWVb1Jr"
      },
      "source": [
        "# Built-in Function\n",
        "**range()** is a function that creates a list containing an arithmetic sequence. It's often used in for loops. The arguments must be integers. If the \"step\" argument is omitted, it defaults to 1."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 403,
      "metadata": {
        "id": "VVOTELcIO2PQ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "af60c15a-6bc2-46b1-a758-c5dac2279a16"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "range(0, 10)\n",
            "range(1, 11)\n",
            "range(1, 11, 2)\n"
          ]
        }
      ],
      "source": [
        "print(range(10))\n",
        "print(range(1,11))\n",
        "print(range(1,11,2))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 95**"
      ],
      "metadata": {
        "id": "SEKM5xjgSyId"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(range(9))\n",
        "print(range(5,10))\n",
        "print(range(3, 6, 9))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kFKofKiES04M",
        "outputId": "2a4d59ec-56b6-4435-dddb-0f13acc53b41"
      },
      "execution_count": 405,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "range(0, 9)\n",
            "range(5, 10)\n",
            "range(3, 6, 9)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PD0cSgiwcQ4L"
      },
      "source": [
        "**len()** is another function used together with range() to create a for loop. This function returns the length of an object. The argument must be a sequence or a collection."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 406,
      "metadata": {
        "id": "Hg18c7v-O2PR",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e15893be-f20c-4b39-c02b-d381662722c2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The length of tickers is 8\n",
            "AAPL\n",
            "GOOG\n",
            "IBM\n",
            "FB\n",
            "F\n",
            "V\n",
            "G\n",
            "GE\n"
          ]
        }
      ],
      "source": [
        "tickers = ['AAPL','GOOG','IBM','FB','F','V', 'G', 'GE']\n",
        "print('The length of tickers is {}'.format(len(tickers)))\n",
        "for i in range(len(tickers)):\n",
        "    print(tickers[i])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 96**"
      ],
      "metadata": {
        "id": "TkZR-evGTCZW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "marcas = ['samsung', 'iphone', 'Motorola','xiaomi']\n",
        "print('the length of marcas is {}'.format(len(marcas)))\n",
        "for i in range(len(marcas)):\n",
        "  print(marcas[i])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5X0U6q53TE1U",
        "outputId": "a0d460c8-6dbb-428d-bea4-b5a712c3d906"
      },
      "execution_count": 407,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "the length of marcas is 4\n",
            "samsung\n",
            "iphone\n",
            "Motorola\n",
            "xiaomi\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OIQSuub1cWgi"
      },
      "source": [
        "Note: If you want to print only the tickers without those numbers, then simply write \"for ticker in tickers: print ticker\"\n",
        "\n",
        "**map(**) is a function that applies a specific function to every item of a sequence or collection, and returns a list of the results."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 428,
      "metadata": {
        "id": "78DyKVOyO2PR",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 186
        },
        "outputId": "9803afa1-c39c-4ad6-c2cd-54b565645e01"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-428-4108eb04908d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mtickers\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'AAPL'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'GOOG'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'IBM'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'FB'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'F'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'V'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'G'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'GE'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtickers\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m: 'list' object is not callable"
          ]
        }
      ],
      "source": [
        "tickers = ['AAPL','GOOG','IBM','FB','F','V', 'G', 'GE']\n",
        "print(list(map(len,tickers)))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 97**"
      ],
      "metadata": {
        "id": "ey-5AhvnTowi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "marcas = ['samsung', 'iphone', 'Motorola','xiaomi']\n",
        "print(list(map(len,marcas)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 186
        },
        "id": "lag1u6s2TtWj",
        "outputId": "202a53ad-da5e-4b9a-e7ce-e6ee83af7d61"
      },
      "execution_count": 421,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-421-a989d7ffee90>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mmarcas\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'samsung'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'iphone'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Motorola'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'xiaomi'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mmarcas\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m: 'list' object is not callable"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mvr06UM7ca7b"
      },
      "source": [
        "The **lambda operator** is a way to create small anonymous functions. These functions are just needed where they have been created. For example:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 425,
      "metadata": {
        "id": "pAEHADYXO2PR",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "95f131ab-f971-4d09-b88d-697d2025d90f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<map at 0x7f94ad30b760>"
            ]
          },
          "metadata": {},
          "execution_count": 425
        }
      ],
      "source": [
        "(map(lambda x: x**2, range(10)))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 98**"
      ],
      "metadata": {
        "id": "uHtYLzgZT2-f"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "list(map(lambda x: x**math.e, range(15)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XoQtB4d0T5HC",
        "outputId": "2b3ab856-d145-4c15-a6ad-4684535e5901"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.0,\n",
              " 1.0,\n",
              " 6.5808859910179205,\n",
              " 19.812990745274643,\n",
              " 43.30806042677592,\n",
              " 79.43235916621322,\n",
              " 130.3870332357456,\n",
              " 198.25066165574742,\n",
              " 285.0054081607272,\n",
              " 392.5546022723387,\n",
              " 522.7352996704365,\n",
              " 677.3276617507046,\n",
              " 858.0622004315062,\n",
              " 1066.6255252581707,\n",
              " 1304.665002000342]"
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Mgixpxomcj3T"
      },
      "source": [
        "map() can be applied to more than one list. The lists have to have the same length."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 429,
      "metadata": {
        "id": "HtckhAaJO2PS",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 168
        },
        "outputId": "382a81f6-6739-442a-e98e-ce1f37982563"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-429-eaff56dcf145>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m: 'list' object is not callable"
          ]
        }
      ],
      "source": [
        "list(map(lambda x, y: x+y, [1,2,3,4,5],[5,4,3,2,1]))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 99**"
      ],
      "metadata": {
        "id": "TOo07T3_UE4d"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "list(map(lambda x, y: x/y, [5, 7, 0, 1, 4],[3, 2, 4, 5, 6]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RvyzXCW1UHeU",
        "outputId": "a78b3f67-1af5-4b91-f44e-a1778061d6d2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[1.6666666666666667, 3.5, 0.0, 0.2, 0.6666666666666666]"
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZDnMTH-KcklT"
      },
      "source": [
        "**sorted()** takes a list or set and returns a new sorted list"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 434,
      "metadata": {
        "id": "P0sHUMFWO2PS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1e1551c7-f43f-4d5e-9488-6f4bcbb486f0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[1, 2, 3, 4, 5]"
            ]
          },
          "metadata": {},
          "execution_count": 434
        }
      ],
      "source": [
        "sorted([5,2,3,4,1])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 100**"
      ],
      "metadata": {
        "id": "f7eRoE-tUUJX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sorted([8,21,13,45])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lllPhG9vUdgH",
        "outputId": "14703747-f134-4135-c63d-2d1058b4877b"
      },
      "execution_count": 433,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[8, 13, 21, 45]"
            ]
          },
          "metadata": {},
          "execution_count": 433
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-N5_EDOFcnsc"
      },
      "source": [
        "We can add a \"key\" parameter to specify a function to be called on each list element prior to making comparisons. For example:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0i3peZ0bO2PS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1e63732e-2c5b-4202-dc64-c33e55ef680d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[('MSFT', 69), ('WMT', 75.32), ('AAPL', 144.09), ('FB', 150), ('GOOG', 911.71)]"
            ]
          },
          "metadata": {},
          "execution_count": 77
        }
      ],
      "source": [
        "price_list = [('AAPL',144.09),('GOOG',911.71),('MSFT',69),('FB',150),('WMT',75.32)]\n",
        "sorted(price_list, key = lambda x: x[1])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 101**"
      ],
      "metadata": {
        "id": "x0wMPGcsUrlQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "price_phone = [('samsung', 80),('iphone', 90),('Motorola', 65)]\n",
        "sorted(price_phone, key=lambda x:x[1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UARiDdJOUtts",
        "outputId": "4badb03e-c5ab-435c-9f71-bf4355f8e087"
      },
      "execution_count": 435,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[('Motorola', 55), ('samsung', 80), ('iphone', 90)]"
            ]
          },
          "metadata": {},
          "execution_count": 435
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yun2zptKcxe_"
      },
      "source": [
        "By default the values are sorted by ascending order. We can change it to descending by adding an optional parameter \"reverse'."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 430,
      "metadata": {
        "id": "dEZqdl94O2PT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d83a5c68-66ab-4626-f05f-0cab93df4505"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[('GOOG', 911.71), ('FB', 150), ('AAPL', 144.09), ('WMT', 75.32), ('MSFT', 69)]"
            ]
          },
          "metadata": {},
          "execution_count": 430
        }
      ],
      "source": [
        "price_list = [('AAPL',144.09),('GOOG',911.71),('MSFT',69),('FB',150),('WMT',75.32)]\n",
        "sorted(price_list, key = lambda x: x[1],reverse = True)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 102**"
      ],
      "metadata": {
        "id": "4Cxhuf6hVETQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "price_phone = [('samsung', 80),('iphone', 90),('Motorola', 65)]\n",
        "sorted(price_phone, key=lambda x:x[1], reverse=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-7fVOfi7VHet",
        "outputId": "f1c6ae51-58db-48f3-8ec0-20d3b74582a2"
      },
      "execution_count": 436,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[('iphone', 90), ('samsung', 80), ('Motorola', 55)]"
            ]
          },
          "metadata": {},
          "execution_count": 436
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OA2wYAa0c6Dn"
      },
      "source": [
        "Lists also have a function list.sort(). This function takes the same \"key\" and \"reverse\" arguments as sorted(), but it doesn't return a new list."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 437,
      "metadata": {
        "id": "pG9VQCLnO2PT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9f5066d7-66bf-4e8a-f9f1-859e3a795f50"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[('MSFT', 69), ('WMT', 75.32), ('AAPL', 144.09), ('FB', 150), ('GOOG', 911.71)]\n"
          ]
        }
      ],
      "source": [
        "price_list = [('AAPL',144.09),('GOOG',911.71),('MSFT',69),('FB',150),('WMT',75.32)]\n",
        "price_list.sort(key = lambda x: x[1])\n",
        "print(price_list)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 103**"
      ],
      "metadata": {
        "id": "nYF6c4inVMVw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "price_phone = [('samsung', 80),('iphone', 90),('Motorola', 65)]\n",
        "price_phone.sort(key=lambda x:x[1])\n",
        "print(price_phone)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hHzYzknBVOnU",
        "outputId": "190c3d60-589c-430c-aef7-396052eed821"
      },
      "execution_count": 438,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[('Motorola', 65), ('samsung', 80), ('iphone', 90)]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mxljL1W1c_c5"
      },
      "source": [
        "# Object-Oriented Programming\n",
        "Python is an object-oriented programming language. It's important to understand the concept of \"objects\" because almost every kind of data from QuantConnect API is an object.\n",
        "\n",
        "## Class\n",
        "A class is a type of data, just like a string, float, or list. When we create an object of that data type, we call it an instance of a class.\n",
        "\n",
        "In Python, everything is an object - everything is an instance of some class. The data stored inside an object are called attributes, and the functions which are associated with the object are called methods.\n",
        "\n",
        "For example, as mentioned above, a list is an object of the \"list\" class, and it has a method list.sort().\n",
        "\n",
        "We can create our own objects by defining a class. We would do this when it's helpful to group certain functions together. For example, we define a class named \"Stock\" here:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 439,
      "metadata": {
        "id": "zC4Y4PgDO2PT"
      },
      "outputs": [],
      "source": [
        "class stock:\n",
        "    def __init__(self, ticker, open, close, volume):\n",
        "        self.ticker = ticker\n",
        "        self.open = open\n",
        "        self.close = close\n",
        "        self.volume = volume\n",
        "        self.rate_return = float(close)/open - 1\n",
        " \n",
        "    def update(self, open, close):\n",
        "        self.open = open\n",
        "        self.close = close\n",
        "        self.rate_return = float(self.close)/self.open - 1\n",
        " \n",
        "    def print_return(self):\n",
        "        print(self.rate_return)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rV06INT5dETi"
      },
      "source": [
        "The \"Stock\" class has attributes \"ticker\", \"open\", \"close\", \"volume\" and \"rate_return\". Inside the class body, the first method is called __init__, which is a special method. When we create a new instance of the class, the __init__ method is immediately executed with all the parameters that we pass to the \"Stock\" object. The purpose of this method is to set up a new \"Stock\" object using data we have provided.\n",
        "\n",
        "Here we create two Stock objects named \"apple\" and \"google\"."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 440,
      "metadata": {
        "id": "8tIpNk93O2PU"
      },
      "outputs": [],
      "source": [
        "apple = stock('AAPL', 143.69, 144.09, 20109375)\n",
        "google = stock('GOOG', 898.7, 911.7, 1561616)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 104**"
      ],
      "metadata": {
        "id": "v1m-8yS0Viqa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "phone1 = stock('samsung', 80, 65, 20690312)\n",
        "phone2 = stock('iphone', 90, 97, 20528915)"
      ],
      "metadata": {
        "id": "qlUKoVviVlCK"
      },
      "execution_count": 442,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VxmELNiHdPKS"
      },
      "source": [
        "Stock objects also have two other methods: update() and print_return(). We can access the attribues of a Stock object and call its methods:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 443,
      "metadata": {
        "id": "SsiIkmekO2PU",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "efe2528a-6d65-49c2-831d-eb2c7d821631"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.014465338822744034\n",
            "0.0006573181419806673\n"
          ]
        }
      ],
      "source": [
        "apple.ticker\n",
        "google.print_return()\n",
        "google.update(912.8,913.4)\n",
        "google.print_return()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Q8fl7keNdVKF"
      },
      "source": [
        "By calling the update() function, we updated the open and close prices of a stock. Please note that when we use the attributes or call the methods **inside a class**, we need to specify them as self.attribute or self.method(), otherwise Python will deem them as global variables and thus raise an error.\n",
        "\n",
        "We can add an attribute to an object anywhere:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 444,
      "metadata": {
        "id": "rO4OLnqOO2PU",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "6b089776-43d4-46a0-82b0-e6b677b10306"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Tim Cook'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 444
        }
      ],
      "source": [
        "apple.ceo = 'Tim Cook'\n",
        "apple.ceo"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 105**"
      ],
      "metadata": {
        "id": "QRsFf_AOWPu0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "apple.hi = 'Hi, Im a goat'\n",
        "apple.hi"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "UrxwAo2OWSW0",
        "outputId": "088a7a22-1cc3-4312-d8dd-592b410d6b2f"
      },
      "execution_count": 447,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Hi, Im a goat'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 447
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WyfnFgVidh4J"
      },
      "source": [
        "We can check what names (i.e. attributes and methods) are defined on an object using the dir() function:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 448,
      "metadata": {
        "id": "pPoz0LA8O2PU",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8edad0d6-2a1a-4703-f589-483c877dfd25"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['__class__',\n",
              " '__delattr__',\n",
              " '__dict__',\n",
              " '__dir__',\n",
              " '__doc__',\n",
              " '__eq__',\n",
              " '__format__',\n",
              " '__ge__',\n",
              " '__getattribute__',\n",
              " '__gt__',\n",
              " '__hash__',\n",
              " '__init__',\n",
              " '__init_subclass__',\n",
              " '__le__',\n",
              " '__lt__',\n",
              " '__module__',\n",
              " '__ne__',\n",
              " '__new__',\n",
              " '__reduce__',\n",
              " '__reduce_ex__',\n",
              " '__repr__',\n",
              " '__setattr__',\n",
              " '__sizeof__',\n",
              " '__str__',\n",
              " '__subclasshook__',\n",
              " '__weakref__',\n",
              " 'ceo',\n",
              " 'close',\n",
              " 'hi',\n",
              " 'open',\n",
              " 'print_return',\n",
              " 'rate_return',\n",
              " 'ticker',\n",
              " 'update',\n",
              " 'volume']"
            ]
          },
          "metadata": {},
          "execution_count": 448
        }
      ],
      "source": [
        "dir(apple)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 106**"
      ],
      "metadata": {
        "id": "JZ7bQ_1gWZMJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dir(apple.hi)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0fYW93_kWbFl",
        "outputId": "c27de10c-8da2-4ad9-fb15-b138315226df"
      },
      "execution_count": 449,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['__add__',\n",
              " '__class__',\n",
              " '__contains__',\n",
              " '__delattr__',\n",
              " '__dir__',\n",
              " '__doc__',\n",
              " '__eq__',\n",
              " '__format__',\n",
              " '__ge__',\n",
              " '__getattribute__',\n",
              " '__getitem__',\n",
              " '__getnewargs__',\n",
              " '__gt__',\n",
              " '__hash__',\n",
              " '__init__',\n",
              " '__init_subclass__',\n",
              " '__iter__',\n",
              " '__le__',\n",
              " '__len__',\n",
              " '__lt__',\n",
              " '__mod__',\n",
              " '__mul__',\n",
              " '__ne__',\n",
              " '__new__',\n",
              " '__reduce__',\n",
              " '__reduce_ex__',\n",
              " '__repr__',\n",
              " '__rmod__',\n",
              " '__rmul__',\n",
              " '__setattr__',\n",
              " '__sizeof__',\n",
              " '__str__',\n",
              " '__subclasshook__',\n",
              " 'capitalize',\n",
              " 'casefold',\n",
              " 'center',\n",
              " 'count',\n",
              " 'encode',\n",
              " 'endswith',\n",
              " 'expandtabs',\n",
              " 'find',\n",
              " 'format',\n",
              " 'format_map',\n",
              " 'index',\n",
              " 'isalnum',\n",
              " 'isalpha',\n",
              " 'isascii',\n",
              " 'isdecimal',\n",
              " 'isdigit',\n",
              " 'isidentifier',\n",
              " 'islower',\n",
              " 'isnumeric',\n",
              " 'isprintable',\n",
              " 'isspace',\n",
              " 'istitle',\n",
              " 'isupper',\n",
              " 'join',\n",
              " 'ljust',\n",
              " 'lower',\n",
              " 'lstrip',\n",
              " 'maketrans',\n",
              " 'partition',\n",
              " 'replace',\n",
              " 'rfind',\n",
              " 'rindex',\n",
              " 'rjust',\n",
              " 'rpartition',\n",
              " 'rsplit',\n",
              " 'rstrip',\n",
              " 'split',\n",
              " 'splitlines',\n",
              " 'startswith',\n",
              " 'strip',\n",
              " 'swapcase',\n",
              " 'title',\n",
              " 'translate',\n",
              " 'upper',\n",
              " 'zfill']"
            ]
          },
          "metadata": {},
          "execution_count": 449
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Qpemj1UZd2aa"
      },
      "source": [
        "## Inheritance\n",
        "Inheritance is a way of arranging classes in a hierarchy from the most general to the most specific. A \"child\" class is a more specific type of a \"parent\" class because a child class will inherit all the attribues and methods of its parent. For example, we define a class named \"Child\" which inherits \"Stock\":"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 450,
      "metadata": {
        "id": "UELXnxomO2PV"
      },
      "outputs": [],
      "source": [
        "class child(stock):\n",
        "    def __init__(self,name):\n",
        "        self.name = name"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 451,
      "metadata": {
        "id": "ffS2THZyO2PV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "16006976-c077-4d78-c678-f1146f588c5b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "aa\n",
            "100\n",
            "102\n",
            "0.020000000000000018\n",
            "None\n"
          ]
        }
      ],
      "source": [
        "aa = child('aa')\n",
        "print(aa.name)\n",
        "aa.update(100,102)\n",
        "print(aa.open)\n",
        "print(aa.close)\n",
        "print(aa.print_return())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pdIEjUv2eJqL"
      },
      "source": [
        "As seen above, the new class Child has inherited the methods from Stock.\n",
        "\n",
        "#Summary\n",
        "\n",
        "In this chapter we have introduced functions and classes. When we write a QuantConnect algorithm, we would define our algorithm as a class (QCAlgorithm). This means our algorithm inherited the QC API methods from QCAlgorithm class.\n",
        "\n",
        "In the next chapter, we will introduce NumPy and Pandas, which enable us to conduct scientific calculations in Python."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wVaJf76bHBG2"
      },
      "source": [
        "<div align=\"center\">\n",
        "<img style=\"display: block; margin: auto;\" alt=\"photo\" src=\"https://upload.wikimedia.org/wikipedia/en/d/de/Quantopian_logo_2017.png\">\n",
        "</div> \n",
        "\n",
        "# Introduction to NumPy\n",
        "by Maxwell Margenot\n",
        "\n",
        "Part of the Quantopian Lecture Series:\n",
        "\n",
        "* [www.quantopian.com/lectures](https://www.quantopian.com/lectures)\n",
        "* [github.com/quantopian/research_public](https://github.com/quantopian/research_public)\n",
        "\n",
        "Notebook released under the Creative Commons Attribution 4.0 License."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IAK83zxDHBG5"
      },
      "source": [
        "NumPy is an incredibly powerful package in Python that is ubiquitous throughout the Quantopian platform. It has strong integration with Pandas, another tool we will be covering in the lecture series. NumPy adds support for multi-dimensional arrays and mathematical functions that allow you to easily perform linear algebra calculations. This lecture will be a collection of linear algebra examples computed using NumPy."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 452,
      "metadata": {
        "collapsed": true,
        "id": "dM_wDhYaHBG6"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WRqhcyh8HBG7"
      },
      "source": [
        "### Basic NumPy arrays"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RwBafjlxHBG7"
      },
      "source": [
        "The most basic way that we could make use of NumPy in finance is calculating the mean return of a portfolio. Say that we have a list containing the historical return of several stocks."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 453,
      "metadata": {
        "collapsed": true,
        "id": "FUQksY7SHBG7"
      },
      "outputs": [],
      "source": [
        "stock_list = [3.5, 5, 2, 8, 4.2]"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 107**"
      ],
      "metadata": {
        "id": "oopAwGMQWz07"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "stoli = [3.1, 4.4, 6, 9]"
      ],
      "metadata": {
        "id": "xaoNoNW9W4hX"
      },
      "execution_count": 460,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "C18w8L6DHBG8"
      },
      "source": [
        "We can make an array by calling a function on the list:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 455,
      "metadata": {
        "id": "Mr7MYGIeHBG8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bf46d0a7-0e07-4c03-8fd9-9e5bdcc6bb8f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[3.5 5.  2.  8.  4.2] <class 'numpy.ndarray'>\n"
          ]
        }
      ],
      "source": [
        "returns = np.array(stock_list)\n",
        "print (returns, type(returns))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 108**"
      ],
      "metadata": {
        "id": "ed0HjfkpXDav"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pro = np.array(stoli)\n",
        "print(pro, type(pro))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w-y-x9YSXJCO",
        "outputId": "75b6db9c-02d5-46db-aadc-e669057ad4d8"
      },
      "execution_count": 461,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[3.1 4.4 6.  9. ] <class 'numpy.ndarray'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1HqIY_bRHBG-"
      },
      "source": [
        "You'll notice that the type of our array is 'ndarray', not just 'array'. This is because NumPy arrays can be created with multiple dimensions. If we pass np.array() a list of lists, it will create a 2-dimensional array. If we pass a list of lists of lists, it will create a 3-dimensional array, and so on and so forth."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 462,
      "metadata": {
        "id": "SkVTB_FhHBG-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "aef4dc7b-f6cd-497c-e069-ce0f4a8b1933"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1 2]\n",
            " [3 4]] <class 'numpy.ndarray'>\n"
          ]
        }
      ],
      "source": [
        "A = np.array([[1, 2], [3, 4]])\n",
        "print (A, type(A))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 109**"
      ],
      "metadata": {
        "id": "ERupDB4sXWjO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "B = np.array([[2,8],[1,9]])\n",
        "print(B,type(B))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yZkXJth_XYqt",
        "outputId": "c949dc18-163d-4550-fcaa-867a1d6e629e"
      },
      "execution_count": 464,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[2 8]\n",
            " [1 9]] <class 'numpy.ndarray'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4VKkEby_HBG_"
      },
      "source": [
        "We can access the dimensions of an array by looking at its `shape` member variable."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 465,
      "metadata": {
        "id": "7LTqF61fHBG_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "59cbb24a-c78c-4a30-ba6c-8520867a0d4f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(2, 2)\n"
          ]
        }
      ],
      "source": [
        "print (A.shape)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 110**"
      ],
      "metadata": {
        "id": "XNOBiEu5X4Bi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(B.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lr0Akbh4X55N",
        "outputId": "e468a3a5-f69f-4745-c431-6cf4f0d05cb2"
      },
      "execution_count": 466,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(2, 2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MZ4c2ugEHBG_"
      },
      "source": [
        "Arrays are indexed in much the same way as lists in Python. Elements of a list begin indexing from $0$ and end at $n - 1$, where $n$ is the length of the array."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 467,
      "metadata": {
        "id": "dGmwVWJ7HBHA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "909284f8-9d86-40ff-a43c-c06af5ab6a1f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.5 4.2\n"
          ]
        }
      ],
      "source": [
        "print (returns[0], returns[len(returns) - 1])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 111**"
      ],
      "metadata": {
        "id": "liRVigVVX-yW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(pro[2], pro[len(pro)- 2])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3NUYO35HYBeb",
        "outputId": "bddefe6d-a43d-4067-9a91-defeb4001281"
      },
      "execution_count": 468,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "6.0 6.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FQjELc7_HBHA"
      },
      "source": [
        "We can take a slice of an array using a colon, just like in a list."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 469,
      "metadata": {
        "id": "htvKur0-HBHA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "03879116-8cfe-42b9-8207-fc3dc5e33179"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[5. 2.]\n"
          ]
        }
      ],
      "source": [
        "print (returns[1:3])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 112**"
      ],
      "metadata": {
        "id": "LM2-Dys2YNnU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(pro[0:5])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eGmQiqlnYQgQ",
        "outputId": "80faec11-7227-411b-820f-121a24a3ebb8"
      },
      "execution_count": 470,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[3.1 4.4 6.  9. ]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-H58RLTUHBHB"
      },
      "source": [
        "A slice of an array, like in a list, will select a group of elements in the array starting from the first element indicated and going up to (but not including) the last element indicated.\n",
        "\n",
        "In the case of multidimensional arrays, many of the same conventions with slicing and indexing hold. We can access the first column of a 2-dimensional array like so:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 471,
      "metadata": {
        "id": "yYijy0W9HBHB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d9c0be13-0b93-47e7-acbd-2b6554050ee4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1 3]\n"
          ]
        }
      ],
      "source": [
        "print (A[:, 0])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 113**"
      ],
      "metadata": {
        "id": "OCFXExBLYXxD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(B[:2])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U98048LIYZoE",
        "outputId": "01e8550e-e79c-4784-94e3-dde7ac8a9bb8"
      },
      "execution_count": 473,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[2 8]\n",
            " [1 9]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xhQVM7NnHBHB"
      },
      "source": [
        "And the first row of a 2-dimensional array like so:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 474,
      "metadata": {
        "id": "wkSgQPPwHBHC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3a840867-2629-425a-fea5-a852135faa35"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1 2]\n"
          ]
        }
      ],
      "source": [
        "print (A[0, :])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 114**"
      ],
      "metadata": {
        "id": "8gdAiBCoYoNK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(B[1,: ])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IXWoWhrjYqs2",
        "outputId": "48d74a7e-3d93-404f-f4fa-8b35a6c0aa86"
      },
      "execution_count": 475,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1 9]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SDTAtESGHBHC"
      },
      "source": [
        "Notice that each slice of the array returns yet another array!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 477,
      "metadata": {
        "id": "i-b_etOwHBHC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dda6e79e-88f4-4ac1-d849-f2b17c963aa0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'numpy.ndarray'>\n"
          ]
        }
      ],
      "source": [
        "print (type(A[0,:]))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 115**"
      ],
      "metadata": {
        "id": "2E5hXm_8Yydq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(type(B[1,:]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zrrj7L4mY03J",
        "outputId": "4b000dd4-fc15-4424-df23-f85cbc89eca6"
      },
      "execution_count": 476,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'numpy.ndarray'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nU9uyhBoHBHC"
      },
      "source": [
        "Passing only one index to a 2-dimensional array will result in returning the row with the given index as well, providing us with another way to access individual rows."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 478,
      "metadata": {
        "id": "3TKqNl1HHBHD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "743d0fba-1d36-47be-8cb5-9d0f68ff7ab3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1 2]\n"
          ]
        }
      ],
      "source": [
        "print (A[0])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 116**"
      ],
      "metadata": {
        "id": "zPy4d5rpY9sr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(B[1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IJMVkkTlZDZa",
        "outputId": "11a6b82d-3e04-43d0-f52d-8c0fd309a139"
      },
      "execution_count": 481,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1 9]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YU3JrOlTHBHD"
      },
      "source": [
        "Accessing the index of an individual element will return only the element."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 482,
      "metadata": {
        "id": "wRAqWXdMHBHD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "40ab07af-fc4f-4580-917b-d336346f691a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4\n"
          ]
        }
      ],
      "source": [
        "print (A[1, 1])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 117**"
      ],
      "metadata": {
        "id": "XAEnbegXZIuR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(B[0,1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gHNxI7eWZKkF",
        "outputId": "dd1eab06-f0ee-4a7c-b872-3da7e5e13e1b"
      },
      "execution_count": 483,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xFQO6Fs6HBHD"
      },
      "source": [
        "#### Array functions\n",
        "\n",
        "Functions built into NumPy can be easily called on arrays. Most functions are applied to an array element-wise (as scalar multiplication is). For example, if we call `log()` on an array, the logarithm will be taken of each element."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 484,
      "metadata": {
        "id": "DjSH9iNsHBHE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7c0b9d70-8f85-49f2-ad35-beae4941efe8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.25276297 1.60943791 0.69314718 2.07944154 1.43508453]\n"
          ]
        }
      ],
      "source": [
        "print (np.log(returns))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 118**"
      ],
      "metadata": {
        "id": "VDve_wU-ZSpL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(np.log(pro))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZqEQ5bi-ZUuV",
        "outputId": "292df034-ed3e-4cef-fb1c-1df293493565"
      },
      "execution_count": 485,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.13140211 1.48160454 1.79175947 2.19722458]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_V-GzEzEHBHE"
      },
      "source": [
        "Some functions return a single value. This is because they treat the array as a collection (similar to a list), performing the designated function. For example, the `mean()` function will do exactly what you expect, calculating the mean of an array."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 486,
      "metadata": {
        "id": "R282crA5HBHE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "73b63a25-9b99-4e2b-8913-726ac2d04d5d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4.54\n"
          ]
        }
      ],
      "source": [
        "print (np.mean(returns))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 119**"
      ],
      "metadata": {
        "id": "FjXHjSCjZdtK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(np.mean(pro))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_XDn3wdeZqUd",
        "outputId": "54508d3e-f233-4aee-f731-7ae1229d219c"
      },
      "execution_count": 487,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5.625\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OxaJ11yqHBHE"
      },
      "source": [
        "Or the `max()` function will return the maximum element of an array."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 488,
      "metadata": {
        "id": "Eh2nhunpHBHE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d1aadbbf-aa73-4e95-ad02-304811f3cad6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "8.0\n"
          ]
        }
      ],
      "source": [
        "print (np.max(returns))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 120**"
      ],
      "metadata": {
        "id": "2n44ax5kZtVq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(np.max(pro))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M9_AHNNzbNN4",
        "outputId": "49d56bf5-f2aa-4b9e-f238-8f37b11a0ccb"
      },
      "execution_count": 489,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "9.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eH1KYrrWHBHF"
      },
      "source": [
        "For further reading on the universal functions in NumPy, check out the [documentation](https://docs.scipy.org/doc/numpy/user/quickstart.html#universal-functions)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oEcjMM3IHBHF"
      },
      "source": [
        "### Return to the returns\n",
        "\n",
        "Now let's modify our returns array with scalar values. If we add a scalar value to an array it will be added to every element of the array. If we multiply an array by a scalar value it will be multiplied against every element of the array. If we do both, both will happen!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 490,
      "metadata": {
        "id": "Jv4n194OHBHF",
        "scrolled": false,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9cd01a91-011c-4335-c63b-00dd027a23c7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([12. , 15. ,  9. , 21. , 13.4])"
            ]
          },
          "metadata": {},
          "execution_count": 490
        }
      ],
      "source": [
        "returns*2 + 5"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M73hAzi8HBHF"
      },
      "source": [
        "NumPy also has functions specifically built to operate on arrays. Let's take the mean and standard deviation of this group of returns."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 491,
      "metadata": {
        "id": "fw5ln9DRHBHF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "40f64299-adbd-4c1d-a861-3c0842507623"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean:  4.54 Std Dev:  1.9915822855207364\n"
          ]
        }
      ],
      "source": [
        "print (\"Mean: \", np.mean(returns), \"Std Dev: \", np.std(returns))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3_BKgW1pHBHF"
      },
      "source": [
        "Let's simulate a universe of stocks using NumPy's functions. First we need to create the arrays to hold the assets and returns that we will use to build a portfolio. This is because arrays are created with a fixed size. Their dimensions can't be changed without creating a new array."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 492,
      "metadata": {
        "collapsed": true,
        "id": "EtDKFh5-HBHG"
      },
      "outputs": [],
      "source": [
        "N = 10\n",
        "assets = np.zeros((N, 100))\n",
        "returns = np.zeros((N, 100))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GVcY465tHBHG"
      },
      "source": [
        "This function, `zeroes()`, creates a NumPy array with the given dimensions that is entirely filled in with $0$. We can pass a single value or a tuple of as many dimensions as we like. Passing in the tuple `(N, 100)`, will return a two-dimensional array with $N$ rows and $100$ columns. Our result is a $N \\times 100$ array.\n",
        "\n",
        "Now we will simulate a base asset. We want the universe of stocks to be correlated with each other so we will use this initial value to generate the others."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 493,
      "metadata": {
        "id": "Qipf5egbHBHG"
      },
      "outputs": [],
      "source": [
        "R_1 = np.random.normal(1.01, 0.03, 100)\n",
        "returns[0] = R_1\n",
        "assets[0] = np.cumprod(R_1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ToLVQXotHBHG"
      },
      "source": [
        "The `random` module in NumPy is exceedingly useful. It contains methods for sampling from many different probability distributions, some of which are covered in the [random variables lecture](https://www.quantopian.com/lectures/random-variables) in the Quantopian lecture series. In this case we draw $N = 100$ random samples from a normal distribution with mean $1.01$ and standard deviation $0.03$. We treat these as the daily percentage returns of our asset and take the cumulative product of these samples to get the current price.\n",
        "\n",
        "The way we have generated our universe, the the individual $R_i$ vectors are each 1-dimensional arrays and the `returns` and `assets` variables contain 2-dimensional arrays. Above, we set the initial row of both `returns` and `assets` to be the first $R_i$ vector and the cumulative asset price based on those returns, respectively.\n",
        "\n",
        "We will now use this base asset to create a few other random assets that are correlated with it."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 494,
      "metadata": {
        "id": "LgPyF_6kHBHG"
      },
      "outputs": [],
      "source": [
        "# Generate assets that are correlated with R_1\n",
        "for i in range(1, N):\n",
        "    R_i = R_1 + np.random.normal(0.001, 0.02, 100)\n",
        "    returns[i] = R_i # Set each row of returns equal to the new R_i array\n",
        "    assets[i] = np.cumprod(R_i)\n",
        "    \n",
        "mean_returns = [(np.mean(R) - 1)*100 for R in returns]\n",
        "return_volatilities = [np.std(R) for R in returns]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tv3LuKy-HBHG"
      },
      "source": [
        "Here we generate the remaining $N - 1$ securities that we want in our universe by adding random noise to $R_1$. This ensures that our $N - 1$ other assets will be correlated with the base asset because they have some underlying information that is shared.\n",
        "\n",
        "Let's plot what the mean return of each asset looks like:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 495,
      "metadata": {
        "id": "mJReUq0aHBHH",
        "scrolled": false,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "31a632e3-2d91-4c5d-e8c7-a5662638e0dc"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plt.bar(np.arange(len(mean_returns)), mean_returns)\n",
        "plt.xlabel('Stock')\n",
        "plt.ylabel('Returns')\n",
        "plt.title('Returns for {0} Random Assets'.format(N));"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OY0_iqBMHBHH"
      },
      "source": [
        "### Calculating Expected Return\n",
        "\n",
        "So we have a universe of stocks. Great! Now let's put them together in a portfolio and calculate its expected return and risk.\n",
        "\n",
        "We will start off by generating $N$ random weights for each asset in our portfolio."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 496,
      "metadata": {
        "id": "9YjglefxHBHH"
      },
      "outputs": [],
      "source": [
        "weights = np.random.uniform(0, 1, N)\n",
        "weights = weights/np.sum(weights)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CnycaAodHBHH"
      },
      "source": [
        "We have to rescale the weights so that they all add up to $1$. We do this by scaling the weights vector by the sum total of all the weights. This step ensures that we will be using $100\\%$ of the portfolio's cash.\n",
        "\n",
        "To calculate the mean return of the portfolio, we have to scale each asset's return by its designated weight. We can pull each element of each array and multiply them individually, but it's quicker to use NumPy's linear algebra methods. The function that we want is `dot()`. This will calculate the dot product between two arrays for us. So if $v = \\left[ 1, 2, 3 \\right]$ and $w = \\left[4, 5, 6 \\right]$, then:\n",
        "\n",
        "$$ v \\cdot w = 1 \\times 4 + 2 \\times 5 + 3 \\times 6 $$\n",
        "\n",
        "For a one-dimensional vector, the dot product will multiply each element pointwise and add all the products together! In our case, we have a vector of weights, $\\omega = \\left[ \\omega_1, \\omega_2, \\dots \\omega_N\\right]$ and a vector of returns, $\\mu = \\left[ \\mu_1, \\mu_2, \\dots, \\mu_N\\right]$. If we take the dot product of these two we will get:\n",
        "\n",
        "$$ \\omega \\cdot \\mu = \\omega_1\\mu_1 + \\omega_2\\mu_2 + \\dots + \\omega_N\\mu_N = \\mu_P $$\n",
        "\n",
        "This yields the sum of all the asset returns scaled by their respective weights. This the the portfolio's overall expected return!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 497,
      "metadata": {
        "id": "QfJNTq81HBHH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b1a2da74-a976-42de-980b-5e70b6635b9c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Expected return of the portfolio:  1.7259974273237935\n"
          ]
        }
      ],
      "source": [
        "p_returns = np.dot(weights, mean_returns)\n",
        "print (\"Expected return of the portfolio: \", p_returns)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ehttm4bbHBHH"
      },
      "source": [
        "Calculating the mean return is fairly intuitive and does not require too much explanation of linear algebra. However, calculating the variance of our portfolio requires a bit more background."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TJ8BiACSHBHI"
      },
      "source": [
        "#### Beware of NaN values\n",
        "\n",
        "Most of the time, all of these calculations will work without an issue. However, when working with real data we run the risk of having `nan` values in our arrays. This is NumPy's way of saying that the data there is missing or doesn't exist. These `nan` values can lead to errors in mathematical calculations so it is important to be aware of whether your array contains `nan` values and to know how to drop them."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 498,
      "metadata": {
        "id": "FqxKQxBxHBHK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3ae6937f-fa26-43ab-af25-35ac679c6f8f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 1.  2. nan  4.  5.]\n"
          ]
        }
      ],
      "source": [
        "v = np.array([1, 2, np.nan, 4, 5])\n",
        "print (v)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jovsVDZhHBHK"
      },
      "source": [
        "Let's see what happens when we try to take the mean of this array."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 499,
      "metadata": {
        "id": "ZpyttI4aHBHK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ca374118-8b7f-4902-e744-faa72b493b7d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "nan\n"
          ]
        }
      ],
      "source": [
        "print (np.mean(v))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LalxZM_tHBHK"
      },
      "source": [
        "Clearly, `nan` values can have a large impact on our calculations. Fortunately, we can check for `nan` values with the `isnan()` function."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 500,
      "metadata": {
        "id": "GtE-Kib4HBHL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c6cd3d6d-478d-490a-f2cf-6ffd06fd7626"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([False, False,  True, False, False])"
            ]
          },
          "metadata": {},
          "execution_count": 500
        }
      ],
      "source": [
        "np.isnan(v)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "06Lh33QAHBHL"
      },
      "source": [
        "Calling `isnan()` on an array will call the function on each value of the array, returning a value of `True` if the element is `nan` and `False` if the element is valid. Now, knowing whether your array contains `nan` values is all well and good, but how do we remove `nan`s? Handily enough, NumPy arrays can be indexed by boolean values (`True` or `False`). If we use a boolean array to index an array, we will remove all values of the array that register as `False` under the condition. We use the `isnan()` function in create a boolean array, assigning a `True` value to everything that is *not* `nan` and a `False` to the `nan`s and we use that to index the same array."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 501,
      "metadata": {
        "id": "RMHjCUzxHBHL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5c2adeba-abcc-4666-8167-dfb1217b2ca9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1. 2. 4. 5.]\n"
          ]
        }
      ],
      "source": [
        "ix = ~np.isnan(v) # the ~ indicates a logical not, inverting the bools\n",
        "print (v[ix]) # We can also just write v = v[~np.isnan(v)]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 502,
      "metadata": {
        "id": "RKoso7f-HBHL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "449caea8-20dc-48c7-d1e5-e27b4c850f61"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.0\n"
          ]
        }
      ],
      "source": [
        "print (np.mean(v[ix]))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "S5KkmW4lHBHL"
      },
      "source": [
        "There are a few shortcuts to this process in the form of NumPy functions specifically built to handle them, such as `nanmean()`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 503,
      "metadata": {
        "id": "th_l3CojHBHL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "685074fd-73d5-4838-d113-806f36f3f670"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.0\n"
          ]
        }
      ],
      "source": [
        "print (np.nanmean(v))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CYSm8JaqHBHM"
      },
      "source": [
        "The `nanmean()` function simply calculates the mean of the array as if there were no `nan` values at all! There are a few more of these functions, so feel free to read more about them in the [documentation](https://docs.scipy.org/doc/numpy/user/index.html). These indeterminate values are more an issue with data than linear algebra itself so it is helpful that there are ways to handle them."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "w6HW_O7IHBHM"
      },
      "source": [
        "### Conclusion\n",
        "\n",
        "Linear algebra is pervasive in finance and in general. For example, the calculation of *optimal* weights according to modern portfolio theory is done using linear algebra techniques. The arrays and functions in NumPy allow us to handle these calculations in an intuitive way. For a quick intro to linear algebra and how to use NumPy to do more significant matrix calculations, proceed to the next section."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "S3RL2XaeHBHM"
      },
      "source": [
        "## A brief foray into linear algebra\n",
        "\n",
        "Let's start with a basic overview of some linear algebra. Linear algebra comes down to the multiplication and composition of scalar and matrix values. A scalar value is just a real number that we multiply against an array. When we scale a matrix or array using a scalar, we multiply each individual element of that matrix or array by the scalar.\n",
        "\n",
        "A matrix is a collection of values, typically represented by an $m \\times n$ grid, where $m$ is the number of rows and $n$ is the number of columns. The edge lengths $m$ and $n$ do not necessarily have to be different. If we have $m = n$, we call this a square matrix. A particularly interesting case of a matrix is when $m = 1$ or $n = 1$. In this case we have a special case of a matrix that we call a vector. While there is a matrix object in NumPy we will be doing everything using NumPy arrays because they can have dimensions greater than $2$. For the purpose of this section, we will be using matrix and array interchangeably.\n",
        "\n",
        "We can express the matrix equation as:\n",
        "\n",
        "$$ y = A\\cdot x $$\n",
        "\n",
        "Where $A$ is an $m \\times n$ matrix, $y$ is a $m \\times 1$ vector, and $x$ is a $n \\times 1$ vector. On the right-hand side of the equation we are multiplying a matrix by a vector. This requires a little bit more clarification, lest we think that we can go about multiplying any matrices by any other matrices.\n",
        "\n",
        "#### Matrix multiplication\n",
        "\n",
        "With matrix multiplication, the order in which the matrices are multiplied matters. Multiplying a matrix on the left side by another matrix may be just fine, but multiplying on the right may be undefined."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 504,
      "metadata": {
        "collapsed": true,
        "id": "_mdCveHyHBHM"
      },
      "outputs": [],
      "source": [
        "A = np.array([\n",
        "        [1, 2, 3, 12, 6],\n",
        "        [4, 5, 6, 15, 20],\n",
        "        [7, 8, 9, 10, 10]        \n",
        "    ])\n",
        "B = np.array([\n",
        "        [4, 4, 2],\n",
        "        [2, 3, 1],\n",
        "        [6, 5, 8],\n",
        "        [9, 9, 9]\n",
        "    ])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ucJsqPTgHBHM"
      },
      "source": [
        "Notice that the above-defined matrices, $A$ and $B$, have different dimensions. $A$ is $3 \\times 5$ and $B$ is $4 \\times 3$. The general rule of what can and cannot be multiplied in which order is based on the dimensions of the matrices. Specifically, the number of columns in the matrix on the left must be equal to the number of rows in the matrix on the right. In super informal terms, let's say that we have an $m \\times n$ matrix and a $p \\times q$ matrix. If we multiply the first by the second on the right, we get the following:\n",
        "\n",
        "$$ (m \\times n) \\cdot (p \\times q) = (m \\times q) $$\n",
        "\n",
        "So the resultant product has the same number of rows as the left matrix and the same number of columns as the right matrix. This limitation of matrix multiplication with regards to dimensions is important to keep track of when writing code. To demonstrate this, we use the `dot()` function to multiply our matrices below:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 505,
      "metadata": {
        "id": "olOhfTedHBHM",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "04c45ad9-545e-4043-ab2d-4f771e76e298"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-505-39086c8c885f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mA\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mB\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/numpy/core/overrides.py\u001b[0m in \u001b[0;36mdot\u001b[0;34m(*args, **kwargs)\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: shapes (3,5) and (4,3) not aligned: 5 (dim 1) != 4 (dim 0)"
          ]
        }
      ],
      "source": [
        "print (np.dot(A, B))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tAXRuTTsHBHN"
      },
      "source": [
        "These results make sense in accordance with our rule. Multiplying a $3 \\times 5$ matrix on the right by a $4 \\times 3$ matrix results in an error while multiplying a $4 \\times 3$ matrix on the right by a $3 \\times 5$ matrix results in a $4 \\times 5$ matrix."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 506,
      "metadata": {
        "id": "fLaCWrVeHBHN",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "685f77cf-ac1c-4385-b1c8-5ac6f20413e1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 34  44  54 128 124]\n",
            " [ 21  27  33  79  82]\n",
            " [ 82 101 120 227 216]\n",
            " [108 135 162 333 324]]\n"
          ]
        }
      ],
      "source": [
        "print (np.dot(B, A))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wzxdWcAmHBHN"
      },
      "source": [
        "### Portfolio Variance\n",
        "\n",
        "Let's return to our portfolio example from before. We calculated the expected return of the portfolio, but how do we calculate the variance? We start by trying to evaluate the portfolio as a sum of each individual asset, scaled by it's weight.\n",
        "\n",
        "$$ VAR[P] = VAR[\\omega_1 S_1 + \\omega_2 S_2 + \\cdots + \\omega_N S_N] $$\n",
        "\n",
        "Where $S_0, \\cdots, S_N$ are the assets contained within our universe. If all of our assets were independent of each other, we could simply evaluate this as\n",
        "\n",
        "$$ VAR[P] = VAR[\\omega_1 S_1] + VAR[\\omega_2 S_2] + \\cdots + VAR[\\omega_N S_N] = \\omega_1^2\\sigma_1^2 + \\omega_2^2\\sigma_2^2 + \\cdots + \\omega_N^2\\sigma_N^2 $$\n",
        "\n",
        "However, all of our assets depend on each other by their construction. They are all in some way related to our base asset and therefore each other. We thus have to calculate the variance of the portfolio by including the individual pairwise covariances of each asset. Our formula for the variance of the portfolio:\n",
        "\n",
        "$$ VAR[P] = \\sigma_P^2 = \\sum_i \\omega_i^2\\sigma_i^2 + \\sum_i\\sum_{i\\neq j} \\omega_i\\omega_j\\sigma_i\\sigma_j\\rho_{i, j}, \\ i, j \\in \\lbrace 1, 2, \\cdots, N \\rbrace $$\n",
        "\n",
        "Where $\\rho_{i,j}$ is the correlation between $S_i$ and $S_j$, $\\rho_{i, j} = \\frac{COV[S_i, S_j]}{\\sigma_i\\sigma_j}$. This seems exceedingly complicated, but we can easily handle all of this using NumPy arrays. First, we calculate the covariance matrix that relates all the individual stocks in our universe."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 507,
      "metadata": {
        "id": "ij-oswm1HBHN",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "abeea9c5-6495-4825-9e62-f40770d56d87"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0.00062693 0.0006284  0.00061902 0.00062062 0.00060737 0.00057451\n",
            "  0.00062343 0.0006286  0.00066724 0.00060492]\n",
            " [0.0006284  0.00098057 0.00057555 0.00061915 0.00062319 0.00055904\n",
            "  0.00058631 0.00063804 0.00061967 0.00063489]\n",
            " [0.00061902 0.00057555 0.00098311 0.00056729 0.00060141 0.00051654\n",
            "  0.00062495 0.00060082 0.00067683 0.00063671]\n",
            " [0.00062062 0.00061915 0.00056729 0.00102989 0.00056279 0.00048945\n",
            "  0.00052902 0.00061754 0.0005964  0.00058181]\n",
            " [0.00060737 0.00062319 0.00060141 0.00056279 0.0009713  0.00054881\n",
            "  0.00066288 0.00055164 0.00066331 0.00062409]\n",
            " [0.00057451 0.00055904 0.00051654 0.00048945 0.00054881 0.00088501\n",
            "  0.00063294 0.00051324 0.00072704 0.00050895]\n",
            " [0.00062343 0.00058631 0.00062495 0.00052902 0.00066288 0.00063294\n",
            "  0.00111374 0.00056773 0.00071889 0.00049883]\n",
            " [0.0006286  0.00063804 0.00060082 0.00061754 0.00055164 0.00051324\n",
            "  0.00056773 0.00101274 0.00064743 0.00059986]\n",
            " [0.00066724 0.00061967 0.00067683 0.0005964  0.00066331 0.00072704\n",
            "  0.00071889 0.00064743 0.00114498 0.0005811 ]\n",
            " [0.00060492 0.00063489 0.00063671 0.00058181 0.00062409 0.00050895\n",
            "  0.00049883 0.00059986 0.0005811  0.00106619]]\n"
          ]
        }
      ],
      "source": [
        "cov_mat = np.cov(returns)\n",
        "print (cov_mat)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7KplrG4QHBHN"
      },
      "source": [
        "This array is not formatted particularly nicely, but a covariance matrix is a very important concept. The covariance matrix is of the form:\n",
        "\n",
        "$$ \\left[\\begin{matrix}\n",
        "VAR[S_1] & COV[S_1, S_2] & \\cdots & COV[S_1, S_N] \\\\\n",
        "COV[S_2, S_1] & VAR[S_2] & \\cdots & COV[S_2, S_N] \\\\\n",
        "\\vdots & \\vdots & \\ddots & \\vdots \\\\\n",
        "COV[S_N, S_1] & COV[S_N, S_2] & \\cdots & VAR[S_N]\n",
        "\\end{matrix}\\right] $$\n",
        "\n",
        "So each diagonal entry is the variance of that asset at that index and each off-diagonal holds the covariance of two assets indexed by the column and row number. What is important is that once we have the covariance matrix we are able to do some very quick linear algebra to calculate the variance of the overall portfolio. We can represent the variance of the portfolio in array form as:\n",
        "\n",
        "$$ \\sigma_p^2 = \\omega \\ C \\ \\omega^\\intercal$$\n",
        "\n",
        "Where $C$ is the covariance matrix of all the assets and $\\omega$ is the array containing the weights of each individual asset. The superscript $\\intercal$ on the second $\\omega$ listed above denotes the **transpose** of $\\omega$. For a reference on the evaluation of the variance of a portfolio as a matrix equation, please see the Wikipedia article on [modern portfolio theory](https://en.wikipedia.org/wiki/Modern_portfolio_theory).\n",
        "\n",
        "The transpose of an array is what you get when you switch the rows and columns of an array. This has the effect of reflecting an array across what you might imagine as a diagonal. For example, take our array $A$ from before:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 508,
      "metadata": {
        "id": "kDlUVI4BHBHN",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2f3b793e-311f-47c3-9ae1-8809851ec503"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 1  2  3 12  6]\n",
            " [ 4  5  6 15 20]\n",
            " [ 7  8  9 10 10]]\n"
          ]
        }
      ],
      "source": [
        "print (A)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "w8Is5m9VHBHO"
      },
      "source": [
        "The transpose looks like a mirror image of the same array."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 509,
      "metadata": {
        "id": "Xip_lJLtHBHO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dc882e45-d8e5-4e0a-e94b-0304a3165ddf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 1  4  7]\n",
            " [ 2  5  8]\n",
            " [ 3  6  9]\n",
            " [12 15 10]\n",
            " [ 6 20 10]]\n"
          ]
        }
      ],
      "source": [
        "print (np.transpose(A))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XIvEKOu-HBHO"
      },
      "source": [
        "But $\\omega$ here is a 1-dimensional array, a vector! It makes perfect to take the transpose of $A$, a $3 \\times 5$ array, as the output will be a $5 \\times 3$ array, but a 1-dimensional array is not quite as intuitive. A typical 1-dimensional array can be thought of as a $1 \\times n$ horizontal vector. Thus, taking the tranpose of this array essentially means changing it into a $n \\times 1$ vertical vector. This makes sense because 1-dimensional arrays are still arrays and any multiplication done between 1-dimensional and higher dimensional arrays must keep in line with our dimensionality issue of matrix multiplication.\n",
        "\n",
        "To make a long story short, we think of $\\omega$ as $1 \\times N$ since we have $N$ securities. This makes it so that $\\omega^\\intercal$ is $N \\times 1$. Again, our covariance matrix is $N \\times N$. So the overall multiplication works out like so, in informal terms:\n",
        "\n",
        "$$ \\text{Dimensions}(\\sigma_p^2) = \\text{Dimensions}(\\omega C \\omega^\\intercal) = (1 \\times N)\\cdot (N \\times N)\\cdot (N \\times 1) = (1 \\times 1)$$\n",
        "\n",
        "Multiplying the covariance matrix on the left by the plain horizontal vector and on the right by that vector's transpose results in the calculation of a single scalar ($1 \\times 1$) value, our portfolio's variance.\n",
        "\n",
        "So knowing this, let's proceed and calculate the portfolio variance! We can easily calculate the product of these arrays by using `dot()` for matrix multiplication, though this time we have to do it twice."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 510,
      "metadata": {
        "id": "VE5Ospd4HBHO",
        "scrolled": false,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d0dfa965-beb5-4741-a1f7-e98d483bebf7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Portfolio volatility:  0.025531684346297285\n"
          ]
        }
      ],
      "source": [
        "# Calculating the portfolio volatility\n",
        "var_p = np.dot(np.dot(weights, cov_mat), weights.T)\n",
        "vol_p = np.sqrt(var_p)\n",
        "print (\"Portfolio volatility: \", vol_p)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DO5FGgTXHBHO"
      },
      "source": [
        "To confirm this calculation, let's simply evaluate the volatility of the portfolio using only NumPy functions."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 511,
      "metadata": {
        "id": "UrBAgZKUHBHO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2bbd927b-1c1b-4e9a-870b-e46dc769bc07"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Portfolio volatility:  0.025531684346297275\n"
          ]
        }
      ],
      "source": [
        "# Confirming calculation\n",
        "vol_p_alt = np.sqrt(np.var(np.dot(weights, returns), ddof=1))\n",
        "print (\"Portfolio volatility: \", vol_p_alt)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "B5ysQYmaHBHP"
      },
      "source": [
        "The `ddof` parameter is a simple integer input that tells the function the number of degrees of freedom to take into account. This is a more statistical concept, but what this tells us that our matrix calculation is correct!\n",
        "\n",
        "A lot of this might not make sense at first glance. It helps to go back and forth between the theory and the code representations until you have a better grasp of the mathematics involved. It is definitely not necessary to be an expert on linear algebra and on matrix operations, but linear algebra can help to streamline the process of working with large amounts of data. For further reading on NumPy, check out the [documentation](https://docs.scipy.org/doc/numpy/user/index.html)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bgFMYg12HBHP"
      },
      "source": [
        "*This presentation is for informational purposes only and does not constitute an offer to sell, a solicitation to buy, or a recommendation for any security; nor does it constitute an offer to provide investment advisory or other services by Quantopian, Inc. (\"Quantopian\"). Nothing contained herein constitutes investment advice or offers any opinion with respect to the suitability of any security, and any views expressed herein should not be taken as advice to buy, sell, or hold any security or as an endorsement of any security or company.  In preparing the information contained herein, Quantopian, Inc. has not taken into account the investment needs, objectives, and financial circumstances of any particular investor. Any views expressed and data illustrated herein were prepared based upon information, believed to be reliable, available to Quantopian, Inc. at the time of publication. Quantopian makes no guarantees as to their accuracy or completeness. All information is subject to change and may quickly become unreliable for various reasons, including changes in market conditions or economic circumstances.*"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "o9rN1ox_WUVf"
      },
      "source": [
        "<div align=\"center\">\n",
        "<img style=\"display: block; margin: auto;\" alt=\"photo\" src=\"https://upload.wikimedia.org/wikipedia/en/d/de/Quantopian_logo_2017.png\">\n",
        "</div> \n",
        "\n",
        "# Introduction to pandas\n",
        "by Maxwell Margenot\n",
        "\n",
        "Part of the Quantopian Lecture Series:\n",
        "\n",
        "* [www.quantopian.com/lectures](https://www.quantopian.com/lectures)\n",
        "* [github.com/quantopian/research_public](https://github.com/quantopian/research_public)\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M0wRHgUuWUVf"
      },
      "source": [
        "pandas is a Python library that provides a collection of powerful data structures to better help you manage data. In this lecture, we will cover how to use the `Series` and `DataFrame` objects to handle data. These objects have a strong integration with NumPy, covered elsewhere in the [lecture series](http://www.quantopian.com/lectures#Introduction-to-NumPy), allowing us to easily do the necessary statistical and mathematical calculations that we need for finance."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 512,
      "metadata": {
        "id": "ddukGiVJWUVf"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "02jmKAoOWUVf"
      },
      "source": [
        "With pandas, it is easy to store, visualize, and perform calculations on your data. With only a few lines of code we can modify our data and present it in an easily-understandable way. Here we simulate some returns in NumPy, put them into a pandas `DataFrame`, and perform calculations to turn them into prices and plot them, all only using a few lines of code."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 513,
      "metadata": {
        "id": "XKsuLeNHWUVf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "4a713c26-4115-4d47-c170-5bc8dbc5bc60"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "returns = pd.DataFrame(np.random.normal(1.0, 0.03, (100, 10)))\n",
        "prices = returns.cumprod()\n",
        "prices.plot()\n",
        "plt.title('Randomly-generated Prices')\n",
        "plt.xlabel('Time')\n",
        "plt.ylabel('Price')\n",
        "plt.legend(loc=0);"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BwPET7h_WUVf"
      },
      "source": [
        "So let's have a look at how we actually build up to this point!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XAXDA7ePWUVg"
      },
      "source": [
        "## pandas Data Structures\n",
        "\n",
        "### `Series`\n",
        "\n",
        "A pandas `Series` is a 1-dimensional array with labels that can contain any data type. We primarily use them for handling time series data. Creating a `Series` is as easy as calling `pandas.Series()` on a Python list or NumPy array."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 514,
      "metadata": {
        "id": "PmBPiEATWUVg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6dfa78f7-65b2-424a-f325-d54e473e5904"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0    1.0\n",
            "1    2.0\n",
            "2    NaN\n",
            "3    4.0\n",
            "4    5.0\n",
            "dtype: float64\n"
          ]
        }
      ],
      "source": [
        "s = pd.Series([1, 2, np.nan, 4, 5])\n",
        "print (s)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 121**"
      ],
      "metadata": {
        "id": "LiYQ7_Y2cERA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "g = pd.Series([4,8,9,np.nan,1])\n",
        "print(g)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j8LVcwtYcGGS",
        "outputId": "2240f248-2c33-4ab5-dc2b-05f77d187d99"
      },
      "execution_count": 515,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0    4.0\n",
            "1    8.0\n",
            "2    9.0\n",
            "3    NaN\n",
            "4    1.0\n",
            "dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SqNGFmp4WUVg"
      },
      "source": [
        "Every `Series` has a name. We can give the series a name as a parameter or we can define it afterwards by directly accessing the name attribute. In this case, we have given our time series no name so the attribute should be empty."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 516,
      "metadata": {
        "id": "KPlx1cJBWUVg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7c01c41c-41d2-42db-ae58-ff24b46cedca"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "None\n"
          ]
        }
      ],
      "source": [
        "print (s.name)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 122**"
      ],
      "metadata": {
        "id": "rwn5ur9jcjaU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print (g.name)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J8qLIwXVclTn",
        "outputId": "3c252178-194f-417f-9439-758e13d7d264"
      },
      "execution_count": 517,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jYHbrf__WUVg"
      },
      "source": [
        "This name can be directly modified with no repercussions."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 518,
      "metadata": {
        "id": "sQhOcL4QWUVg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fd48bf3c-409c-42f0-ab93-37b9cf9d327d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Toy Series\n"
          ]
        }
      ],
      "source": [
        "s.name = \"Toy Series\"\n",
        "print (s.name)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 123**"
      ],
      "metadata": {
        "id": "jHWYucdVcYV3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "g.name = \"MN\"\n",
        "print(g.name)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fUauDeCKcaz-",
        "outputId": "c6223d3c-c501-4616-f2c3-a5830bc6bf10"
      },
      "execution_count": 525,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MN\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ELgJbaEEWUVg"
      },
      "source": [
        "We call the collected axis labels of a `Series` its index. An index can either passed to a `Series` as a parameter or added later, similarly to its name. In the absence of an index, a `Series` will simply contain an index composed of integers, starting at $0$, as in the case of our \"Toy Series\"."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 526,
      "metadata": {
        "id": "H5nmCkjeWUVg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3e7490b7-428d-4614-dc9c-ed120c2e3eb7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RangeIndex(start=0, stop=5, step=1)\n"
          ]
        }
      ],
      "source": [
        "print (s.index)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 124**"
      ],
      "metadata": {
        "id": "Hz_jmsy_csij"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print (g.index)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FpCvKWiOcvIA",
        "outputId": "3f107073-208e-4945-c61b-7c9017bd30e3"
      },
      "execution_count": 527,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RangeIndex(start=0, stop=5, step=1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-MXhbtSJWUVg"
      },
      "source": [
        "pandas has a built-in function specifically for creating date indices, `date_range()`. We use the function here to create a new index for `s`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 522,
      "metadata": {
        "id": "m3XY7XukWUVg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8e9aad8c-95c3-471b-a293-d30465d8f450"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DatetimeIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n",
            "               '2016-01-05'],\n",
            "              dtype='datetime64[ns]', freq='D')\n"
          ]
        }
      ],
      "source": [
        "new_index = pd.date_range(\"2016-01-01\", periods=len(s), freq=\"D\")\n",
        "print (new_index)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 125**"
      ],
      "metadata": {
        "id": "JvppnDyHc3kv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "newind = pd.date_range('2023-02-24', periods=len(g), freq=\"Y\")\n",
        "print(newind)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wtgCYJgYc6tA",
        "outputId": "3e66f5b8-793b-41e3-b147-e2f444a64e77"
      },
      "execution_count": 524,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DatetimeIndex(['2023-12-31', '2024-12-31', '2025-12-31', '2026-12-31',\n",
            "               '2027-12-31'],\n",
            "              dtype='datetime64[ns]', freq='A-DEC')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5BWf6tXXWUVg"
      },
      "source": [
        "An index must be exactly the same length as the `Series` itself. Each index must match one-to-one with each element of the `Series`. Once this is satisfied, we can directly modify the `Series` index, as with the name, to use our new and more informative index (relatively speaking)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 528,
      "metadata": {
        "id": "h7Ae0YWzWUVh",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3095b786-8103-4f0a-a608-afe142ba35f0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DatetimeIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n",
            "               '2016-01-05'],\n",
            "              dtype='datetime64[ns]', freq='D')\n"
          ]
        }
      ],
      "source": [
        "s.index = new_index\n",
        "print (s.index)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 126**"
      ],
      "metadata": {
        "id": "z9UjB1a9dVyb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "g.index = newind\n",
        "print(g.index)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ms9vU4M4dYTZ",
        "outputId": "09727ac2-c050-47a5-d972-55f8b9ffc9ca"
      },
      "execution_count": 529,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DatetimeIndex(['2023-12-31', '2024-12-31', '2025-12-31', '2026-12-31',\n",
            "               '2027-12-31'],\n",
            "              dtype='datetime64[ns]', freq='A-DEC')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RPJzF0-nWUVh"
      },
      "source": [
        "The index of the `Series` is crucial for handling time series, which we will get into a little later."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iE5pucOdWUVh"
      },
      "source": [
        "#### Accessing `Series` Elements\n",
        "\n",
        "`Series` are typically accessed using the `iloc[]` and `loc[]` methods. We use `iloc[]` to access elements by integer index and we use `loc[]` to access the index of the Series."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 530,
      "metadata": {
        "id": "3s5J5BccWUVh",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "eeb8871b-1364-4b44-e919-27b9f2cb358a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "First element of the series:  1.0\n",
            "Last element of the series:  5.0\n"
          ]
        }
      ],
      "source": [
        "print (\"First element of the series: \", s.iloc[0])\n",
        "print (\"Last element of the series: \", s.iloc[len(s)-1])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 127**"
      ],
      "metadata": {
        "id": "Zf34bVkHdf4H"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print (\"First element: \", g.iloc[0])\n",
        "print (\"Last element: \", g.iloc[len(g)-1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nGvkMGMidh3f",
        "outputId": "4dc3f3ae-8f2d-4a8a-ce9a-2b8a723edef2"
      },
      "execution_count": 531,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "First element:  4.0\n",
            "Last element:  1.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4BOdPHyUWUVh"
      },
      "source": [
        "We can slice a `Series` similarly to our favorite collections, Python lists and NumPy arrays. We use the colon operator to indicate the slice."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 532,
      "metadata": {
        "id": "mmtAJ2c1WUVh",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d704e139-2d61-430c-e335-80254b7e00ce"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2016-01-01    1.0\n",
              "2016-01-02    2.0\n",
              "Freq: D, Name: Toy Series, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 532
        }
      ],
      "source": [
        "s.iloc[:2]"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 128**"
      ],
      "metadata": {
        "id": "Z-KZzk71d2u5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "g.iloc[:4]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lmaqWuSxd5CJ",
        "outputId": "6e5bfe5c-d00e-41be-8895-f950af676ada"
      },
      "execution_count": 533,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2023-12-31    4.0\n",
              "2024-12-31    8.0\n",
              "2025-12-31    9.0\n",
              "2026-12-31    NaN\n",
              "Freq: A-DEC, Name: MN, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 533
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EWA1vFxfWUVh"
      },
      "source": [
        "When creating a slice, we have the options of specifying a beginning, an end, and a step. The slice will begin at the start index, and take steps of size `step` until it passes the end index, not including the end."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 534,
      "metadata": {
        "id": "5J7S8NJ7WUVh",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "219d9591-a0a2-4bac-88c4-6e0e4eb34a0e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2016-01-01    1.0\n",
              "2016-01-02    2.0\n",
              "2016-01-03    NaN\n",
              "2016-01-04    4.0\n",
              "Freq: D, Name: Toy Series, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 534
        }
      ],
      "source": [
        "start = 0\n",
        "end = len(s) - 1\n",
        "step = 1\n",
        "\n",
        "s.iloc[start:end:step]"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 129**"
      ],
      "metadata": {
        "id": "5oBIMIWWd9S7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "start = 0\n",
        "end = len(g)-1\n",
        "step = 1\n",
        "g.iloc[start:end:step]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2hfLGsySd_Z0",
        "outputId": "19542c29-1c06-4200-d403-3edf35a32792"
      },
      "execution_count": 535,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2023-12-31    4.0\n",
              "2024-12-31    8.0\n",
              "2025-12-31    9.0\n",
              "2026-12-31    NaN\n",
              "Freq: A-DEC, Name: MN, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 535
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uWT9BL9GWUVh"
      },
      "source": [
        "We can even reverse a `Series` by specifying a negative step size. Similarly, we can index the start and end with a negative integer value."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 536,
      "metadata": {
        "id": "Af7qDShLWUVh",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fbf6253e-eeaf-4238-9f80-e133b52688ad"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2016-01-05    5.0\n",
              "2016-01-04    4.0\n",
              "2016-01-03    NaN\n",
              "2016-01-02    2.0\n",
              "2016-01-01    1.0\n",
              "Freq: -1D, Name: Toy Series, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 536
        }
      ],
      "source": [
        "s.iloc[::-1]"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 130**"
      ],
      "metadata": {
        "id": "GshlX5DsePAV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "g.iloc[::-2]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0N3FFLfJeRM7",
        "outputId": "2e214920-b9d7-4459-fc22-724172421ff9"
      },
      "execution_count": 537,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2027-12-31    1.0\n",
              "2025-12-31    9.0\n",
              "2023-12-31    4.0\n",
              "Freq: -2A-DEC, Name: MN, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 537
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SWPyoy8mWUVi"
      },
      "source": [
        "This returns a slice of the series that starts from the second to last element and ends at the third to last element (because the fourth to last is not included, taking steps of size $1$)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 538,
      "metadata": {
        "id": "XA1wjMqDWUVi",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1eef0a43-246f-41fe-f203-d2eb39dc07bf"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2016-01-04    4.0\n",
              "2016-01-03    NaN\n",
              "Freq: -1D, Name: Toy Series, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 538
        }
      ],
      "source": [
        "s.iloc[-2:-4:-1]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ItqK6nNuWUVi"
      },
      "source": [
        "We can also access a series by using the values of its index. Since we indexed `s` with a collection of dates (`Timestamp` objects) we can look at the value contained in `s` for a particular date."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 539,
      "metadata": {
        "id": "ZVLzaxcWWUVi",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "07ee49da-6844-4e6b-d6c7-5531c5b54e4e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0"
            ]
          },
          "metadata": {},
          "execution_count": 539
        }
      ],
      "source": [
        "s.loc['2016-01-01']"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RrZJp46RWUVi"
      },
      "source": [
        "Or even for a range of dates!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 540,
      "metadata": {
        "id": "j2CUPNuaWUVi",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "90116900-9ffc-4252-ccb9-8b1948b2a235"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2016-01-02    2.0\n",
              "2016-01-03    NaN\n",
              "2016-01-04    4.0\n",
              "Freq: D, Name: Toy Series, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 540
        }
      ],
      "source": [
        "s.loc['2016-01-02':'2016-01-04']"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yZP8Pze7WUVi"
      },
      "source": [
        "With `Series`, we *can* just use the brackets (`[]`) to access elements, but this is not best practice. The brackets are ambiguous because they can be used to access `Series` (and `DataFrames`) using both index and integer values and the results will change based on context (especially with `DataFrames`)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-X9AIHIcWUVi"
      },
      "source": [
        "#### Boolean Indexing\n",
        "\n",
        "In addition to the above-mentioned access methods, you can filter `Series` using boolean arrays. `Series` are compatible with your standard comparators. Once compared with whatever condition you like, you get back yet another `Series`, this time filled with boolean values."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 541,
      "metadata": {
        "id": "eGLYHgfxWUVi",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3ce45afb-bbc2-4e7a-9530-4e0e89c0f94f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2016-01-01     True\n",
            "2016-01-02     True\n",
            "2016-01-03    False\n",
            "2016-01-04    False\n",
            "2016-01-05    False\n",
            "Freq: D, Name: Toy Series, dtype: bool\n"
          ]
        }
      ],
      "source": [
        "print (s < 3)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 131**"
      ],
      "metadata": {
        "id": "qZABGJjjeXxm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print (g>4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e7pHB5C8ebUI",
        "outputId": "0975db19-3436-4eef-cdaa-72267a95e57b"
      },
      "execution_count": 542,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2023-12-31    False\n",
            "2024-12-31     True\n",
            "2025-12-31     True\n",
            "2026-12-31    False\n",
            "2027-12-31    False\n",
            "Freq: A-DEC, Name: MN, dtype: bool\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IdFD3xhbWUVi"
      },
      "source": [
        "We can pass *this* `Series` back into the original `Series` to filter out only the elements for which our condition is `True`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 543,
      "metadata": {
        "id": "m90FHdY_WUVi",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bbfb3aa5-b54b-4ebd-8a00-a601a2bfb1c1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2016-01-01    1.0\n",
            "2016-01-02    2.0\n",
            "Freq: D, Name: Toy Series, dtype: float64\n"
          ]
        }
      ],
      "source": [
        "print (s.loc[s < 3])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 132**"
      ],
      "metadata": {
        "id": "EW5TtjgfeoOY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(g.loc[g>6])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nz1nAkzTeqgV",
        "outputId": "20747109-2738-4a9c-8c8a-abfda22babba"
      },
      "execution_count": 544,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024-12-31    8.0\n",
            "2025-12-31    9.0\n",
            "Freq: A-DEC, Name: MN, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8xtHks1TWUVj"
      },
      "source": [
        "If we so desire, we can group multiple conditions together using the logical operators `&`, `|`, and `~` (and, or, and not, respectively)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 545,
      "metadata": {
        "id": "n3DOVLJ-WUVj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9cbef235-0872-446d-fd69-82d01694eae7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2016-01-02    2.0\n",
            "Freq: D, Name: Toy Series, dtype: float64\n"
          ]
        }
      ],
      "source": [
        "print (s.loc[(s < 3) & (s > 1)])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ogp1hxPoWUVj"
      },
      "source": [
        "This is very convenient for getting only elements of a `Series` that fulfill specific criteria that we need. It gets even more convenient when we are handling `DataFrames`."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dTxVocTZWUVj"
      },
      "source": [
        "#### Indexing and Time Series\n",
        "\n",
        "Since we use `Series` for handling time series, it's worth covering a little bit of how we handle the time component. For our purposes we use pandas `Timestamp` objects. Let's pull a full time series, complete with all the appropriate labels, by using our `get_pricing()` method. All data pulled with `get_pricing()` or using our Pipeline API will be in either `Series` or `DataFrame` format. We can modify this index however we like."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 546,
      "metadata": {
        "id": "WYLYzqjHWUVj",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "34fb07c5-8df8-40f5-be2b-11dc37305f3d"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-546-d2399827e481>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mstart\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"2012-01-01\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mend\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"2016-01-01\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mprices\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mget_pricing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msymbol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart_date\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstart\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend_date\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfields\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"price\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'get_pricing' is not defined"
          ]
        }
      ],
      "source": [
        "symbol = \"CMG\"\n",
        "start = \"2012-01-01\"\n",
        "end = \"2016-01-01\"\n",
        "prices = (get_pricing(symbol, start_date=start, end_date=end, fields=\"price\"))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Fjp1HyOGWUVj"
      },
      "source": [
        "We can display the first few elements of our series by using the `head()` method and specifying the number of elements that we want. The analogous method for the last few elements is `tail()`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 547,
      "metadata": {
        "id": "Zuk7RuqIWUVj",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "outputId": "cc2dada2-24bd-4ba8-9e34-af74751f7f57"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " <class 'pandas.core.frame.DataFrame'>\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          0         1         2         3         4         5         6  \\\n",
              "0  1.007346  0.981841  0.977915  0.986911  1.003548  0.985814  1.011343   \n",
              "1  0.995010  0.982784  0.930302  1.007979  0.987780  1.004867  1.016462   \n",
              "2  1.014507  0.979461  0.911670  0.994133  0.982287  1.015997  1.056143   \n",
              "3  1.002013  0.954792  0.900662  1.021865  0.973629  1.049051  1.055247   \n",
              "4  1.067582  0.992955  0.867712  0.984970  0.997916  1.070905  1.066097   \n",
              "\n",
              "          7         8         9  \n",
              "0  0.999718  1.016960  0.968264  \n",
              "1  0.974010  0.989420  0.953660  \n",
              "2  0.985023  1.016895  0.997951  \n",
              "3  0.964175  1.034740  0.988246  \n",
              "4  1.015401  0.986589  1.007328  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-76c50052-876c-4e7f-92c2-920d7bf84f09\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.007346</td>\n",
              "      <td>0.981841</td>\n",
              "      <td>0.977915</td>\n",
              "      <td>0.986911</td>\n",
              "      <td>1.003548</td>\n",
              "      <td>0.985814</td>\n",
              "      <td>1.011343</td>\n",
              "      <td>0.999718</td>\n",
              "      <td>1.016960</td>\n",
              "      <td>0.968264</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.995010</td>\n",
              "      <td>0.982784</td>\n",
              "      <td>0.930302</td>\n",
              "      <td>1.007979</td>\n",
              "      <td>0.987780</td>\n",
              "      <td>1.004867</td>\n",
              "      <td>1.016462</td>\n",
              "      <td>0.974010</td>\n",
              "      <td>0.989420</td>\n",
              "      <td>0.953660</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.014507</td>\n",
              "      <td>0.979461</td>\n",
              "      <td>0.911670</td>\n",
              "      <td>0.994133</td>\n",
              "      <td>0.982287</td>\n",
              "      <td>1.015997</td>\n",
              "      <td>1.056143</td>\n",
              "      <td>0.985023</td>\n",
              "      <td>1.016895</td>\n",
              "      <td>0.997951</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.002013</td>\n",
              "      <td>0.954792</td>\n",
              "      <td>0.900662</td>\n",
              "      <td>1.021865</td>\n",
              "      <td>0.973629</td>\n",
              "      <td>1.049051</td>\n",
              "      <td>1.055247</td>\n",
              "      <td>0.964175</td>\n",
              "      <td>1.034740</td>\n",
              "      <td>0.988246</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.067582</td>\n",
              "      <td>0.992955</td>\n",
              "      <td>0.867712</td>\n",
              "      <td>0.984970</td>\n",
              "      <td>0.997916</td>\n",
              "      <td>1.070905</td>\n",
              "      <td>1.066097</td>\n",
              "      <td>1.015401</td>\n",
              "      <td>0.986589</td>\n",
              "      <td>1.007328</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-76c50052-876c-4e7f-92c2-920d7bf84f09')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-76c50052-876c-4e7f-92c2-920d7bf84f09 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-76c50052-876c-4e7f-92c2-920d7bf84f09');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 547
        }
      ],
      "source": [
        "print (\"\\n\", type(prices))\n",
        "prices.head(5) "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "h6vrSq_RWUVj"
      },
      "source": [
        "As with our toy example, we can specify a name for our time series, if only to clarify the name the `get_pricing()` provides us."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 548,
      "metadata": {
        "scrolled": true,
        "id": "8Yzdxg0-WUVj",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 328
        },
        "outputId": "b844bf23-c887-4287-fcd2-269de3c9677e"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-548-372b1d2821ed>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'Old name: '\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msymbol\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'New name: '\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5485\u001b[0m         ):\n\u001b[1;32m   5486\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5487\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5488\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5489\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'name'"
          ]
        }
      ],
      "source": [
        "print ('Old name: ', prices.name)\n",
        "prices.name = symbol\n",
        "print ('New name: ', prices.name)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ML41OEGDWUVj"
      },
      "source": [
        "Let's take a closer look at the `DatetimeIndex` of our `prices` time series."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 549,
      "metadata": {
        "id": "l1dp5TQvWUVj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0e5f03de-5e3e-4edf-f902-4159a4381f1f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RangeIndex(start=0, stop=100, step=1)\n"
          ]
        }
      ],
      "source": [
        "print (prices.index)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gR4EHUb-WUVk"
      },
      "source": [
        "Notice that this `DatetimeIndex` has a collection of associated information. In particular it has an associated frequency (`freq`) and an associated timezone (`tz`). The frequency indicates whether the data is daily vs monthly vs some other period while the timezone indicates what locale this index is relative to. We can modify all of this extra information!\n",
        "\n",
        "If we resample our `Series`, we can adjust the frequency of our data. We currently have daily data (excluding weekends) because `get_pricing()` pulls only data from market days. Let's up-sample from this daily data to monthly data using the `resample()` method."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 550,
      "metadata": {
        "id": "YSgbAvGFWUVk",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 334
        },
        "outputId": "5b1722b5-da29-431a-8abf-0d123d7461c1"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-550-a1ca7dcf26dc>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmonthly_prices\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'M'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mmonthly_prices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mresample\u001b[0;34m(self, rule, axis, closed, label, convention, kind, loffset, base, on, level, origin, offset)\u001b[0m\n\u001b[1;32m  10348\u001b[0m         \u001b[0moffset\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTimedeltaConvertibleTypes\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m  10349\u001b[0m     ) -> Resampler:\n\u001b[0;32m> 10350\u001b[0;31m         return super().resample(\n\u001b[0m\u001b[1;32m  10351\u001b[0m             \u001b[0mrule\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrule\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m  10352\u001b[0m             \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mresample\u001b[0;34m(self, rule, axis, closed, label, convention, kind, loffset, base, on, level, origin, offset)\u001b[0m\n\u001b[1;32m   8124\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   8125\u001b[0m         \u001b[0maxis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_axis_number\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 8126\u001b[0;31m         return get_resampler(\n\u001b[0m\u001b[1;32m   8127\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   8128\u001b[0m             \u001b[0mfreq\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrule\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/resample.py\u001b[0m in \u001b[0;36mget_resampler\u001b[0;34m(obj, kind, **kwds)\u001b[0m\n\u001b[1;32m   1380\u001b[0m     \"\"\"\n\u001b[1;32m   1381\u001b[0m     \u001b[0mtg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTimeGrouper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1382\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mtg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_resampler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkind\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1383\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1384\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/resample.py\u001b[0m in \u001b[0;36m_get_resampler\u001b[0;34m(self, obj, kind)\u001b[0m\n\u001b[1;32m   1556\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mTimedeltaIndexResampler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroupby\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1557\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1558\u001b[0;31m         raise TypeError(\n\u001b[0m\u001b[1;32m   1559\u001b[0m             \u001b[0;34m\"Only valid with DatetimeIndex, \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1560\u001b[0m             \u001b[0;34m\"TimedeltaIndex or PeriodIndex, \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: Only valid with DatetimeIndex, TimedeltaIndex or PeriodIndex, but got an instance of 'RangeIndex'"
          ]
        }
      ],
      "source": [
        "monthly_prices = prices.resample('M')\n",
        "monthly_prices.head(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "V9CkYiw_WUVk"
      },
      "source": [
        "The `resample()` method defaults to using the mean of the lower level data to create the higher level data. We can specify how else we might want the up-sampling to be calculated by specifying the `how` parameter."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 552,
      "metadata": {
        "id": "2Epbp_7GWUVk",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 186
        },
        "outputId": "93e5ad25-b65b-468d-a63c-5deef7c95699"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-552-84fa9fd4b047>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmonthly_prices_med\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'M'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'median'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mmonthly_prices_med\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: resample() got an unexpected keyword argument 'how'"
          ]
        }
      ],
      "source": [
        "monthly_prices_med = prices.resample('M', how='median')\n",
        "monthly_prices_med.head(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7XmFb8kZWUVk"
      },
      "source": [
        "We can even specify how we want the calculation of the new period to be done. Here we create a `custom_resampler()` function that will return the first value of the period. In our specific case, this will return a `Series` where the monthly value is the first value of that month."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 551,
      "metadata": {
        "id": "SQCKAbYLWUVk",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 222
        },
        "outputId": "287b188e-ab61-4db5-bec5-98662098de1f"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-551-c45e2e1b4822>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0marray_like\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mfirst_of_month_prices\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'M'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcustom_resampler\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mfirst_of_month_prices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: resample() got an unexpected keyword argument 'how'"
          ]
        }
      ],
      "source": [
        "def custom_resampler(array_like):\n",
        "    \"\"\" Returns the first value of the period \"\"\"\n",
        "    return array_like[0]\n",
        "\n",
        "first_of_month_prices = prices.resample('M', how=custom_resampler)\n",
        "first_of_month_prices.head(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gfY9Vey4WUVk"
      },
      "source": [
        "We can also adjust the timezone of a `Series` to adapt the time of real-world data. In our case, our time series is already localized to UTC, but let's say that we want to adjust the time to be 'US/Eastern'. In this case we use the `tz_convert()` method, since the time is already localized."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "x4JvuF87WUVk"
      },
      "outputs": [],
      "source": [
        "eastern_prices = prices.tz_convert('US/Eastern')\n",
        "eastern_prices.head(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-dkMrKm2WUVk"
      },
      "source": [
        "In addition to the capacity for timezone and frequency management, each time series has a built-in `reindex()` method that we can use to realign the existing data according to a new set of index labels. If data does not exist for a particular label, the data will be filled with a placeholder value. This is typically `np.nan`, though we can provide a fill method.\n",
        "\n",
        "The data that we `get_pricing()` only includes market days. But what if we want prices for every single calendar day? This will include holidays and weekends, times when you normally cannot trade equities.  First let's create a new `DatetimeIndex` that contains all that we want."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": false,
        "id": "MGwqCzSYWUVk"
      },
      "outputs": [],
      "source": [
        "calendar_dates = pd.date_range(start=start, end=end, freq='D', tz='UTC')\n",
        "print (calendar_dates)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9Xj-S57GWUVl"
      },
      "source": [
        "Now let's use this new set of dates to reindex our time series. We tell the function that the fill method that we want is `ffill`. This denotes \"forward fill\". Any `NaN` values will be filled by the *last value* listed. So the price on the weekend or on a holiday will be listed as the price on the last market day that we know about."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8sIdKskWWUVl"
      },
      "outputs": [],
      "source": [
        "calendar_prices = prices.reindex(calendar_dates, method='ffill')\n",
        "calendar_prices.head(15)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AylilkKPWUVl"
      },
      "source": [
        "You'll notice that we still have a couple of `NaN` values right at the beginning of our time series. This is because the first of January in 2012 was a Sunday and the second was a market holiday! Because these are the earliest data points and we don't have any information from before them, they cannot be forward-filled. We will take care of these `NaN` values in the next section, when we deal with missing data."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EORxqEobWUVl"
      },
      "source": [
        "#### Missing Data\n",
        "\n",
        "Whenever we deal with real data, there is a very real possibility of encountering missing values. Real data is riddled with holes and pandas provides us with ways to handle them. Sometimes resampling or reindexing can create `NaN` values. Fortunately, pandas provides us with ways to handle them. We have two primary means of coping with missing data. The first of these is filling in the missing data with  `fillna()`. For example, say that we want to fill in the missing days with the mean price of all days."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QYCzkCZWWUVl"
      },
      "outputs": [],
      "source": [
        "meanfilled_prices = calendar_prices.fillna(calendar_prices.mean())\n",
        "meanfilled_prices.head(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JoqzI7YrWUVl"
      },
      "source": [
        "Using `fillna()` is fairly easy. It is just a matter of indicating the value that you want to fill the spaces with. Unfortunately, this particular case doesn't make a whole lot of sense, for reasons discussed in the [lecture on stationarity](https://www.quantopian.com/lectures/integration-cointegration-and-stationarity) in the Lecture series. We could fill them with with $0$, simply, but that's similarly uninformative.\n",
        "\n",
        "Rather than filling in specific values, we can use the `method` parameter, similarly to how the `reindex()` method works. We could use \"backward fill\", where `NaN`s are filled with the *next* filled value (instead of forward fill's *last* filled value) like so:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8ZsxTRTRWUVl"
      },
      "outputs": [],
      "source": [
        "bfilled_prices = calendar_prices.fillna(method='bfill')\n",
        "bfilled_prices.head(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "G5DxvkPeWUVl"
      },
      "source": [
        "But again, this is a bad idea for the same reasons as the previous option. Both of these so-called solutions take into account *future data* that was not available at the time of the data points that we are trying to fill. In the case of using the mean or the median, these summary statistics are calculated by taking into account the entire time series. Backward filling is equivalent to saying that the price of a particular security today, right now, tomorrow's price. This also makes no sense. These two options are both examples of look-ahead bias, using data that would be unknown or unavailable at the desired time, and should be avoided.\n",
        "\n",
        "Our next option is significantly more appealing. We could simply drop the missing data using the `dropna()` method. This is much better alternative than filling `NaN` values in with arbitrary numbers."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Ib0eW-lVWUVl"
      },
      "outputs": [],
      "source": [
        "dropped_prices = calendar_prices.dropna()\n",
        "dropped_prices.head(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bmusrf2NWUVl"
      },
      "source": [
        "Now our time series is cleaned for the calendar year, with all of our `NaN` values properly handled. It is time to talk about how to actually do time series analysis with pandas data structures."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zhMpxOZZWUVl"
      },
      "source": [
        "#### Time Series Analysis with pandas\n",
        "\n",
        "Let's do some basic time series analysis on our original prices. Each pandas `Series` has a built-in plotting method."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xfc8UOadWUVm"
      },
      "outputs": [],
      "source": [
        "prices.plot();\n",
        "# We still need to add the axis labels and title ourselves\n",
        "plt.title(symbol + \" Prices\")\n",
        "plt.ylabel(\"Price\")\n",
        "plt.xlabel(\"Date\");"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nwzNqnSKWUVm"
      },
      "source": [
        "As well as some built-in descriptive statistics. We can either calculate these individually or using the `describe()` method."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xrSqaET2WUVm"
      },
      "outputs": [],
      "source": [
        "print (\"Mean: \", prices.mean())\n",
        "print (\"Standard deviation: \", prices.std())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bPTdDa6FWUVm"
      },
      "outputs": [],
      "source": [
        "print (\"Summary Statistics\")\n",
        "print (prices.describe())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qT7Y2Y2HWUVm"
      },
      "source": [
        "We can easily modify `Series` with scalars using our basic mathematical operators."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5On0u0x4WUVm"
      },
      "outputs": [],
      "source": [
        "modified_prices = prices * 2 - 10\n",
        "modified_prices.head(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "L5q-mCShWUVm"
      },
      "source": [
        "And we can create linear combinations of `Series` themselves using the basic mathematical operators. pandas will group up matching indices and perform the calculations elementwise to produce a new `Series`. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6-cdiZn8WUVm"
      },
      "outputs": [],
      "source": [
        "noisy_prices = prices + 5 * pd.Series(np.random.normal(0, 5, len(prices)), index=prices.index) + 20\n",
        "noisy_prices.head(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DHS7VaGeWUVm"
      },
      "source": [
        "If there are no matching indices, however, we may get an empty `Series` in return."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "TM_PrIRKWUVm"
      },
      "outputs": [],
      "source": [
        "empty_series = prices + pd.Series(np.random.normal(0, 1, len(prices)))\n",
        "empty_series.head(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4L_gX8XcWUVn"
      },
      "source": [
        "Rather than looking at a time series itself, we may want to look at its first-order differences or percent change (in order to get additive or multiplicative returns, in our particular case). Both of these are built-in methods."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "id": "t1RQeBm3WUVn"
      },
      "outputs": [],
      "source": [
        "add_returns = prices.diff()[1:]\n",
        "mult_returns = prices.pct_change()[1:]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "NrpmE0uCWUVn"
      },
      "outputs": [],
      "source": [
        "plt.title(\"Multiplicative returns of \" + symbol)\n",
        "plt.xlabel(\"Date\")\n",
        "plt.ylabel(\"Percent Returns\")\n",
        "mult_returns.plot();"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KF4ZgpVrWUVn"
      },
      "source": [
        "pandas has convenient functions for calculating rolling means and standard deviations, as well!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 555,
      "metadata": {
        "id": "mynnGhuDWUVn",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 310
        },
        "outputId": "77c87349-13fc-449a-b861-895f09622b7c"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-555-61350e7af348>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mrolling_mean\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrolling_mean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprices\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m30\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mrolling_mean\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"30-day rolling mean\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/__init__.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(name)\u001b[0m\n\u001b[1;32m    242\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0m_SparseArray\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    243\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 244\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"module 'pandas' has no attribute '{name}'\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    245\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    246\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: module 'pandas' has no attribute 'rolling_mean'"
          ]
        }
      ],
      "source": [
        "rolling_mean = pd.rolling_mean(prices, 30)\n",
        "rolling_mean.name = \"30-day rolling mean\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 556,
      "metadata": {
        "scrolled": false,
        "id": "2bXFjX8iWUVn",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 547
        },
        "outputId": "b0adddb4-b629-43ce-c540-ff7c0c4406ba"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "prices.plot()\n",
        "rolling_mean.plot()\n",
        "plt.title(symbol + \"Price\")\n",
        "plt.xlabel(\"Date\")\n",
        "plt.ylabel(\"Price\")\n",
        "plt.legend();"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 557,
      "metadata": {
        "collapsed": true,
        "id": "818Z2ObUWUVn",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 310
        },
        "outputId": "c880e127-fdd8-4746-a2a6-49c23a4e5cce"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-557-4f247c2c52cf>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mrolling_std\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrolling_std\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprices\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m30\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mrolling_std\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"30-day rolling volatility\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/__init__.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(name)\u001b[0m\n\u001b[1;32m    242\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0m_SparseArray\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    243\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 244\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"module 'pandas' has no attribute '{name}'\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    245\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    246\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: module 'pandas' has no attribute 'rolling_std'"
          ]
        }
      ],
      "source": [
        "rolling_std = pd.rolling_std(prices, 30)\n",
        "rolling_std.name = \"30-day rolling volatility\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HV68dx0QWUVn"
      },
      "outputs": [],
      "source": [
        "rolling_std.plot()\n",
        "plt.title(rolling_std.name);\n",
        "plt.xlabel(\"Date\")\n",
        "plt.ylabel(\"Standard Deviation\");"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Xog0a615WUVn"
      },
      "source": [
        "Many NumPy functions will work on `Series` the same way that they work on 1-dimensional NumPy arrays."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 553,
      "metadata": {
        "id": "kpiRKsHtWUVn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "155100c5-d854-4667-c1f8-4729baee88ba"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.0009221040517478629\n"
          ]
        }
      ],
      "source": [
        "print (np.median(mult_returns))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 133**"
      ],
      "metadata": {
        "id": "yN9bMGwefQjX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print (np.median(add_returns))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4TTv40dafS8o",
        "outputId": "db795b35-01d2-470c-f38f-ec82c07bdfeb"
      },
      "execution_count": 554,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.0008287612803373756\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hD-OY99ZWUVn"
      },
      "source": [
        "The majority of these functions, however, are already implemented directly as `Series` and `DataFrame` methods."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 558,
      "metadata": {
        "id": "DugbNwDsWUVo",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "91c3ab56-4069-45c1-dd41-a21e1a29945e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0   -0.003251\n",
            "1    0.005421\n",
            "2    0.006057\n",
            "3    0.002794\n",
            "4   -0.008325\n",
            "5    0.002615\n",
            "6    0.003311\n",
            "7    0.000656\n",
            "8    0.005317\n",
            "9   -0.008185\n",
            "dtype: float64\n"
          ]
        }
      ],
      "source": [
        "print (mult_returns.median())"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 134**"
      ],
      "metadata": {
        "id": "0xns2RixfY6M"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print (add_returns.median())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w4OzhLfXfdI0",
        "outputId": "e62bd699-225c-4097-e200-ea2694b1e0ce"
      },
      "execution_count": 559,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0   -0.002993\n",
            "1    0.006586\n",
            "2    0.005921\n",
            "3    0.003482\n",
            "4   -0.004848\n",
            "5    0.002806\n",
            "6    0.004304\n",
            "7    0.000818\n",
            "8    0.005846\n",
            "9   -0.006542\n",
            "dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aAl1l6d-WUVo"
      },
      "source": [
        "In every case, using the built-in pandas method will be better than using the NumPy function on a pandas data structure due to improvements in performance. Make sure to check out the `Series` [documentation](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.html) before resorting to other calculations of common functions."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eH9CwiinWUVo"
      },
      "source": [
        "### `DataFrames`\n",
        "\n",
        "Many of the aspects of working with `Series` carry over into `DataFrames`. pandas `DataFrames` allow us to easily manage our data with their intuitive structure. \n",
        "\n",
        "Like `Series`, `DataFrames` can hold multiple types of data, but `DataFrames` are 2-dimensional objects, unlike `Series`. Each `DataFrame` has an index and a columns attribute, which we will cover more in-depth when we start actually playing with an object. The index attribute is like the index of a `Series`, though indices in pandas have some extra features that we will unfortunately not be able to cover here. If you are interested in this, check out the [pandas documentation](http://pandas.pydata.org/pandas-docs/version/0.18.1/advanced.html) on advanced indexing. The columns attribute is what provides the second dimension of our `DataFrames`, allowing us to combine named columns (all `Series`), into a cohesive object with the index lined-up.\n",
        "\n",
        "We can create a `DataFrame` by calling `pandas.DataFrame()` on a dictionary or NumPy `ndarray`. We can also concatenate a group of pandas `Series` into a `DataFrame` using `pandas.concat()`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 560,
      "metadata": {
        "id": "z85Mq4BhWUVo",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7cbb800d-5810-459e-be02-9b614d31d426"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'a': [1, 2, 3, 4, 5], 'b': ['L', 'K', 'J', 'M', 'Z'], 'c': array([ 0.84836326,  0.97593406,  1.53064543, -0.48394599,  0.39015541])}\n"
          ]
        }
      ],
      "source": [
        "dict_data = {\n",
        "    'a' : [1, 2, 3, 4, 5],\n",
        "    'b' : ['L', 'K', 'J', 'M', 'Z'],\n",
        "    'c' : np.random.normal(0, 1, 5)\n",
        "}\n",
        "print (dict_data)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WeiG7PIBWUVo"
      },
      "source": [
        "Each `DataFrame` has a few key attributes that we need to keep in mind. The first of these is the index attribute. We can easily include an index of `Timestamp` objects like we did with `Series`."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 135**"
      ],
      "metadata": {
        "id": "-c8ua8-KgCid"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dicc = {\n",
        "    'I':[6,5,9,7],\n",
        "    'II':['p','U','L'],\n",
        "    'III':np.random.normal(0,5,9)\n",
        "}\n",
        "print(dicc)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7U6GMXb8gTwk",
        "outputId": "b64a88be-1fda-419b-d284-e119dc8105f5"
      },
      "execution_count": 565,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'I': [6, 5, 9, 7], 'II': ['p', 'U', 'L'], 'III': array([ 4.93975083, -2.68258977, -8.36684955, -0.23826035, -4.24866822,\n",
            "        9.02083227, -2.70424336, -5.92079192, -5.16741492])}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 566,
      "metadata": {
        "scrolled": false,
        "id": "IzuzBUAYWUVo",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "813790cc-417b-4ad7-8d4d-70c6a2480abf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "            a  b         c\n",
            "2016-01-01  1  L  0.848363\n",
            "2016-01-02  2  K  0.975934\n",
            "2016-01-03  3  J  1.530645\n",
            "2016-01-04  4  M -0.483946\n",
            "2016-01-05  5  Z  0.390155\n"
          ]
        }
      ],
      "source": [
        "frame_data = pd.DataFrame(dict_data, index=pd.date_range('2016-01-01', periods=5))\n",
        "print (frame_data)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LgPfObhFWUVo"
      },
      "source": [
        "As mentioned above, we can combine `Series` into `DataFrames`. Concatatenating `Series` like this will match elements up based on their corresponding index. As the following `Series` do not have an index assigned, they each default to an integer index. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 567,
      "metadata": {
        "scrolled": true,
        "id": "Wtl42IW0WUVo",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b0251e4c-8505-4275-cfff-f67baa5c5f9a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Evens  Odds\n",
            "0      4     3\n",
            "1      6     5\n",
            "2      8     7\n",
            "3     10     9\n",
            "4     12    15\n"
          ]
        }
      ],
      "source": [
        "s_1 = pd.Series([4, 6, 8, 10, 12], name='Evens')\n",
        "s_2 = pd.Series([3, 5, 7, 9, 15], name=\"Odds\")\n",
        "numbers = pd.concat([s_1, s_2], axis=1)\n",
        "print (numbers)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 136**"
      ],
      "metadata": {
        "id": "JA_UR_YjgoEK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "g_1 = pd.Series([3,6,12], name='multiplos3_1')\n",
        "g_2 = pd.Series([9,15,21], name='multiplos3_2')\n",
        "mult3= pd.concat([g_1,g_2], axis=1)\n",
        "print(mult3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U3dUO-Bygqbm",
        "outputId": "fbe12c94-e87e-4da3-ffe6-04fac1832da0"
      },
      "execution_count": 569,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   multiplos3_1  multiplos3_2\n",
            "0             3             9\n",
            "1             6            15\n",
            "2            12            21\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kdl0AB6jWUVo"
      },
      "source": [
        "We will use `pandas.concat()` again later to combine multiple `DataFrame`s into one. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cyHQkLW6WUVo"
      },
      "source": [
        "Each `DataFrame` also has a `columns` attribute. These can either be assigned when we call `pandas.DataFrame` or they can be modified directly like the index. Note that when we concatenated the two `Series` above, the column names were the names of those `Series`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 570,
      "metadata": {
        "id": "7TdrD0V0WUVp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fcf8e598-bd33-4b4b-feb6-0fb8acf90ba0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['Evens', 'Odds'], dtype='object')\n"
          ]
        }
      ],
      "source": [
        "print (numbers.columns)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 137**"
      ],
      "metadata": {
        "id": "4SRvA8hhhPLT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(mult3.columns)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HCpdjGx1hRDd",
        "outputId": "1e0cb1d1-4b09-4943-fc45-43a3fd378ec6"
      },
      "execution_count": 571,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['multiplos3_1', 'multiplos3_2'], dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SPHSKbxJWUVp"
      },
      "source": [
        "To modify the columns after object creation, we need only do the following:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 572,
      "metadata": {
        "id": "QPV2Q6H6WUVp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "380dcbc6-a0d0-400e-bfcc-55a75e5a7c06"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Shmevens  Shmodds\n",
            "0         4        3\n",
            "1         6        5\n",
            "2         8        7\n",
            "3        10        9\n",
            "4        12       15\n"
          ]
        }
      ],
      "source": [
        "numbers.columns = ['Shmevens', 'Shmodds']\n",
        "print (numbers)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 138**"
      ],
      "metadata": {
        "id": "kardCVSghaPT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mult3.columns = ['multi3_I','multi3_II']\n",
        "print(mult3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "o25joP6qhciZ",
        "outputId": "74e0886f-d5a7-422e-aa0c-32f66a935146"
      },
      "execution_count": 573,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   multi3_I  multi3_II\n",
            "0         3          9\n",
            "1         6         15\n",
            "2        12         21\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NBHRY6syWUVp"
      },
      "source": [
        "In the same vein, the index of a `DataFrame` can be changed after the fact."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 574,
      "metadata": {
        "id": "xr1SAGGqWUVp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "795655fe-94bd-4e0d-e25f-37f6783a8289"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RangeIndex(start=0, stop=5, step=1)\n"
          ]
        }
      ],
      "source": [
        "print (numbers.index)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 575,
      "metadata": {
        "id": "wQreFUxwWUVp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "aff0799d-9d10-4b82-b25f-5c07eecd6902"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "            Shmevens  Shmodds\n",
            "2016-01-01         4        3\n",
            "2016-01-02         6        5\n",
            "2016-01-03         8        7\n",
            "2016-01-04        10        9\n",
            "2016-01-05        12       15\n"
          ]
        }
      ],
      "source": [
        "numbers.index = pd.date_range(\"2016-01-01\", periods=len(numbers))\n",
        "print (numbers)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QxbDlXyrWUVp"
      },
      "source": [
        "Separate from the columns and index of a `DataFrame`, we can also directly access the values they contain by looking at the values attribute."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 576,
      "metadata": {
        "id": "zHSLDkVeWUVp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7bd77762-7ad2-450d-8182-8d95de5f85e0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 4,  3],\n",
              "       [ 6,  5],\n",
              "       [ 8,  7],\n",
              "       [10,  9],\n",
              "       [12, 15]])"
            ]
          },
          "metadata": {},
          "execution_count": 576
        }
      ],
      "source": [
        "numbers.values"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 139**"
      ],
      "metadata": {
        "id": "vBfZaPQJh_pt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mult3.values"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I03yEbWeiCGM",
        "outputId": "c673c865-ffa4-40a5-b2ca-5aa5905cb24d"
      },
      "execution_count": 577,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 3,  9],\n",
              "       [ 6, 15],\n",
              "       [12, 21]])"
            ]
          },
          "metadata": {},
          "execution_count": 577
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Hix3SJTpWUVp"
      },
      "source": [
        "This returns a NumPy array."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YsCG1eI0WUVp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0468ac1b-e265-48fc-9475-d9e333f69a85"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "numpy.ndarray"
            ]
          },
          "metadata": {},
          "execution_count": 201
        }
      ],
      "source": [
        "type(numbers.values)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 140**"
      ],
      "metadata": {
        "id": "9HVHHYrEiGYh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "type(mult3.values)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rp7J3Iu-iId4",
        "outputId": "de24cd27-1eb6-4147-8c36-f6ed7a0e851c"
      },
      "execution_count": 578,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "numpy.ndarray"
            ]
          },
          "metadata": {},
          "execution_count": 578
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ulw_URpPWUVq"
      },
      "source": [
        "#### Accessing `DataFrame` elements\n",
        "\n",
        "Again we see a lot of carryover from `Series` in how we access the elements of `DataFrames`. The key sticking point here is that everything has to take into account multiple dimensions now. The main way that this happens is through the access of the columns of a `DataFrame`, either individually or in groups. We can do this either by directly accessing the attributes or by using the methods we already are familiar with."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 579,
      "metadata": {
        "id": "qZ_r9swuWUVq",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 239
        },
        "outputId": "592aeb69-3b2f-443c-8606-2e78e6326c24"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-579-b3304e5b10e1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mstart\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"2012-01-01\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mend\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"2016-01-01\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mprices\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_pricing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msymbol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart_date\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstart\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend_date\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfields\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"price\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msymbol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msymbol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'get_pricing' is not defined"
          ]
        }
      ],
      "source": [
        "symbol = [\"CMG\", \"MCD\", \"SHAK\", \"WFM\"]\n",
        "start = \"2012-01-01\"\n",
        "end = \"2016-01-01\"\n",
        "prices = get_pricing(symbol, start_date=start, end_date=end, fields=\"price\")\n",
        "if isinstance(symbol, list):\n",
        "    prices.columns = map(lambda x: x.symbol, prices.columns)\n",
        "else:\n",
        "    prices.name = symbol"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z0gzYPBSWUVq"
      },
      "source": [
        "Here we directly access the `CMG` column. Note that this style of access will only work if your column name has no spaces or unfriendly characters in it."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 580,
      "metadata": {
        "id": "SYkX2Xf9WUVq",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        },
        "outputId": "e432d392-20cf-4f92-e36c-67f06a185e4b"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-580-55683917cb49>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mCMG\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5485\u001b[0m         ):\n\u001b[1;32m   5486\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5487\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5488\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5489\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'CMG'"
          ]
        }
      ],
      "source": [
        "prices.CMG.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lEZQ1JVVWUVq"
      },
      "source": [
        "We can also use `loc[]` to access an individual column like so."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 581,
      "metadata": {
        "id": "I8LOJ0JUWUVq",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "outputId": "195ac7d0-dd0d-4971-e8b7-5364689b9a34"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-581-be0af500b969>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'CMG'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    923\u001b[0m                 \u001b[0;32mwith\u001b[0m \u001b[0msuppress\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mKeyError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    924\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtakeable\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_takeable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 925\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    926\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    927\u001b[0m             \u001b[0;31m# we by definition only have the 0th axis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m   1098\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtup\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1099\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0msuppress\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mIndexingError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1100\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_lowerdim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1101\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1102\u001b[0m         \u001b[0;31m# no multi-index, so validate all of the indexers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_lowerdim\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m    836\u001b[0m                 \u001b[0;31m# We don't need to check for tuples here because those are\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    837\u001b[0m                 \u001b[0;31m#  caught by the _is_nested_tuple_indexer check above.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 838\u001b[0;31m                 \u001b[0msection\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    839\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    840\u001b[0m                 \u001b[0;31m# We should never have a scalar section here, because\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1162\u001b[0m         \u001b[0;31m# fall thru to straight lookup\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1163\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_key\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1164\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_label\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1165\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1166\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_slice_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mslice_obj\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mslice\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_get_label\u001b[0;34m(self, label, axis)\u001b[0m\n\u001b[1;32m   1111\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_label\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1112\u001b[0m         \u001b[0;31m# GH#5667 this will fail if the label is not present in the axis.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1113\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1114\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1115\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_handle_lowerdim_multi_index_axis0\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtup\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mxs\u001b[0;34m(self, key, axis, level, drop_level)\u001b[0m\n\u001b[1;32m   3759\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0maxis\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3760\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mdrop_level\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3761\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3762\u001b[0m             \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3763\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3456\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3457\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3458\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3459\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3460\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexes/range.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m    386\u001b[0m                 \u001b[0;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    387\u001b[0m                     \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 388\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    389\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtolerance\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtolerance\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    390\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'CMG'"
          ]
        }
      ],
      "source": [
        "prices.loc[:, 'CMG'].head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nmaNmKQAWUVq"
      },
      "source": [
        "Accessing an individual column will return a `Series`, regardless of how we get it."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 582,
      "metadata": {
        "id": "elVEk1bRWUVt",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 310
        },
        "outputId": "e6761c8d-2027-4e6e-9f72-7c63aceba107"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-582-19380f1c76d8>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mCMG\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'CMG'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5485\u001b[0m         ):\n\u001b[1;32m   5486\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5487\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5488\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5489\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'CMG'"
          ]
        }
      ],
      "source": [
        "print (type(prices.CMG))\n",
        "print (type(prices.loc[:, 'CMG']))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "t_n_NTdkWUVt"
      },
      "source": [
        "Notice how we pass a tuple into the `loc[]` method? This is a key difference between accessing a `Series` and accessing a `DataFrame`, grounded in the fact that a `DataFrame` has multiple dimensions. When you pass a 2-dimensional tuple into a `DataFrame`, the first element of the tuple is applied to the rows and the second is applied to the columns. So, to break it down, the above line of code tells the `DataFrame` to return every single row of the column with label `'CMG'`. Lists of columns are also supported."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 583,
      "metadata": {
        "id": "e_sVdcErWUVt",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "outputId": "b419012e-aee8-4e69-8efb-3956043bb4d0"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-583-d7d11f366d68>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'CMG'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'MCD'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    923\u001b[0m                 \u001b[0;32mwith\u001b[0m \u001b[0msuppress\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mKeyError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    924\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtakeable\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_takeable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 925\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    926\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    927\u001b[0m             \u001b[0;31m# we by definition only have the 0th axis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m   1107\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_multi_take\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1108\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1109\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_tuple_same_dim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1110\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1111\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_label\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple_same_dim\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m    804\u001b[0m                 \u001b[0;32mcontinue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    805\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 806\u001b[0;31m             \u001b[0mretval\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mretval\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    807\u001b[0m             \u001b[0;31m# We should never have retval.ndim < self.ndim, as that should\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    808\u001b[0m             \u001b[0;31m#  be handled by the _getitem_lowerdim call above.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1151\u001b[0m                     \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Cannot index with multidimensional key\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1152\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1153\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_iterable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1154\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1155\u001b[0m             \u001b[0;31m# nested tuple slicing\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_iterable\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1091\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1092\u001b[0m         \u001b[0;31m# A collection of keys\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1093\u001b[0;31m         \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_listlike_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1094\u001b[0m         return self.obj._reindex_with_indexers(\n\u001b[1;32m   1095\u001b[0m             \u001b[0;34m{\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_dups\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_get_listlike_indexer\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1312\u001b[0m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_indexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reindex_non_unique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1313\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1314\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_read_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1315\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1316\u001b[0m         if needs_i8_conversion(ax.dtype) or isinstance(\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_validate_read_indexer\u001b[0;34m(self, key, indexer, axis)\u001b[0m\n\u001b[1;32m   1372\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0muse_interval_msg\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1373\u001b[0m                     \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1374\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"None of [{key}] are in the [{axis_name}]\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1375\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1376\u001b[0m             \u001b[0mnot_found\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmissing_mask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnonzero\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: \"None of [Index(['CMG', 'MCD'], dtype='object')] are in the [columns]\""
          ]
        }
      ],
      "source": [
        "prices.loc[:, ['CMG', 'MCD']].head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J2SmCaWMWUVt"
      },
      "source": [
        "We can also simply access the `DataFrame` by index value using `loc[]`, as with `Series`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 584,
      "metadata": {
        "scrolled": true,
        "id": "g3vYIXWxWUVt",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 49
        },
        "outputId": "c360a1cb-a3df-48d4-c706-50a63ab56925"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d6acaf83-ad98-483a-8370-27185e5d19bd\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d6acaf83-ad98-483a-8370-27185e5d19bd')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d6acaf83-ad98-483a-8370-27185e5d19bd button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d6acaf83-ad98-483a-8370-27185e5d19bd');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 584
        }
      ],
      "source": [
        "prices.loc['2015-12-15':'2015-12-22']"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DDhvCbEpWUVt"
      },
      "source": [
        "This plays nicely with lists of columns, too."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 585,
      "metadata": {
        "id": "gkAgMnJJWUVt",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "outputId": "93e1996d-519a-426d-9cf1-01e52077e5a7"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-585-22ad0d39949a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'2015-12-15'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m'2015-12-22'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'CMG'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'MCD'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    923\u001b[0m                 \u001b[0;32mwith\u001b[0m \u001b[0msuppress\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mKeyError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    924\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtakeable\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_takeable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 925\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    926\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    927\u001b[0m             \u001b[0;31m# we by definition only have the 0th axis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m   1107\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_multi_take\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1108\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1109\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_tuple_same_dim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1110\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1111\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_label\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple_same_dim\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m    804\u001b[0m                 \u001b[0;32mcontinue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    805\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 806\u001b[0;31m             \u001b[0mretval\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mretval\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    807\u001b[0m             \u001b[0;31m# We should never have retval.ndim < self.ndim, as that should\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    808\u001b[0m             \u001b[0;31m#  be handled by the _getitem_lowerdim call above.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1151\u001b[0m                     \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Cannot index with multidimensional key\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1152\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1153\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_iterable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1154\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1155\u001b[0m             \u001b[0;31m# nested tuple slicing\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_iterable\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1091\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1092\u001b[0m         \u001b[0;31m# A collection of keys\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1093\u001b[0;31m         \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_listlike_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1094\u001b[0m         return self.obj._reindex_with_indexers(\n\u001b[1;32m   1095\u001b[0m             \u001b[0;34m{\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_dups\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_get_listlike_indexer\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1312\u001b[0m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_indexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reindex_non_unique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1313\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1314\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_read_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1315\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1316\u001b[0m         if needs_i8_conversion(ax.dtype) or isinstance(\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_validate_read_indexer\u001b[0;34m(self, key, indexer, axis)\u001b[0m\n\u001b[1;32m   1372\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0muse_interval_msg\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1373\u001b[0m                     \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1374\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"None of [{key}] are in the [{axis_name}]\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1375\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1376\u001b[0m             \u001b[0mnot_found\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmissing_mask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnonzero\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: \"None of [Index(['CMG', 'MCD'], dtype='object')] are in the [columns]\""
          ]
        }
      ],
      "source": [
        "prices.loc['2015-12-15':'2015-12-22', ['CMG', 'MCD']]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HLLVsn2kWUVt"
      },
      "source": [
        "Using `iloc[]` also works similarly, allowing you to access parts of the `DataFrame` by integer index."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 586,
      "metadata": {
        "id": "WOhYJF69WUVt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f8c12a3a-c916-4486-d586-8f7008fd1374"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    0.981841\n",
              "1    0.982784\n",
              "Name: 1, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 586
        }
      ],
      "source": [
        "prices.iloc[0:2, 1]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "V2p_krTyWUVu"
      },
      "outputs": [],
      "source": [
        "# Access prices with integer index in\n",
        "# [1, 3, 5, 7, 9, 11, 13, ..., 99]\n",
        "# and in column 0 or 3\n",
        "prices.iloc[[1, 3, 5] + range(7, 100, 2), [0, 3]].head(20)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JhgW4jJZWUVu"
      },
      "source": [
        "#### Boolean indexing\n",
        "\n",
        "As with `Series`, sometimes we want to filter a `DataFrame` according to a set of criteria. We do this by indexing our `DataFrame` with boolean values."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 587,
      "metadata": {
        "id": "XW5Jwdy4WUVu",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        },
        "outputId": "9f4425db-7da3-479e-a5cb-dac1fea35c36"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-587-3839cc402a02>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMCD\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mWFM\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5485\u001b[0m         ):\n\u001b[1;32m   5486\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5487\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5488\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5489\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'MCD'"
          ]
        }
      ],
      "source": [
        "prices.loc[prices.MCD > prices.WFM].head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UxSbcNzbWUVu"
      },
      "source": [
        "We can add multiple boolean conditions by using the logical operators `&`, `|`, and `~` (and, or, and not, respectively) again!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 588,
      "metadata": {
        "id": "1WAE9k0YWUVu",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        },
        "outputId": "7c77b502-83e0-44f4-846c-21a6bcb0080e"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-588-343a79d6cef7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMCD\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mWFM\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m&\u001b[0m \u001b[0;34m~\u001b[0m\u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSHAK\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misnull\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5485\u001b[0m         ):\n\u001b[1;32m   5486\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5487\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5488\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5489\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'MCD'"
          ]
        }
      ],
      "source": [
        "prices.loc[(prices.MCD > prices.WFM) & ~prices.SHAK.isnull()].head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qNKnyKq9WUVu"
      },
      "source": [
        "#### Adding, Removing Columns, Combining `DataFrames`/`Series`\n",
        "\n",
        "It is all well and good when you already have a `DataFrame` filled with data, but it is also important to be able to add to the data that you have.\n",
        "\n",
        "We add a new column simply by assigning data to a column that does not already exist. Here we use the `.loc[:, 'COL_NAME']` notation and store the output of `get_pricing()` (which returns a pandas `Series` if we only pass one security) there. This is the method that we would use to add a `Series` to an existing `DataFrame`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 589,
      "metadata": {
        "scrolled": true,
        "id": "IwO4y2VuWUVu",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "005deeb1-601e-432c-ef30-6ebe9d1c97d8"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-589-3cdef7382517>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0ms_1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_pricing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'TSLA'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart_date\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstart\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend_date\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfields\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'price'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'TSLA'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0ms_1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'get_pricing' is not defined"
          ]
        }
      ],
      "source": [
        "s_1 = get_pricing('TSLA', start_date=start, end_date=end, fields='price')\n",
        "prices.loc[:, 'TSLA'] = s_1\n",
        "prices.head(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VSgc0MTvWUVu"
      },
      "source": [
        "It is also just as easy to remove a column."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 590,
      "metadata": {
        "scrolled": true,
        "id": "qeHR_UEwWUVu",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 334
        },
        "outputId": "27daf552-aa90-44a3-9870-d61fbe9e2a79"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-590-af14d7abb2de>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprices\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'TSLA'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    309\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstacklevel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    310\u001b[0m                 )\n\u001b[0;32m--> 311\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    312\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    313\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4904\u001b[0m                 \u001b[0mweight\u001b[0m  \u001b[0;36m1.0\u001b[0m     \u001b[0;36m0.8\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4905\u001b[0m         \"\"\"\n\u001b[0;32m-> 4906\u001b[0;31m         return super().drop(\n\u001b[0m\u001b[1;32m   4907\u001b[0m             \u001b[0mlabels\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4908\u001b[0m             \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4148\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32min\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4149\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4150\u001b[0;31m                 \u001b[0mobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_drop_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4151\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4152\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_drop_axis\u001b[0;34m(self, labels, axis, level, errors)\u001b[0m\n\u001b[1;32m   4183\u001b[0m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4184\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4185\u001b[0;31m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4186\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0maxis_name\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mnew_axis\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4187\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   6015\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6016\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0merrors\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6017\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{labels[mask]} not found in axis\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6018\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m~\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6019\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdelete\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: \"['TSLA'] not found in axis\""
          ]
        }
      ],
      "source": [
        "prices = prices.drop('TSLA', axis=1)\n",
        "prices.head(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XQliTEFlWUVu"
      },
      "source": [
        "If we instead want to combine multiple `DataFrame`s into one, we use the `pandas.concat()` method."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 591,
      "metadata": {
        "scrolled": false,
        "id": "SpxCPh_CWUVu",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 222
        },
        "outputId": "4657e997-6b08-481c-ca4f-65adee9914b7"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-591-a62b44e01945>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf_1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_pricing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'SPY'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'VXX'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart_date\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstart\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend_date\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfields\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'price'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mdf_2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_pricing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'MSFT'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'AAPL'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'GOOG'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart_date\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstart\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend_date\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfields\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'price'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mdf_3\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdf_1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdf_2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mdf_3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'get_pricing' is not defined"
          ]
        }
      ],
      "source": [
        "df_1 = get_pricing(['SPY', 'VXX'], start_date=start, end_date=end, fields='price')\n",
        "df_2 = get_pricing(['MSFT', 'AAPL', 'GOOG'], start_date=start, end_date=end, fields='price')\n",
        "df_3 = pd.concat([df_1, df_2], axis=1)\n",
        "df_3.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tT-xi9uHWUVv"
      },
      "source": [
        "#### Missing data (again)\n",
        "Bringing real-life data into a `DataFrame` brings us the same problems that we had with it in a `Series`, only this time in more dimensions. We have access to the same methods as with `Series`, as demonstrated below."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 592,
      "metadata": {
        "id": "HE72V375WUVv",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "72be00b9-2e11-471a-84aa-c2a7cf9a9685"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          0         1         2         3         4         5         6  \\\n",
              "0  1.007346  0.981841  0.977915  0.986911  1.003548  0.985814  1.011343   \n",
              "1  0.995010  0.982784  0.930302  1.007979  0.987780  1.004867  1.016462   \n",
              "2  1.014507  0.979461  0.911670  0.994133  0.982287  1.015997  1.056143   \n",
              "3  1.002013  0.954792  0.900662  1.021865  0.973629  1.049051  1.055247   \n",
              "4  1.067582  0.992955  0.867712  0.984970  0.997916  1.070905  1.066097   \n",
              "\n",
              "          7         8         9  \n",
              "0  0.999718  1.016960  0.968264  \n",
              "1  0.974010  0.989420  0.953660  \n",
              "2  0.985023  1.016895  0.997951  \n",
              "3  0.964175  1.034740  0.988246  \n",
              "4  1.015401  0.986589  1.007328  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9bbf994d-18cd-449d-8dc0-3abe66601bd4\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.007346</td>\n",
              "      <td>0.981841</td>\n",
              "      <td>0.977915</td>\n",
              "      <td>0.986911</td>\n",
              "      <td>1.003548</td>\n",
              "      <td>0.985814</td>\n",
              "      <td>1.011343</td>\n",
              "      <td>0.999718</td>\n",
              "      <td>1.016960</td>\n",
              "      <td>0.968264</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.995010</td>\n",
              "      <td>0.982784</td>\n",
              "      <td>0.930302</td>\n",
              "      <td>1.007979</td>\n",
              "      <td>0.987780</td>\n",
              "      <td>1.004867</td>\n",
              "      <td>1.016462</td>\n",
              "      <td>0.974010</td>\n",
              "      <td>0.989420</td>\n",
              "      <td>0.953660</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.014507</td>\n",
              "      <td>0.979461</td>\n",
              "      <td>0.911670</td>\n",
              "      <td>0.994133</td>\n",
              "      <td>0.982287</td>\n",
              "      <td>1.015997</td>\n",
              "      <td>1.056143</td>\n",
              "      <td>0.985023</td>\n",
              "      <td>1.016895</td>\n",
              "      <td>0.997951</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.002013</td>\n",
              "      <td>0.954792</td>\n",
              "      <td>0.900662</td>\n",
              "      <td>1.021865</td>\n",
              "      <td>0.973629</td>\n",
              "      <td>1.049051</td>\n",
              "      <td>1.055247</td>\n",
              "      <td>0.964175</td>\n",
              "      <td>1.034740</td>\n",
              "      <td>0.988246</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.067582</td>\n",
              "      <td>0.992955</td>\n",
              "      <td>0.867712</td>\n",
              "      <td>0.984970</td>\n",
              "      <td>0.997916</td>\n",
              "      <td>1.070905</td>\n",
              "      <td>1.066097</td>\n",
              "      <td>1.015401</td>\n",
              "      <td>0.986589</td>\n",
              "      <td>1.007328</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9bbf994d-18cd-449d-8dc0-3abe66601bd4')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9bbf994d-18cd-449d-8dc0-3abe66601bd4 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9bbf994d-18cd-449d-8dc0-3abe66601bd4');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 592
        }
      ],
      "source": [
        "filled0_prices = prices.fillna(0)\n",
        "filled0_prices.head(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 593,
      "metadata": {
        "id": "Dz7mJcbbWUVv",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "824cd285-0249-4486-8d4b-75270c4aa6e4"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          0         1         2         3         4         5         6  \\\n",
              "0  1.007346  0.981841  0.977915  0.986911  1.003548  0.985814  1.011343   \n",
              "1  0.995010  0.982784  0.930302  1.007979  0.987780  1.004867  1.016462   \n",
              "2  1.014507  0.979461  0.911670  0.994133  0.982287  1.015997  1.056143   \n",
              "3  1.002013  0.954792  0.900662  1.021865  0.973629  1.049051  1.055247   \n",
              "4  1.067582  0.992955  0.867712  0.984970  0.997916  1.070905  1.066097   \n",
              "\n",
              "          7         8         9  \n",
              "0  0.999718  1.016960  0.968264  \n",
              "1  0.974010  0.989420  0.953660  \n",
              "2  0.985023  1.016895  0.997951  \n",
              "3  0.964175  1.034740  0.988246  \n",
              "4  1.015401  0.986589  1.007328  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d9b1de6e-7022-48ec-9b5a-c67285b224e2\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.007346</td>\n",
              "      <td>0.981841</td>\n",
              "      <td>0.977915</td>\n",
              "      <td>0.986911</td>\n",
              "      <td>1.003548</td>\n",
              "      <td>0.985814</td>\n",
              "      <td>1.011343</td>\n",
              "      <td>0.999718</td>\n",
              "      <td>1.016960</td>\n",
              "      <td>0.968264</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.995010</td>\n",
              "      <td>0.982784</td>\n",
              "      <td>0.930302</td>\n",
              "      <td>1.007979</td>\n",
              "      <td>0.987780</td>\n",
              "      <td>1.004867</td>\n",
              "      <td>1.016462</td>\n",
              "      <td>0.974010</td>\n",
              "      <td>0.989420</td>\n",
              "      <td>0.953660</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.014507</td>\n",
              "      <td>0.979461</td>\n",
              "      <td>0.911670</td>\n",
              "      <td>0.994133</td>\n",
              "      <td>0.982287</td>\n",
              "      <td>1.015997</td>\n",
              "      <td>1.056143</td>\n",
              "      <td>0.985023</td>\n",
              "      <td>1.016895</td>\n",
              "      <td>0.997951</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.002013</td>\n",
              "      <td>0.954792</td>\n",
              "      <td>0.900662</td>\n",
              "      <td>1.021865</td>\n",
              "      <td>0.973629</td>\n",
              "      <td>1.049051</td>\n",
              "      <td>1.055247</td>\n",
              "      <td>0.964175</td>\n",
              "      <td>1.034740</td>\n",
              "      <td>0.988246</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.067582</td>\n",
              "      <td>0.992955</td>\n",
              "      <td>0.867712</td>\n",
              "      <td>0.984970</td>\n",
              "      <td>0.997916</td>\n",
              "      <td>1.070905</td>\n",
              "      <td>1.066097</td>\n",
              "      <td>1.015401</td>\n",
              "      <td>0.986589</td>\n",
              "      <td>1.007328</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d9b1de6e-7022-48ec-9b5a-c67285b224e2')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d9b1de6e-7022-48ec-9b5a-c67285b224e2 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d9b1de6e-7022-48ec-9b5a-c67285b224e2');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 593
        }
      ],
      "source": [
        "bfilled_prices = prices.fillna(method='bfill')\n",
        "bfilled_prices.head(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yEPAnHv-WUVv"
      },
      "source": [
        "But again, the best choice in this case (since we are still using time series data, handling multiple time series at once) is still to simply drop the missing values."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 594,
      "metadata": {
        "id": "GSvmlqNlWUVv",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "56996360-60bf-4679-acf9-7a6853812783"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          0         1         2         3         4         5         6  \\\n",
              "0  1.007346  0.981841  0.977915  0.986911  1.003548  0.985814  1.011343   \n",
              "1  0.995010  0.982784  0.930302  1.007979  0.987780  1.004867  1.016462   \n",
              "2  1.014507  0.979461  0.911670  0.994133  0.982287  1.015997  1.056143   \n",
              "3  1.002013  0.954792  0.900662  1.021865  0.973629  1.049051  1.055247   \n",
              "4  1.067582  0.992955  0.867712  0.984970  0.997916  1.070905  1.066097   \n",
              "\n",
              "          7         8         9  \n",
              "0  0.999718  1.016960  0.968264  \n",
              "1  0.974010  0.989420  0.953660  \n",
              "2  0.985023  1.016895  0.997951  \n",
              "3  0.964175  1.034740  0.988246  \n",
              "4  1.015401  0.986589  1.007328  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5ca23b87-a396-4fd2-8b5d-705101041849\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.007346</td>\n",
              "      <td>0.981841</td>\n",
              "      <td>0.977915</td>\n",
              "      <td>0.986911</td>\n",
              "      <td>1.003548</td>\n",
              "      <td>0.985814</td>\n",
              "      <td>1.011343</td>\n",
              "      <td>0.999718</td>\n",
              "      <td>1.016960</td>\n",
              "      <td>0.968264</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.995010</td>\n",
              "      <td>0.982784</td>\n",
              "      <td>0.930302</td>\n",
              "      <td>1.007979</td>\n",
              "      <td>0.987780</td>\n",
              "      <td>1.004867</td>\n",
              "      <td>1.016462</td>\n",
              "      <td>0.974010</td>\n",
              "      <td>0.989420</td>\n",
              "      <td>0.953660</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.014507</td>\n",
              "      <td>0.979461</td>\n",
              "      <td>0.911670</td>\n",
              "      <td>0.994133</td>\n",
              "      <td>0.982287</td>\n",
              "      <td>1.015997</td>\n",
              "      <td>1.056143</td>\n",
              "      <td>0.985023</td>\n",
              "      <td>1.016895</td>\n",
              "      <td>0.997951</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.002013</td>\n",
              "      <td>0.954792</td>\n",
              "      <td>0.900662</td>\n",
              "      <td>1.021865</td>\n",
              "      <td>0.973629</td>\n",
              "      <td>1.049051</td>\n",
              "      <td>1.055247</td>\n",
              "      <td>0.964175</td>\n",
              "      <td>1.034740</td>\n",
              "      <td>0.988246</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.067582</td>\n",
              "      <td>0.992955</td>\n",
              "      <td>0.867712</td>\n",
              "      <td>0.984970</td>\n",
              "      <td>0.997916</td>\n",
              "      <td>1.070905</td>\n",
              "      <td>1.066097</td>\n",
              "      <td>1.015401</td>\n",
              "      <td>0.986589</td>\n",
              "      <td>1.007328</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5ca23b87-a396-4fd2-8b5d-705101041849')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5ca23b87-a396-4fd2-8b5d-705101041849 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5ca23b87-a396-4fd2-8b5d-705101041849');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 594
        }
      ],
      "source": [
        "dropped_prices = prices.dropna()\n",
        "dropped_prices.head(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "F3-c1GLgWUVv"
      },
      "source": [
        "#### Time Series Analysis with pandas\n",
        "\n",
        "Using the built-in statistics methods for `DataFrames`, we can perform calculations on multiple time series at once! The code to perform calculations on `DataFrames` here is almost exactly the same as the methods used for `Series` above, so don't worry about re-learning everything.\n",
        "\n",
        "The `plot()` method makes another appearance here, this time with a built-in legend that corresponds to the names of the columns that you are plotting."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 595,
      "metadata": {
        "id": "M5RSV_kGWUVv",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "4a825358-ce3f-493b-c906-11c95c8feabe"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "prices.plot()\n",
        "plt.title(\"Collected Stock Prices\")\n",
        "plt.ylabel(\"Price\")\n",
        "plt.xlabel(\"Date\");"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RV4mkYpcWUVv"
      },
      "source": [
        "The same statistical functions from our interactions with `Series` resurface here with the addition of the `axis` parameter. By specifying the `axis`, we tell pandas to calculate the desired function along either the rows (`axis=0`) or the columns (`axis=1`). We can easily calculate the mean of each columns like so:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 596,
      "metadata": {
        "id": "ft_URNMvWUVv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cd02fc7c-79ea-4273-c566-b439f3bfc996"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    1.053323\n",
              "1    1.253373\n",
              "2    1.022049\n",
              "3    1.130829\n",
              "4    0.851087\n",
              "5    1.350454\n",
              "6    1.114406\n",
              "7    1.054696\n",
              "8    0.972442\n",
              "9    1.150591\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 596
        }
      ],
      "source": [
        "prices.mean(axis=0)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6nwJI1KLWUVw"
      },
      "source": [
        "As well as the standard deviation:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 597,
      "metadata": {
        "id": "BQ2E_RaJWUVw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "af181193-bd90-405b-e15f-b64f551ef257"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    0.093310\n",
              "1    0.263937\n",
              "2    0.070627\n",
              "3    0.156980\n",
              "4    0.106424\n",
              "5    0.253958\n",
              "6    0.088990\n",
              "7    0.152400\n",
              "8    0.068152\n",
              "9    0.183620\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 597
        }
      ],
      "source": [
        "prices.std(axis=0)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Q5r5GEufWUVw"
      },
      "source": [
        "Again, the `describe()` function will provide us with summary statistics of our data if we would rather have all of our typical statistics in a convenient visual instead of calculating them individually."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 598,
      "metadata": {
        "id": "ySLuEkNBWUVw",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "outputId": "9c1e8f9d-f474-4ed9-ba51-ccd0ac0ec396"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                0           1           2           3           4           5  \\\n",
              "count  100.000000  100.000000  100.000000  100.000000  100.000000  100.000000   \n",
              "mean     1.053323    1.253373    1.022049    1.130829    0.851087    1.350454   \n",
              "std      0.093310    0.263937    0.070627    0.156980    0.106424    0.253958   \n",
              "min      0.902068    0.929989    0.867712    0.860211    0.676513    0.985814   \n",
              "25%      0.983256    1.052208    0.964605    0.995385    0.749055    1.159280   \n",
              "50%      1.029106    1.140014    1.019251    1.156172    0.862975    1.278228   \n",
              "75%      1.107309    1.452258    1.078070    1.228103    0.948900    1.572147   \n",
              "max      1.279302    1.938231    1.182136    1.537985    1.025876    1.910021   \n",
              "\n",
              "                6           7           8           9  \n",
              "count  100.000000  100.000000  100.000000  100.000000  \n",
              "mean     1.114406    1.054696    0.972442    1.150591  \n",
              "std      0.088990    0.152400    0.068152    0.183620  \n",
              "min      0.927363    0.803749    0.815358    0.872533  \n",
              "25%      1.055919    0.963881    0.930432    0.989960  \n",
              "50%      1.126976    1.023301    0.962580    1.155873  \n",
              "75%      1.171169    1.128387    1.014057    1.300317  \n",
              "max      1.284899    1.416096    1.141067    1.540038  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0b4934b2-3146-4e51-b4ef-7867d0f79dc9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>100.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>100.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>1.053323</td>\n",
              "      <td>1.253373</td>\n",
              "      <td>1.022049</td>\n",
              "      <td>1.130829</td>\n",
              "      <td>0.851087</td>\n",
              "      <td>1.350454</td>\n",
              "      <td>1.114406</td>\n",
              "      <td>1.054696</td>\n",
              "      <td>0.972442</td>\n",
              "      <td>1.150591</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.093310</td>\n",
              "      <td>0.263937</td>\n",
              "      <td>0.070627</td>\n",
              "      <td>0.156980</td>\n",
              "      <td>0.106424</td>\n",
              "      <td>0.253958</td>\n",
              "      <td>0.088990</td>\n",
              "      <td>0.152400</td>\n",
              "      <td>0.068152</td>\n",
              "      <td>0.183620</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.902068</td>\n",
              "      <td>0.929989</td>\n",
              "      <td>0.867712</td>\n",
              "      <td>0.860211</td>\n",
              "      <td>0.676513</td>\n",
              "      <td>0.985814</td>\n",
              "      <td>0.927363</td>\n",
              "      <td>0.803749</td>\n",
              "      <td>0.815358</td>\n",
              "      <td>0.872533</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.983256</td>\n",
              "      <td>1.052208</td>\n",
              "      <td>0.964605</td>\n",
              "      <td>0.995385</td>\n",
              "      <td>0.749055</td>\n",
              "      <td>1.159280</td>\n",
              "      <td>1.055919</td>\n",
              "      <td>0.963881</td>\n",
              "      <td>0.930432</td>\n",
              "      <td>0.989960</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>1.029106</td>\n",
              "      <td>1.140014</td>\n",
              "      <td>1.019251</td>\n",
              "      <td>1.156172</td>\n",
              "      <td>0.862975</td>\n",
              "      <td>1.278228</td>\n",
              "      <td>1.126976</td>\n",
              "      <td>1.023301</td>\n",
              "      <td>0.962580</td>\n",
              "      <td>1.155873</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>1.107309</td>\n",
              "      <td>1.452258</td>\n",
              "      <td>1.078070</td>\n",
              "      <td>1.228103</td>\n",
              "      <td>0.948900</td>\n",
              "      <td>1.572147</td>\n",
              "      <td>1.171169</td>\n",
              "      <td>1.128387</td>\n",
              "      <td>1.014057</td>\n",
              "      <td>1.300317</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.279302</td>\n",
              "      <td>1.938231</td>\n",
              "      <td>1.182136</td>\n",
              "      <td>1.537985</td>\n",
              "      <td>1.025876</td>\n",
              "      <td>1.910021</td>\n",
              "      <td>1.284899</td>\n",
              "      <td>1.416096</td>\n",
              "      <td>1.141067</td>\n",
              "      <td>1.540038</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0b4934b2-3146-4e51-b4ef-7867d0f79dc9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-0b4934b2-3146-4e51-b4ef-7867d0f79dc9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-0b4934b2-3146-4e51-b4ef-7867d0f79dc9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 598
        }
      ],
      "source": [
        "prices.describe()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0bh3ubdSWUVw"
      },
      "source": [
        "We can scale and add scalars to our `DataFrame`, as you might suspect after dealing with `Series`. This again works element-wise."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 599,
      "metadata": {
        "id": "f_L776O2WUVw",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "dc1c5b7e-8c43-4082-9b98-29fe3066de1f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           0          1          2          3          4          5  \\\n",
              "0 -47.985308 -48.036319 -48.044170 -48.026177 -47.992905 -48.028371   \n",
              "1 -48.009980 -48.034433 -48.139395 -47.984042 -48.024439 -47.990265   \n",
              "2 -47.970985 -48.041079 -48.176661 -48.011735 -48.035426 -47.968007   \n",
              "3 -47.995974 -48.090417 -48.198676 -47.956271 -48.052742 -47.901898   \n",
              "4 -47.864835 -48.014091 -48.264577 -48.030061 -48.004168 -47.858189   \n",
              "\n",
              "           6          7          8          9  \n",
              "0 -47.977314 -48.000564 -47.966080 -48.063471  \n",
              "1 -47.967076 -48.051981 -48.021160 -48.092680  \n",
              "2 -47.887715 -48.029954 -47.966210 -48.004098  \n",
              "3 -47.889505 -48.071650 -47.930520 -48.023508  \n",
              "4 -47.867805 -47.969199 -48.026821 -47.985344  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-33038de5-817c-4c04-976e-57cb58a3fc91\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-47.985308</td>\n",
              "      <td>-48.036319</td>\n",
              "      <td>-48.044170</td>\n",
              "      <td>-48.026177</td>\n",
              "      <td>-47.992905</td>\n",
              "      <td>-48.028371</td>\n",
              "      <td>-47.977314</td>\n",
              "      <td>-48.000564</td>\n",
              "      <td>-47.966080</td>\n",
              "      <td>-48.063471</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-48.009980</td>\n",
              "      <td>-48.034433</td>\n",
              "      <td>-48.139395</td>\n",
              "      <td>-47.984042</td>\n",
              "      <td>-48.024439</td>\n",
              "      <td>-47.990265</td>\n",
              "      <td>-47.967076</td>\n",
              "      <td>-48.051981</td>\n",
              "      <td>-48.021160</td>\n",
              "      <td>-48.092680</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-47.970985</td>\n",
              "      <td>-48.041079</td>\n",
              "      <td>-48.176661</td>\n",
              "      <td>-48.011735</td>\n",
              "      <td>-48.035426</td>\n",
              "      <td>-47.968007</td>\n",
              "      <td>-47.887715</td>\n",
              "      <td>-48.029954</td>\n",
              "      <td>-47.966210</td>\n",
              "      <td>-48.004098</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-47.995974</td>\n",
              "      <td>-48.090417</td>\n",
              "      <td>-48.198676</td>\n",
              "      <td>-47.956271</td>\n",
              "      <td>-48.052742</td>\n",
              "      <td>-47.901898</td>\n",
              "      <td>-47.889505</td>\n",
              "      <td>-48.071650</td>\n",
              "      <td>-47.930520</td>\n",
              "      <td>-48.023508</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-47.864835</td>\n",
              "      <td>-48.014091</td>\n",
              "      <td>-48.264577</td>\n",
              "      <td>-48.030061</td>\n",
              "      <td>-48.004168</td>\n",
              "      <td>-47.858189</td>\n",
              "      <td>-47.867805</td>\n",
              "      <td>-47.969199</td>\n",
              "      <td>-48.026821</td>\n",
              "      <td>-47.985344</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-33038de5-817c-4c04-976e-57cb58a3fc91')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-33038de5-817c-4c04-976e-57cb58a3fc91 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-33038de5-817c-4c04-976e-57cb58a3fc91');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 599
        }
      ],
      "source": [
        "(2 * prices - 50).head(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5_cg1eBiWUVw"
      },
      "source": [
        "Here we use the `pct_change()` method to get a `DataFrame` of the multiplicative returns of the securities that we are looking at."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zku7hk3zWUVw"
      },
      "outputs": [],
      "source": [
        "mult_returns = prices.pct_change()[1:]\n",
        "mult_returns.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QkEAAINRWUVw"
      },
      "source": [
        "If we use our statistics methods to standardize the returns, a common procedure when examining data, then we can get a better idea of how they all move relative to each other on the same scale."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 600,
      "metadata": {
        "id": "saPQR-AaWUVw",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "4be155f4-6276-4ad6-8e58-03270082c2d5"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "norm_returns = (mult_returns - mult_returns.mean(axis=0))/mult_returns.std(axis=0)\n",
        "norm_returns.loc['2014-01-01':'2015-01-01'].plot();"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "R8JwiheiWUVx"
      },
      "source": [
        "This makes it easier to compare the motion of the different time series contained in our example."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CdlJkcg5WUVx"
      },
      "source": [
        "Rolling means and standard deviations also work with `DataFrames`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 601,
      "metadata": {
        "collapsed": true,
        "id": "45qsA2VhWUVx",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 310
        },
        "outputId": "58777ecd-11fd-4c51-bb85-56b7a6bbf0b4"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-601-aa0a0775c2d9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mrolling_mean\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrolling_mean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprices\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m30\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mrolling_mean\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/__init__.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(name)\u001b[0m\n\u001b[1;32m    242\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0m_SparseArray\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    243\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 244\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"module 'pandas' has no attribute '{name}'\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    245\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    246\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: module 'pandas' has no attribute 'rolling_mean'"
          ]
        }
      ],
      "source": [
        "rolling_mean = pd.rolling_mean(prices, 30)\n",
        "rolling_mean.columns = prices.columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 602,
      "metadata": {
        "id": "k4nKj3r5WUVx",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "41494203-d2d9-4c03-c1db-83892bfaf93a"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "rolling_mean.plot()\n",
        "plt.title(\"Rolling Mean of Prices\")\n",
        "plt.xlabel(\"Date\")\n",
        "plt.ylabel(\"Price\")\n",
        "plt.legend();"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "h4ZJABVIWUVx"
      },
      "source": [
        "For a complete list of all the methods that are built into `DataFrame`s, check out the [documentation](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5n59MVIiWUVx"
      },
      "source": [
        "# Next Steps\n",
        "\n",
        "Managing data gets a lot easier when you deal with pandas, though this has been a very general introduction. There are many more tools within the package which you may discover while trying to get your data to do precisely what you want. If you would rather read more on the additional capabilities of pandas, check out the [documentation](http://pandas.pydata.org/pandas-docs/stable/)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "collapsed": true,
        "id": "1srsOru6WUVx"
      },
      "source": [
        "*This presentation is for informational purposes only and does not constitute an offer to sell, a solicitation to buy, or a recommendation for any security; nor does it constitute an offer to provide investment advisory or other services by Quantopian, Inc. (\"Quantopian\"). Nothing contained herein constitutes investment advice or offers any opinion with respect to the suitability of any security, and any views expressed herein should not be taken as advice to buy, sell, or hold any security or as an endorsement of any security or company.  In preparing the information contained herein, Quantopian, Inc. has not taken into account the investment needs, objectives, and financial circumstances of any particular investor. Any views expressed and data illustrated herein were prepared based upon information, believed to be reliable, available to Quantopian, Inc. at the time of publication. Quantopian makes no guarantees as to their accuracy or completeness. All information is subject to change and may quickly become unreliable for various reasons, including changes in market conditions or economic circumstances.*"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dQbENH6mexTd"
      },
      "source": [
        "<div align=\"center\">\n",
        "<img style=\"display: block; margin: auto;\" alt=\"photo\" src=\"https://cdn.quantconnect.com/web/i/icon.png\">\n",
        "</div>\n",
        "\n",
        "Quantconnect\n",
        "\n",
        "Introduction to Financial Python\n",
        "</div>\n",
        "\n",
        "# NumPy and Basic Pandas\n",
        "\n",
        "# Introduction\n",
        "\n",
        "Now that we have introduced the fundamentals of Python, it's time to learn about NumPy and Pandas.\n",
        "\n",
        "# NumPy\n",
        "NumPy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays. It also has strong integration with Pandas, which is another powerful tool for manipulating financial data.\n",
        "\n",
        "Python packages like NumPy and Pandas contain classes and methods which we can use by importing the package:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 603,
      "metadata": {
        "id": "aIESp-rdO58h"
      },
      "outputs": [],
      "source": [
        "import numpy as np"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GScHHJ5ke7ea"
      },
      "source": [
        "## Basic NumPy Arrays\n",
        "A NumPy array is a grid of values, all of the same type, and is indexed by a tuple of nonnegative integers. Here we make an array by passing a list of Apple stock prices:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 604,
      "metadata": {
        "id": "lZI1wkwDO58i",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d3fc0522-beb4-4954-c382-f4c7ba56e8a8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[143.73 145.83 143.68 144.02 143.5  142.62] <class 'numpy.ndarray'>\n"
          ]
        }
      ],
      "source": [
        "price_list = [143.73, 145.83, 143.68, 144.02, 143.5, 142.62]\n",
        "price_array = np.array(price_list)\n",
        "print(price_array, type(price_array))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 141**"
      ],
      "metadata": {
        "id": "XZ8QuOSbiUAv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "peso_lista =[65.9, 77.8, 99.0, 58.9]\n",
        "peso_array = np.array(peso_lista)\n",
        "print(peso_array, type(peso_array))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "biYSt-_eiVzC",
        "outputId": "29ba17ea-3af9-4a5a-f00e-b30bf7f312fd"
      },
      "execution_count": 605,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[65.9 77.8 99.  58.9] <class 'numpy.ndarray'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-5Yj6u9ifB-t"
      },
      "source": [
        "Notice that the type of array is \"ndarray\" which is a multi-dimensional array. If we pass np.array() a list of lists, it will create a 2-dimensional array."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 606,
      "metadata": {
        "id": "obvIZrK-O58j",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2567191f-ef5c-4c3e-9233-5b0e10bd360b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1 3]\n",
            " [2 4]] <class 'numpy.ndarray'>\n"
          ]
        }
      ],
      "source": [
        "Ar = np.array([[1,3],[2,4]])\n",
        "print(Ar, type(Ar))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 142**"
      ],
      "metadata": {
        "id": "k3ECk00Tir8H"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Array = np.array([[3,6],[5,7]])\n",
        "print(Array, type(Array))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bANYjYGFitz3",
        "outputId": "220e85e2-876a-4d60-c76a-debbc4025204"
      },
      "execution_count": 608,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[3 6]\n",
            " [5 7]] <class 'numpy.ndarray'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uDdfLD9HfHkl"
      },
      "source": [
        "We get the dimensions of an ndarray using the .shape attribute:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 609,
      "metadata": {
        "id": "G2txdn73O58j",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "30fcf14d-e0b5-4b6e-90d2-07620c2be1b5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(2, 2)\n"
          ]
        }
      ],
      "source": [
        "print(Ar.shape)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 143**"
      ],
      "metadata": {
        "id": "aFFefWh4i5vJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(Array.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cli_Ps9mi8Ad",
        "outputId": "1de98001-cf6f-4d3a-e665-0d9ad5ad28d3"
      },
      "execution_count": 610,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(2, 2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "87W5ueORfPEy"
      },
      "source": [
        "If we create an 2-dimensional array (i.e. matrix), each row can be accessed by index:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 611,
      "metadata": {
        "id": "x_QV9aPbO58j",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6417fe4d-d7b8-4de4-aa10-50a9fd383663"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1 3]\n",
            "[2 4]\n"
          ]
        }
      ],
      "source": [
        "print(Ar[0])\n",
        "print(Ar[1])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 144**"
      ],
      "metadata": {
        "id": "gTWccZSajAT0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(Array[0])\n",
        "print(Array[1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NQy7obZqjCGr",
        "outputId": "7c176bb2-7cf1-41fd-97aa-da39d54a461e"
      },
      "execution_count": 612,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[3 6]\n",
            "[5 7]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5Hke7Vt-fSGB"
      },
      "source": [
        "If we want to access the matrix by column instead:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 613,
      "metadata": {
        "id": "gHVwbPfOO58j",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4408bbfd-e09b-48e1-ec90-ed7f4f26c5d2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "the first column:  [1 2]\n",
            "the second column:  [3 4]\n"
          ]
        }
      ],
      "source": [
        "print('the first column: ', Ar[:,0])\n",
        "print('the second column: ', Ar[:,1])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 145**"
      ],
      "metadata": {
        "id": "tDqViAijjKbN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print('the first column: ', Array[:,0])\n",
        "print('the second column: ', Array[:,1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MBasFsCTjMY0",
        "outputId": "1b149280-fc94-4014-94fb-95620d1a36ca"
      },
      "execution_count": 614,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "the first column:  [3 5]\n",
            "the second column:  [6 7]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "T61cD0HMfStB"
      },
      "source": [
        "## Array Functions\n",
        "Some functions built in NumPy that allow us to perform calculations on arrays. For example, we can apply the natural logarithm to each element of an array:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 615,
      "metadata": {
        "id": "PKhwtJ7XO58k",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2a624411-d073-4023-d2c2-85243f5f61c6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[4.96793654 4.98244156 4.9675886  4.96995218 4.96633504 4.96018375]\n"
          ]
        }
      ],
      "source": [
        "print(np.log(price_array))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 146**"
      ],
      "metadata": {
        "id": "Z2WPS1IXjW5s"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(np.log(peso_array))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OG5e5P5LjcIr",
        "outputId": "26d1c33f-70ec-404e-d157-4e6f27595b4c"
      },
      "execution_count": 616,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[4.18813844 4.35414143 4.59511985 4.07584109]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uzjBRFBLfZ-D"
      },
      "source": [
        "Other functions return a single value:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 617,
      "metadata": {
        "id": "nQuABZqUO58k",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3ee861d3-a4e7-4a56-ce98-21a73652f7b9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "143.89666666666668\n",
            "0.9673790478515796\n",
            "863.38\n",
            "145.83\n"
          ]
        }
      ],
      "source": [
        "print(np.mean(price_array))\n",
        "print(np.std(price_array))\n",
        "print(np.sum(price_array))\n",
        "print(np.max(price_array))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 147**"
      ],
      "metadata": {
        "id": "mfV7Y1R2jgbM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(np.mean(peso_array))\n",
        "print(np.std(peso_array))\n",
        "print(np.sum(peso_array))\n",
        "print(np.max(peso_array))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZtJYM2lNjip6",
        "outputId": "3ec27ab2-e197-4fef-ed99-c106546b548d"
      },
      "execution_count": 618,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "75.39999999999999\n",
            "15.208714607092869\n",
            "301.59999999999997\n",
            "99.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IRW95BsifgDB"
      },
      "source": [
        "The functions above return the mean, standard deviation, total and maximum value of an array.\n",
        "\n",
        "# Pandas\n",
        "Pandas is one of the most powerful tools for dealing with financial data. \n",
        "\n",
        "First we need to import Pandas:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 619,
      "metadata": {
        "id": "xIYH4oUfO58k"
      },
      "outputs": [],
      "source": [
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zOig5gORfnJU"
      },
      "source": [
        "## Series\n",
        "Series is a one-dimensional labeled array capable of holding any data type (integers, strings, float, Python object, etc.)\n",
        "\n",
        "We create a Series by calling pd.Series(data), where data can be a dictionary, an array or just a scalar value."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 620,
      "metadata": {
        "id": "JmzoNzrPO58k",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6b0c48a7-f873-45ad-e80d-ff3945169c42"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    143.73\n",
              "1    145.83\n",
              "2    143.68\n",
              "3    144.02\n",
              "4    143.50\n",
              "5    142.62\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 620
        }
      ],
      "source": [
        "price = [143.73, 145.83, 143.68, 144.02, 143.5, 142.62]\n",
        "s = pd.Series(price)\n",
        "s"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 148**"
      ],
      "metadata": {
        "id": "q_hjs-Kpjp_C"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "peso = [65.9, 77.8, 99.0, 58.9]\n",
        "p = pd.Series(peso)\n",
        "p"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5R6HHc-Ojr-g",
        "outputId": "5a22136a-1b4b-4a80-a838-9d40bcc70719"
      },
      "execution_count": 621,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    65.9\n",
              "1    77.8\n",
              "2    99.0\n",
              "3    58.9\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 621
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tP5iDnunfq46"
      },
      "source": [
        "We can customize the indices of a new Series:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 622,
      "metadata": {
        "id": "eswQC3ZPO58l",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b9127fb3-76c9-4d7e-df4e-095b62061bb8"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "a    143.73\n",
              "b    145.83\n",
              "c    143.68\n",
              "d    144.02\n",
              "e    143.50\n",
              "f    142.62\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 622
        }
      ],
      "source": [
        "s = pd.Series(price,index = ['a','b','c','d','e','f'])\n",
        "s"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 149**"
      ],
      "metadata": {
        "id": "ZEEeOEMnj2W5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "p = pd.Series(peso,index=['I','II','III','IV'])\n",
        "p"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nd-odRB5j4xs",
        "outputId": "5f39ab02-2fe9-4fee-8965-fbe5fdd3bc85"
      },
      "execution_count": 623,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "I      65.9\n",
              "II     77.8\n",
              "III    99.0\n",
              "IV     58.9\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 623
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wdZrb8pEfuua"
      },
      "source": [
        "Or we can change the indices of an existing Series:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 624,
      "metadata": {
        "id": "MwlRnPF6O58l",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "96d53c0f-7331-4017-cbd8-b2b26590b9f9"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6    143.73\n",
              "5    145.83\n",
              "4    143.68\n",
              "3    144.02\n",
              "2    143.50\n",
              "1    142.62\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 624
        }
      ],
      "source": [
        "s.index = [6,5,4,3,2,1]\n",
        "s"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 150**"
      ],
      "metadata": {
        "id": "AZrAqKPZkWMo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "p.index = [1,2,3,4]\n",
        "p"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4fhTWlxakYnd",
        "outputId": "77476a5e-564b-4f2b-aa3c-111136da920a"
      },
      "execution_count": 625,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1    65.9\n",
              "2    77.8\n",
              "3    99.0\n",
              "4    58.9\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 625
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6cGNQZwLfxIz"
      },
      "source": [
        "Series is like a list since it can be sliced by index:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 626,
      "metadata": {
        "id": "N9bBSg6cO58l",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4d0e167b-2887-423d-9400-7c386fb0604d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5    145.83\n",
            "4    143.68\n",
            "3    144.02\n",
            "2    143.50\n",
            "1    142.62\n",
            "dtype: float64\n",
            "6    143.73\n",
            "5    145.83\n",
            "4    143.68\n",
            "3    144.02\n",
            "dtype: float64\n"
          ]
        }
      ],
      "source": [
        "print(s[1:])\n",
        "print(s[:-2])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 151**"
      ],
      "metadata": {
        "id": "0Rw2JwxrkhiU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(p[1:])\n",
        "print(p[:-1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ByFoRuixkkE8",
        "outputId": "4bdc4575-274d-4fb7-a865-b7c1699a4112"
      },
      "execution_count": 627,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2    77.8\n",
            "3    99.0\n",
            "4    58.9\n",
            "dtype: float64\n",
            "1    65.9\n",
            "2    77.8\n",
            "3    99.0\n",
            "dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5V25nViZfz3Z"
      },
      "source": [
        "Series is also like a dictionary whose values can be set or fetched by index label:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 628,
      "metadata": {
        "id": "b3Y0kKGYO58l",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bf95d681-76ea-4f3b-bbe5-15d2ee293f0d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "143.68\n",
            "6    143.73\n",
            "5    145.83\n",
            "4      0.00\n",
            "3    144.02\n",
            "2    143.50\n",
            "1    142.62\n",
            "dtype: float64\n"
          ]
        }
      ],
      "source": [
        "print(s[4])\n",
        "s[4] = 0\n",
        "print(s)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 152**"
      ],
      "metadata": {
        "id": "lqIxS5uCkqJa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(p[2])\n",
        "p[2]=1\n",
        "print(p)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KBvje9lSkssG",
        "outputId": "426d200b-2afe-4409-d534-2ee366bfda2f"
      },
      "execution_count": 629,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "77.8\n",
            "1    65.9\n",
            "2     1.0\n",
            "3    99.0\n",
            "4    58.9\n",
            "dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RQ1P7Gkyf060"
      },
      "source": [
        "Series can also have a name attribute, which will be used when we make up a Pandas DataFrame using several series."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 630,
      "metadata": {
        "id": "ZeD4-p7KO58m",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a3be400d-9684-48b8-f8cf-a14e8b76a75d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0    143.73\n",
            "1    145.83\n",
            "2    143.68\n",
            "3    144.02\n",
            "4    143.50\n",
            "5    142.62\n",
            "Name: Apple Price List, dtype: float64\n",
            "Apple Price List\n"
          ]
        }
      ],
      "source": [
        "s = pd.Series(price, name = 'Apple Price List')\n",
        "print(s)\n",
        "print(s.name)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 153**"
      ],
      "metadata": {
        "id": "VGmKElAnkyVk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "p = pd.Series(peso, name='Peso')\n",
        "print(p)\n",
        "print(p.name)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FEbqBW3Ck0MO",
        "outputId": "8a20379d-75c1-4928-bff5-f24edcf97c8e"
      },
      "execution_count": 631,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0    65.9\n",
            "1    77.8\n",
            "2    99.0\n",
            "3    58.9\n",
            "Name: Peso, dtype: float64\n",
            "Peso\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "geJb1pGHf5Et"
      },
      "source": [
        "We can get the statistical summaries of a Series:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 632,
      "metadata": {
        "id": "mGPtFcjegm4i",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ad7dc0e8-a522-4203-cfe0-ee897b4d1365"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "count      6.000000\n",
            "mean     143.896667\n",
            "std        1.059711\n",
            "min      142.620000\n",
            "25%      143.545000\n",
            "50%      143.705000\n",
            "75%      143.947500\n",
            "max      145.830000\n",
            "Name: Apple Price List, dtype: float64\n"
          ]
        }
      ],
      "source": [
        "print(s.describe())"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 154**"
      ],
      "metadata": {
        "id": "T7vulM8Zk9BF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(p.describe())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LJf3ZP1UlAo6",
        "outputId": "46b96d90-6a85-4ca6-f178-b7aafb63e9d8"
      },
      "execution_count": 633,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "count     4.000000\n",
            "mean     75.400000\n",
            "std      17.561511\n",
            "min      58.900000\n",
            "25%      64.150000\n",
            "50%      71.850000\n",
            "75%      83.100000\n",
            "max      99.000000\n",
            "Name: Peso, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LkdZu-CDgvlR"
      },
      "source": [
        "## Time Index\n",
        "Pandas has a built-in function specifically for creating date indices: pd.date_range(). We use it to create a new index for our Series:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 634,
      "metadata": {
        "id": "HJe5hU4zO58m",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "87072237-b547-4276-85c0-ef78a7992989"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DatetimeIndex(['2017-01-01', '2017-01-02', '2017-01-03', '2017-01-04',\n",
            "               '2017-01-05', '2017-01-06'],\n",
            "              dtype='datetime64[ns]', freq='D')\n",
            "2017-01-01    143.73\n",
            "2017-01-02    145.83\n",
            "2017-01-03    143.68\n",
            "2017-01-04    144.02\n",
            "2017-01-05    143.50\n",
            "2017-01-06    142.62\n",
            "Freq: D, Name: Apple Price List, dtype: float64\n"
          ]
        }
      ],
      "source": [
        "time_index = pd.date_range('2017-01-01',periods = len(s),freq = 'D')\n",
        "print(time_index)\n",
        "s.index = time_index\n",
        "print(s)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 155**"
      ],
      "metadata": {
        "id": "_KCv_WFcmKNX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "indi_time= pd.date_range('2023-02-24',periods = len(p),freq = 'D')\n",
        "print(indi_time)\n",
        "p.index = indi_time\n",
        "print(p)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kyTuIvh2mOXe",
        "outputId": "5b5e8b0f-d54d-40fb-b3d3-cd3cc57c68f8"
      },
      "execution_count": 636,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DatetimeIndex(['2023-02-24', '2023-02-25', '2023-02-26', '2023-02-27'], dtype='datetime64[ns]', freq='D')\n",
            "2023-02-24    65.9\n",
            "2023-02-25    77.8\n",
            "2023-02-26    99.0\n",
            "2023-02-27    58.9\n",
            "Freq: D, Name: Peso, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7WedejFZg19J"
      },
      "source": [
        "Series are usually accessed using the iloc[] and loc[] methods. iloc[] is used to access elements by integer index, and loc[] is used to access the index of the series.\n",
        "\n",
        "iloc[] is necessary when the index of a series are integers, take our previous defined series as example:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 637,
      "metadata": {
        "id": "KrVSOyMvO58m",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a962989a-12c0-481f-8a5e-c18a843deaee"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "6    143.73\n",
            "5    145.83\n",
            "4    143.68\n",
            "3    144.02\n",
            "2    143.50\n",
            "1    142.62\n",
            "Name: Apple Price List, dtype: float64\n",
            "142.62\n"
          ]
        }
      ],
      "source": [
        "s.index = [6,5,4,3,2,1]\n",
        "print(s)\n",
        "print(s[1])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 156**"
      ],
      "metadata": {
        "id": "t2zk0ocAlFZU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "p.index = [1,2,3,4]\n",
        "print(p)\n",
        "print(p[2])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jYPNPfZ-lHdI",
        "outputId": "5d719731-a856-4cb3-aade-b2c23ca52e29"
      },
      "execution_count": 638,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1    65.9\n",
            "2    77.8\n",
            "3    99.0\n",
            "4    58.9\n",
            "Name: Peso, dtype: float64\n",
            "77.8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "r30VKPtpg61p"
      },
      "source": [
        "If we intended to take the second element of the series, we would make a mistake here, because the index are integers. In order to access to the element we want, we use iloc[] here:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 639,
      "metadata": {
        "id": "bHukfaAmO58m",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c36b5e71-032c-4817-8eb3-a329654a888a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "145.83\n"
          ]
        }
      ],
      "source": [
        "print(s.iloc[1])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 157**"
      ],
      "metadata": {
        "id": "X1NM5bMJlO9D"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(p.iloc[0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x4vMuNCMlRDA",
        "outputId": "d7569074-ee8b-4586-9c6f-fa27239dfe90"
      },
      "execution_count": 640,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "65.9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kHVBRL_Rg84j"
      },
      "source": [
        "While working with time series data, we often use time as the index. Pandas provides us with various methods to access the data by time index"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 641,
      "metadata": {
        "id": "FCf8Hg7jO58n",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7cb78d6c-d0aa-4359-8195-f3e98a1e68d0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "143.68\n"
          ]
        }
      ],
      "source": [
        "s.index = time_index\n",
        "print(s['2017-01-03'])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 158**"
      ],
      "metadata": {
        "id": "5-mCqzczmjd7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "p.index = indi_time\n",
        "print(p['2023-02-24'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gpxOu87tmnWs",
        "outputId": "993ea3c5-0d8b-476b-c9ec-59c45704dc69"
      },
      "execution_count": 644,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "65.9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XJXcrSFpg-To"
      },
      "source": [
        "We can even access to a range of dates:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 645,
      "metadata": {
        "id": "NsE-Lr_9O58n",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "27bada0d-f19a-4880-f62e-f77de81b4e3a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2017-01-02    145.83\n",
            "2017-01-03    143.68\n",
            "2017-01-04    144.02\n",
            "2017-01-05    143.50\n",
            "Freq: D, Name: Apple Price List, dtype: float64\n"
          ]
        }
      ],
      "source": [
        "print(s['2017-01-02':'2017-01-05'])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 159**"
      ],
      "metadata": {
        "id": "v2gTaESglsoy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(p['2017-02-04':'2017-02-05'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e9c86DZKlwnz",
        "outputId": "a5ffb3e9-cd40-4ba1-9edd-56a38244b4f7"
      },
      "execution_count": 646,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Series([], Freq: D, Name: Peso, dtype: float64)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cWA3NCXEhCLB"
      },
      "source": [
        "Series[] provides us a very flexible way to index data. We can add any condition in the square brackets:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 647,
      "metadata": {
        "id": "aawbrg2EO58n",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "781e0f7a-ac81-4982-8219-b67e7c142353"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2017-01-01    143.73\n",
            "2017-01-03    143.68\n",
            "2017-01-05    143.50\n",
            "2017-01-06    142.62\n",
            "Name: Apple Price List, dtype: float64\n",
            "[2017-01-01    False\n",
            "2017-01-02    False\n",
            "2017-01-03    False\n",
            "2017-01-04     True\n",
            "2017-01-05    False\n",
            "2017-01-06    False\n",
            "Freq: D, Name: Apple Price List, dtype: bool]\n"
          ]
        }
      ],
      "source": [
        "print(s[s < np.mean(s)] )\n",
        "print([(s > np.mean(s)) & (s < np.mean(s) + 1.64*np.std(s))])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 160**"
      ],
      "metadata": {
        "id": "F5UvFF9UnJkX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(p[p > np.mean(p)])\n",
        "print([p < np.mean(p)])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PfN914U5nLmE",
        "outputId": "66637423-7b39-4aae-d27f-12ea40371c6c"
      },
      "execution_count": 648,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2023-02-25    77.8\n",
            "2023-02-26    99.0\n",
            "Freq: D, Name: Peso, dtype: float64\n",
            "[2023-02-24     True\n",
            "2023-02-25    False\n",
            "2023-02-26    False\n",
            "2023-02-27     True\n",
            "Freq: D, Name: Peso, dtype: bool]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jAByChIwhEuI"
      },
      "source": [
        "As demonstrated, we can use logical operators like & (and), | (or) and ~ (not) to group multiple conditions.\n",
        "\n",
        "# Summary\n",
        "Here we have introduced NumPy and Pandas for scientific computing in Python. In the next chapter, we will dive into Pandas to learn resampling and manipulating Pandas DataFrame, which are commonly used in financial data analysis."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OtjOpw6oJp6z"
      },
      "source": [
        "<div align=\"center\">\n",
        "<img style=\"display: block; margin: auto;\" alt=\"photo\" src=\"https://cdn.quantconnect.com/web/i/icon.png\"> <img style=\"display: block; margin: auto;\" alt=\"photo\" src=\"https://www.marketing-branding.com/wp-content/uploads/2020/07/google-colaboratory-colab-guia-completa.jpg \" width=\"50\" height=\"50\">\n",
        "<img style=\"display: block; margin: auto;\" alt=\"photo\" src=\"https://upload.wikimedia.org/wikipedia/commons/3/37/Yahoo_Finance_Logo_2019.png\" width=\"50\" height=\"50\">  \n",
        "</div>\n",
        "\n",
        "Quantconnect -> Google Colab with Yahoo Finance data\n",
        "\n",
        "Introduction to Financial Python\n",
        "</div>\n",
        "\n",
        "# Pandas-Resampling and DataFrame\n",
        "\n",
        "# Introduction\n",
        "In the last chapter we had a glimpse of Pandas. In this chapter we will learn about resampling methods and the DataFrame object, which is a powerful tool for financial data analysis.\n",
        "\n",
        "# Fetching Data\n",
        "Here we use the Yahoo Finance to retrieve data.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 649,
      "metadata": {
        "id": "luU8mZTsHW9x",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b44b8056-cc22-4f06-94d5-829105fc77c3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: yfinance in /usr/local/lib/python3.8/dist-packages (0.2.12)\n",
            "Requirement already satisfied: beautifulsoup4>=4.11.1 in /usr/local/lib/python3.8/dist-packages (from yfinance) (4.11.2)\n",
            "Requirement already satisfied: numpy>=1.16.5 in /usr/local/lib/python3.8/dist-packages (from yfinance) (1.22.4)\n",
            "Requirement already satisfied: lxml>=4.9.1 in /usr/local/lib/python3.8/dist-packages (from yfinance) (4.9.2)\n",
            "Requirement already satisfied: frozendict>=2.3.4 in /usr/local/lib/python3.8/dist-packages (from yfinance) (2.3.5)\n",
            "Requirement already satisfied: pandas>=1.3.0 in /usr/local/lib/python3.8/dist-packages (from yfinance) (1.3.5)\n",
            "Requirement already satisfied: requests>=2.26 in /usr/local/lib/python3.8/dist-packages (from yfinance) (2.28.2)\n",
            "Requirement already satisfied: cryptography>=3.3.2 in /usr/local/lib/python3.8/dist-packages (from yfinance) (39.0.1)\n",
            "Requirement already satisfied: appdirs>=1.4.4 in /usr/local/lib/python3.8/dist-packages (from yfinance) (1.4.4)\n",
            "Requirement already satisfied: pytz>=2022.5 in /usr/local/lib/python3.8/dist-packages (from yfinance) (2022.7.1)\n",
            "Requirement already satisfied: multitasking>=0.0.7 in /usr/local/lib/python3.8/dist-packages (from yfinance) (0.0.11)\n",
            "Requirement already satisfied: html5lib>=1.1 in /usr/local/lib/python3.8/dist-packages (from yfinance) (1.1)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.8/dist-packages (from beautifulsoup4>=4.11.1->yfinance) (2.4)\n",
            "Requirement already satisfied: cffi>=1.12 in /usr/local/lib/python3.8/dist-packages (from cryptography>=3.3.2->yfinance) (1.15.1)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.8/dist-packages (from html5lib>=1.1->yfinance) (0.5.1)\n",
            "Requirement already satisfied: six>=1.9 in /usr/local/lib/python3.8/dist-packages (from html5lib>=1.1->yfinance) (1.15.0)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.8/dist-packages (from pandas>=1.3.0->yfinance) (2.8.2)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.8/dist-packages (from requests>=2.26->yfinance) (2022.12.7)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.8/dist-packages (from requests>=2.26->yfinance) (3.0.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.8/dist-packages (from requests>=2.26->yfinance) (2.10)\n",
            "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.8/dist-packages (from requests>=2.26->yfinance) (1.24.3)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.8/dist-packages (from cffi>=1.12->cryptography>=3.3.2->yfinance) (2.21)\n"
          ]
        }
      ],
      "source": [
        "!pip install yfinance"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 650,
      "metadata": {
        "id": "mWZ-nirTZHrE",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 388
        },
        "outputId": "8ed50b6e-26fe-4d64-b607-d5e3b38c2330"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "Exception",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mException\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-650-c8b8d9afa442>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# get stock info\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maapl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;31m# get historical market data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/yfinance/ticker.py\u001b[0m in \u001b[0;36minfo\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    136\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    137\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0minfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 138\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_info\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    139\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    140\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/yfinance/base.py\u001b[0m in \u001b[0;36mget_info\u001b[0;34m(self, proxy)\u001b[0m\n\u001b[1;32m   1473\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget_info\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mproxy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1474\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_quote\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mproxy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mproxy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1475\u001b[0;31m         \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_quote\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1476\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1477\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/yfinance/scrapers/quote.py\u001b[0m in \u001b[0;36minfo\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     93\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0minfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     94\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 95\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_scrape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mproxy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     96\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_scrape_complementary\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mproxy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     97\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/yfinance/scrapers/quote.py\u001b[0m in \u001b[0;36m_scrape\u001b[0;34m(self, proxy)\u001b[0m\n\u001b[1;32m    122\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    123\u001b[0m         \u001b[0;31m# get info and sustainability\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 124\u001b[0;31m         \u001b[0mjson_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_json_data_stores\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mproxy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mproxy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    125\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    126\u001b[0m             \u001b[0mquote_summary_store\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mjson_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'QuoteSummaryStore'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/yfinance/data.py\u001b[0m in \u001b[0;36mwrapped\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     39\u001b[0m         \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m         \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mv\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     42\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m     \u001b[0;31m# copy over the lru_cache extra methods to this wrapper to be able to access them\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/yfinance/data.py\u001b[0m in \u001b[0;36mget_json_data_stores\u001b[0;34m(self, sub_page, proxy)\u001b[0m\n\u001b[1;32m    309\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    310\u001b[0m         \u001b[0;31m# Decrypt!\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 311\u001b[0;31m         \u001b[0mstores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdecrypt_cryptojs_aes_stores\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeys\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    312\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mstores\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    313\u001b[0m             \u001b[0;31m# Maybe Yahoo returned old format, not encrypted\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/yfinance/data.py\u001b[0m in \u001b[0;36mdecrypt_cryptojs_aes_stores\u001b[0;34m(data, keys)\u001b[0m\n\u001b[1;32m    160\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    161\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0msuccess\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 162\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"yfinance failed to decrypt Yahoo data response\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    163\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    164\u001b[0m     \u001b[0mdecoded_stores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloads\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mplaintext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mException\u001b[0m: yfinance failed to decrypt Yahoo data response"
          ]
        }
      ],
      "source": [
        "import yfinance as yf\n",
        "\n",
        "aapl = yf.Ticker(\"AAPL\")\n",
        "\n",
        "# get stock info\n",
        "print(aapl.info)\n",
        "\n",
        "# get historical market data\n",
        "aapl_table = aapl.history(start=\"2016-01-01\",  end=\"2017-12-31\")\n",
        "aapl_table"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NkFztSYhJyVA"
      },
      "source": [
        "We will create a Series named \"aapl\" whose values are Apple's daily closing prices, which are of course indexed by dates:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 651,
      "metadata": {
        "id": "QDJbOpCeHW91",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 168
        },
        "outputId": "5a2f3e43-4ee0-4d4b-84ca-8a50da6ed617"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-651-688b7f20f660>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0maapl\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maapl_table\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Close'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'2017'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'aapl_table' is not defined"
          ]
        }
      ],
      "source": [
        "aapl = aapl_table['Close']['2017']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 652,
      "metadata": {
        "id": "SXfgCQJOHW91",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "61c60c99-4007-42e2-c505-510e355e7618"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "yfinance.Ticker object <AAPL>\n"
          ]
        }
      ],
      "source": [
        "print(aapl)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 161**"
      ],
      "metadata": {
        "id": "xOg9Aq1foqgS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "app = aapl_table['Volume']['2023']"
      ],
      "metadata": {
        "id": "BUXhls7zosX-",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 168
        },
        "outputId": "778cdc5c-1511-4ef4-9a85-274e4aad622c"
      },
      "execution_count": 654,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-654-d53bc16ed953>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mapp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maapl_table\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Volume'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'2023'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'aapl_table' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(app)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 168
        },
        "id": "-vDuDYPHo0EO",
        "outputId": "50b818ed-cce3-4afc-c6ca-ac3ffcd9aae3"
      },
      "execution_count": 655,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-655-a5187e0bf674>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mapp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'app' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "waUEgBhzKEcA"
      },
      "source": [
        "Recall that we can fetch a specific data point using series['yyyy-mm-dd']. We can also fetch the data in a specific month using series['yyyy-mm']."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 656,
      "metadata": {
        "id": "2gS50G0zHW92",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 168
        },
        "outputId": "4b0b20e8-1a82-44a2-92a8-13e31067e577"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-656-088906363e20>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maapl\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'2017-3'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m: 'Ticker' object is not subscriptable"
          ]
        }
      ],
      "source": [
        "print(aapl['2017-3'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vpvxGwXtHW92",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e35fbbfd-bc5d-49a6-884c-c7fe69a53c15"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Date\n",
              "2017-02-01    30.172651\n",
              "2017-02-02    30.121094\n",
              "2017-02-03    30.249985\n",
              "2017-02-06    30.533543\n",
              "2017-02-07    30.824141\n",
              "                ...    \n",
              "2017-04-24    33.808071\n",
              "2017-04-25    34.017551\n",
              "2017-04-26    33.817490\n",
              "2017-04-27    33.843384\n",
              "2017-04-28    33.810432\n",
              "Name: Close, Length: 61, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 299
        }
      ],
      "source": [
        "aapl['2017-2':'2017-4']"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 162**"
      ],
      "metadata": {
        "id": "WuaRhQjEo-RP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(app['2016-11'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sZTB2maspART",
        "outputId": "cec53c65-bc06-418e-b6ee-66f81e7561ec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Date\n",
            "2016-11-01    175303200\n",
            "2016-11-02    113326800\n",
            "2016-11-03    107730400\n",
            "2016-11-04    123348000\n",
            "2016-11-07    130240000\n",
            "2016-11-08     97016800\n",
            "2016-11-09    236705600\n",
            "2016-11-10    228538000\n",
            "2016-11-11    136575600\n",
            "2016-11-14    204702000\n",
            "2016-11-15    129058000\n",
            "2016-11-16    235362000\n",
            "2016-11-17    110528000\n",
            "2016-11-18    113715600\n",
            "2016-11-21    117058400\n",
            "2016-11-22    103862000\n",
            "2016-11-23    109705600\n",
            "2016-11-25     45903600\n",
            "2016-11-28    108776000\n",
            "2016-11-29    114115200\n",
            "2016-11-30    144649200\n",
            "Name: Volume, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "app['2016-1':'2016-5']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XXb7FwiWpKJf",
        "outputId": "749adce9-2248-460d-a4ae-d89d93da884c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Date\n",
              "2016-01-04    270597600\n",
              "2016-01-05    223164000\n",
              "2016-01-06    273829600\n",
              "2016-01-07    324377600\n",
              "2016-01-08    283192000\n",
              "                ...    \n",
              "2016-05-24    140560800\n",
              "2016-05-25    152675200\n",
              "2016-05-26    225324800\n",
              "2016-05-27    145364800\n",
              "2016-05-31    169228800\n",
              "Name: Volume, Length: 103, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 290
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lWwoD39pKNKb"
      },
      "source": [
        ".head(N) and .tail(N) are methods for quickly accessing the first or last N elements."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1eU218ALHW93",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7a48d845-7cde-4e20-cdb4-823ff1833574"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Date\n",
            "2017-01-03    27.219837\n",
            "2017-01-04    27.189369\n",
            "2017-01-05    27.327639\n",
            "2017-01-06    27.632296\n",
            "2017-01-09    27.885389\n",
            "Name: Close, dtype: float64\n",
            "Date\n",
            "2017-12-15    41.425613\n",
            "2017-12-18    42.009003\n",
            "2017-12-19    41.561344\n",
            "2017-12-20    41.516090\n",
            "2017-12-21    41.673260\n",
            "2017-12-22    41.673260\n",
            "2017-12-26    40.616013\n",
            "2017-12-27    40.623150\n",
            "2017-12-28    40.737453\n",
            "2017-12-29    40.296936\n",
            "Name: Close, dtype: float64\n"
          ]
        }
      ],
      "source": [
        "print(aapl.head(5))\n",
        "print(aapl.tail(10))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 163**"
      ],
      "metadata": {
        "id": "NI1S1uHrpSHA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(app.head(4))\n",
        "print(app.tail(8))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aTEBWk9ppUDs",
        "outputId": "fbe917b4-75e2-41c0-8c10-75695df68077"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Date\n",
            "2016-01-04    270597600\n",
            "2016-01-05    223164000\n",
            "2016-01-06    273829600\n",
            "2016-01-07    324377600\n",
            "Name: Volume, dtype: int64\n",
            "Date\n",
            "2016-12-20     85700000\n",
            "2016-12-21     95132800\n",
            "2016-12-22    104343600\n",
            "2016-12-23     56998000\n",
            "2016-12-27     73187600\n",
            "2016-12-28     83623600\n",
            "2016-12-29     60158000\n",
            "2016-12-30    122345200\n",
            "Name: Volume, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IxhKxtj-KQ66"
      },
      "source": [
        "# Resampling\n",
        "**_series.resample(freq)_** is a class called \"DatetimeIndexResampler\" which groups data in a Series object into regular time intervals. The argument \"freq\" determines the length of each interval.\n",
        "\n",
        "**_series.resample.mean()_** is a complete statement that groups data into intervals, and then compute the mean of each interval. For example, if we want to aggregate the daily data into monthly data by mean:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rAV8NkHkHW93",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d5522cb3-5681-46a4-a265-d6309249651a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Date\n",
            "2017-01-31    28.021313\n",
            "2017-02-28    31.430155\n",
            "2017-03-31    33.096761\n",
            "2017-04-30    33.630810\n",
            "2017-05-31    35.924380\n",
            "2017-06-30    34.938203\n",
            "2017-07-31    35.048845\n",
            "2017-08-31    37.686054\n",
            "2017-09-30    37.395192\n",
            "2017-10-31    37.444728\n",
            "2017-11-30    41.004146\n",
            "2017-12-31    40.930683\n",
            "Freq: M, Name: Close, dtype: float64\n"
          ]
        }
      ],
      "source": [
        "by_month = aapl.resample('M').mean()\n",
        "print(by_month)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 164**"
      ],
      "metadata": {
        "id": "ihjGKh85porW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "by_mes = app.resample('M').mean()\n",
        "print(by_mes)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YYS6gFHhpqnf",
        "outputId": "fdc3991e-49bf-4283-c816-da48eb4f1253"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Date\n",
            "2016-01-31    2.677575e+08\n",
            "2016-02-29    1.621725e+08\n",
            "2016-03-31    1.356454e+08\n",
            "2016-04-30    1.661683e+08\n",
            "2016-05-31    1.715565e+08\n",
            "2016-06-30    1.417269e+08\n",
            "2016-07-31    1.371559e+08\n",
            "2016-08-31    1.095876e+08\n",
            "2016-09-30    1.843839e+08\n",
            "2016-10-31    1.308408e+08\n",
            "2016-11-30    1.374390e+08\n",
            "2016-12-31    1.159565e+08\n",
            "Freq: M, Name: Volume, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QDPfVzBEKV6Q"
      },
      "source": [
        "We can also aggregate the data by week:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "aAP3tKkBHW94",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4bb1a104-d74d-4a9f-87b3-fe465c0a26b8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Date\n",
            "2017-01-08    27.342285\n",
            "2017-01-15    27.941165\n",
            "2017-01-22    28.108607\n",
            "2017-01-29    28.394867\n",
            "2017-02-05    29.497253\n",
            "Freq: W-SUN, Name: Close, dtype: float64\n"
          ]
        }
      ],
      "source": [
        "by_week = aapl.resample('W').mean()\n",
        "print(by_week.head())"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 165**"
      ],
      "metadata": {
        "id": "8twoN0h7qCoj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "by_w = app.resample('W').mean()\n",
        "print(by_w.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mVFug-zJqFi4",
        "outputId": "85fb17ad-839d-4a76-f7cf-8c13bfe95822"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Date\n",
            "2016-01-10    275032160.0\n",
            "2016-01-17    243469760.0\n",
            "2016-01-24    243384100.0\n",
            "2016-01-31    304269200.0\n",
            "2016-02-07    173723840.0\n",
            "Freq: W-SUN, Name: Volume, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "o_MXSVsILoBS"
      },
      "source": [
        "We can also aggregate the data by month with max:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gn0wqXBTHW95",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b33c20b0-eaf7-4394-c45b-f41329b53469"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Date\n",
              "2017-01-31    28.579063\n",
              "2017-02-28    32.271133\n",
              "2017-03-31    33.921055\n",
              "2017-04-30    34.074047\n",
              "2017-05-31    36.892395\n",
              "2017-06-30    36.738777\n",
              "2017-07-31    36.268471\n",
              "2017-08-31    38.911682\n",
              "2017-09-30    38.923546\n",
              "2017-10-31    40.107494\n",
              "2017-11-30    41.815819\n",
              "2017-12-31    42.009003\n",
              "Freq: M, Name: Close, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 307
        }
      ],
      "source": [
        "aapl.resample('M').max()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 166**"
      ],
      "metadata": {
        "id": "dUGGR__oqN79"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "app.resample('M').max()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ujCkPYSlqRUE",
        "outputId": "e9c184fe-62e2-410e-81b6-fd64af34b7d0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Date\n",
              "2016-01-31    533478800\n",
              "2016-02-29    216085600\n",
              "2016-03-31    201628400\n",
              "2016-04-30    458408400\n",
              "2016-05-31    305258800\n",
              "2016-06-30    301245600\n",
              "2016-07-31    369379200\n",
              "2016-08-31    162213600\n",
              "2016-09-30    443554800\n",
              "2016-10-31    264536800\n",
              "2016-11-30    236705600\n",
              "2016-12-31    186098000\n",
              "Freq: M, Name: Volume, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 308
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z8r46UFlLdAh"
      },
      "source": [
        "We can choose almost any frequency by using the format 'nf', where 'n' is an integer and 'f' is M for month, W for week and D for day."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kdVB_-JFHW96",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8ec4586d-2aa5-461c-ec70-75be69d0b0a2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Date\n",
            "2017-01-03    27.245615\n",
            "2017-01-06    27.632296\n",
            "2017-01-09    27.954133\n",
            "2017-01-12    27.921713\n",
            "2017-01-15    28.122082\n",
            "                ...    \n",
            "2017-12-17    41.785173\n",
            "2017-12-20    41.620870\n",
            "2017-12-23          NaN\n",
            "2017-12-26    40.658872\n",
            "2017-12-29    40.296936\n",
            "Freq: 3D, Name: Close, Length: 121, dtype: float64\n",
            "Date\n",
            "2017-01-08    27.342285\n",
            "2017-01-22    28.015584\n",
            "2017-02-05    28.946060\n",
            "2017-02-19    31.341195\n",
            "2017-03-05    32.413924\n",
            "2017-03-19    32.833898\n",
            "2017-04-02    33.437847\n",
            "2017-04-16    33.661106\n",
            "2017-04-30    33.603543\n",
            "2017-05-14    35.498711\n",
            "2017-05-28    36.292812\n",
            "2017-06-11    36.311531\n",
            "2017-06-25    34.336637\n",
            "2017-07-09    34.074198\n",
            "2017-07-23    35.082285\n",
            "2017-08-06    36.070656\n",
            "2017-08-20    37.692906\n",
            "2017-09-03    38.244489\n",
            "2017-09-17    38.069384\n",
            "2017-10-01    36.635584\n",
            "2017-10-15    36.865022\n",
            "2017-10-29    37.546925\n",
            "2017-11-12    40.803592\n",
            "2017-11-26    40.974774\n",
            "2017-12-10    40.639342\n",
            "2017-12-24    41.388942\n",
            "2018-01-07    40.568388\n",
            "Freq: 2W-SUN, Name: Close, dtype: float64\n",
            "Date\n",
            "2017-01-31    28.021313\n",
            "2017-03-31    32.342820\n",
            "2017-05-31    34.861506\n",
            "2017-07-31    34.990890\n",
            "2017-09-30    37.550770\n",
            "2017-11-30    39.183048\n",
            "2018-01-31    40.930683\n",
            "Freq: 2M, Name: Close, dtype: float64\n"
          ]
        }
      ],
      "source": [
        "three_day = aapl.resample('3D').mean()\n",
        "two_week = aapl.resample('2W').mean()\n",
        "two_month = aapl.resample('2M').mean()\n",
        "\n",
        "\n",
        "print(three_day)\n",
        "print(two_week)\n",
        "print(two_month )"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 167**"
      ],
      "metadata": {
        "id": "Vg5f81-QqYFV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "two_day = aapl.resample('2D').mean()\n",
        "three_week = aapl.resample('3W').mean()\n",
        "six_month = aapl.resample('6M').mean()\n",
        "\n",
        "\n",
        "print(two_day)\n",
        "print(three_week)\n",
        "print(six_month )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vpbZcmcpqacO",
        "outputId": "fc60ec86-4832-4ba3-85b6-3a4f82250462"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Date\n",
            "2017-01-03    27.204603\n",
            "2017-01-05    27.479967\n",
            "2017-01-07          NaN\n",
            "2017-01-09    27.899451\n",
            "2017-01-11    28.004908\n",
            "                ...    \n",
            "2017-12-21    41.673260\n",
            "2017-12-23          NaN\n",
            "2017-12-25    40.616013\n",
            "2017-12-27    40.680302\n",
            "2017-12-29    40.296936\n",
            "Freq: 2D, Name: Close, Length: 181, dtype: float64\n",
            "Date\n",
            "2017-01-08    27.342285\n",
            "2017-01-29    28.151042\n",
            "2017-02-19    30.726547\n",
            "2017-03-12    32.533233\n",
            "2017-04-02    33.265167\n",
            "2017-04-23    33.549175\n",
            "2017-05-14    34.952269\n",
            "2017-06-04    36.306451\n",
            "2017-06-25    34.987197\n",
            "2017-07-16    34.281200\n",
            "2017-08-06    35.884026\n",
            "2017-08-27    37.721120\n",
            "2017-09-17    38.298686\n",
            "2017-10-08    36.642308\n",
            "2017-10-29    37.389379\n",
            "2017-11-19    40.785354\n",
            "2017-12-10    40.815856\n",
            "2017-12-31    41.154498\n",
            "Freq: 3W-SUN, Name: Close, dtype: float64\n",
            "Date\n",
            "2017-01-31    28.021313\n",
            "2017-07-31    34.058700\n",
            "2018-01-31    38.850640\n",
            "Freq: 6M, Name: Close, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iy4RqsnwL-Bw"
      },
      "source": [
        "Besides the mean() method, other methods can also be used with the resampler:\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DNT8Fx9dHW96",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3396d667-c4a6-482e-f4f0-be291448249e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Date\n",
            "2017-01-08    0.202235\n",
            "2017-01-15    0.072126\n",
            "2017-01-22    0.025411\n",
            "2017-01-29    0.243919\n",
            "2017-02-05    0.938002\n",
            "2017-02-12    0.250601\n",
            "2017-02-19    0.230107\n",
            "2017-02-26    0.059012\n",
            "2017-03-05    0.338197\n",
            "2017-03-12    0.075858\n",
            "2017-03-19    0.176845\n",
            "2017-03-26    0.156388\n",
            "2017-04-02    0.318023\n",
            "2017-04-09    0.127975\n",
            "2017-04-16    0.211291\n",
            "2017-04-23    0.173704\n",
            "2017-04-30    0.089523\n",
            "2017-05-07    0.234327\n",
            "2017-05-14    0.351011\n",
            "2017-05-21    0.533105\n",
            "2017-05-28    0.060059\n",
            "2017-06-04    0.279657\n",
            "2017-06-11    0.616583\n",
            "2017-06-18    0.380433\n",
            "2017-06-25    0.128176\n",
            "2017-07-02    0.262636\n",
            "2017-07-09    0.158011\n",
            "2017-07-16    0.402028\n",
            "2017-07-23    0.124293\n",
            "2017-07-30    0.382297\n",
            "2017-08-06    0.919238\n",
            "2017-08-13    0.464864\n",
            "2017-08-20    0.432823\n",
            "2017-08-27    0.274230\n",
            "2017-09-03    0.250321\n",
            "2017-09-10    0.379509\n",
            "2017-09-17    0.292501\n",
            "2017-09-24    0.731093\n",
            "2017-10-01    0.352868\n",
            "2017-10-08    0.203715\n",
            "2017-10-15    0.118072\n",
            "2017-10-22    0.514116\n",
            "2017-10-29    0.676665\n",
            "2017-11-05    0.557558\n",
            "2017-11-12    0.189909\n",
            "2017-11-19    0.433769\n",
            "2017-11-26    0.559908\n",
            "2017-12-03    0.425062\n",
            "2017-12-10    0.072722\n",
            "2017-12-17    0.204124\n",
            "2017-12-24    0.193043\n",
            "2017-12-31    0.189329\n",
            "Freq: W-SUN, Name: Close, dtype: float64\n",
            "Date\n",
            "2017-01-08    27.632296\n",
            "2017-01-15    28.063498\n",
            "2017-01-22    28.122082\n",
            "2017-01-29    28.579063\n",
            "2017-02-05    30.249985\n",
            "2017-02-12    31.167261\n",
            "2017-02-19    31.943979\n",
            "2017-02-26    32.271133\n",
            "2017-03-05    32.901917\n",
            "2017-03-12    32.838367\n",
            "2017-03-19    33.113743\n",
            "2017-03-26    33.294975\n",
            "2017-04-02    33.921055\n",
            "2017-04-09    34.074047\n",
            "2017-04-16    33.697456\n",
            "2017-04-23    33.525646\n",
            "2017-04-30    34.017551\n",
            "2017-05-07    35.060238\n",
            "2017-05-14    36.892395\n",
            "2017-05-21    36.797867\n",
            "2017-05-28    36.393730\n",
            "2017-06-04    36.738777\n",
            "2017-06-11    36.719875\n",
            "2017-06-18    34.644821\n",
            "2017-06-25    34.585732\n",
            "2017-07-02    34.465206\n",
            "2017-07-09    34.075256\n",
            "2017-07-16    35.223854\n",
            "2017-07-23    35.691803\n",
            "2017-07-30    36.268471\n",
            "2017-08-06    37.138199\n",
            "2017-08-13    38.064640\n",
            "2017-08-20    38.342239\n",
            "2017-08-27    37.957870\n",
            "2017-09-03    38.923546\n",
            "2017-09-10    38.456131\n",
            "2017-09-17    38.318520\n",
            "2017-09-24    37.661289\n",
            "2017-10-01    36.593594\n",
            "2017-10-08    36.868820\n",
            "2017-10-15    37.248447\n",
            "2017-10-22    38.074135\n",
            "2017-10-29    38.686283\n",
            "2017-11-05    40.928444\n",
            "2017-11-12    41.815819\n",
            "2017-11-19    41.425613\n",
            "2017-11-26    41.663731\n",
            "2017-12-03    41.454178\n",
            "2017-12-10    40.432655\n",
            "2017-12-17    41.425613\n",
            "2017-12-24    42.009003\n",
            "2017-12-31    40.737453\n",
            "Freq: W-SUN, Name: Close, dtype: float64\n",
            "Date\n",
            "2017-01-08    27.189369\n",
            "2017-01-15    27.885389\n",
            "2017-01-22    28.070526\n",
            "2017-01-29    28.115055\n",
            "2017-02-05    28.438457\n",
            "2017-02-12    30.533543\n",
            "2017-02-19    31.372030\n",
            "2017-02-26    32.134628\n",
            "2017-03-05    32.228764\n",
            "2017-03-12    32.640663\n",
            "2017-03-19    32.713627\n",
            "2017-03-26    32.913681\n",
            "2017-04-02    33.158474\n",
            "2017-04-09    33.737465\n",
            "2017-04-16    33.198483\n",
            "2017-04-23    33.111385\n",
            "2017-04-30    33.808071\n",
            "2017-05-07    34.488285\n",
            "2017-05-14    36.013462\n",
            "2017-05-21    35.509823\n",
            "2017-05-28    36.240101\n",
            "2017-06-04    36.103024\n",
            "2017-06-11    35.209663\n",
            "2017-06-18    33.623840\n",
            "2017-06-25    34.271404\n",
            "2017-07-02    33.957073\n",
            "2017-07-09    33.732552\n",
            "2017-07-16    34.283230\n",
            "2017-07-23    35.346745\n",
            "2017-07-30    35.332573\n",
            "2017-08-06    35.150593\n",
            "2017-08-13    36.852207\n",
            "2017-08-20    37.369450\n",
            "2017-08-27    37.300644\n",
            "2017-09-03    38.311401\n",
            "2017-09-10    37.637569\n",
            "2017-09-17    37.554516\n",
            "2017-09-24    36.038387\n",
            "2017-10-01    35.720448\n",
            "2017-10-08    36.415642\n",
            "2017-10-15    36.975590\n",
            "2017-10-22    37.008808\n",
            "2017-10-29    37.053894\n",
            "2017-11-05    39.557049\n",
            "2017-11-12    41.343655\n",
            "2017-11-19    40.261208\n",
            "2017-11-26    40.475513\n",
            "2017-12-03    40.356453\n",
            "2017-12-10    40.244545\n",
            "2017-12-17    40.885071\n",
            "2017-12-24    41.516090\n",
            "2017-12-31    40.296936\n",
            "Freq: W-SUN, Name: Close, dtype: float64\n"
          ]
        }
      ],
      "source": [
        "std = aapl.resample('W').std()\n",
        "max = aapl.resample('W').max()\n",
        "min = aapl.resample('W').min()\n",
        "\n",
        "\n",
        "print(std)\n",
        "print(max)\n",
        "print(min)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uqln0s5DMI3I"
      },
      "source": [
        "Often we want to calculate monthly returns of a stock, based on prices on the last day of each month. To fetch those prices, we use the series.resample.agg() method:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "A6FSYvqbHW97",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "aaa9167a-30b6-49f0-dd9f-9c55fa0c881a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Date\n",
            "2017-01-31    28.438457\n",
            "2017-02-28    32.242889\n",
            "2017-03-31    33.812782\n",
            "2017-04-30    33.810432\n",
            "2017-05-31    36.103024\n",
            "2017-06-30    34.037434\n",
            "2017-07-31    35.150593\n",
            "2017-08-31    38.911682\n",
            "2017-09-30    36.567482\n",
            "2017-10-31    40.107494\n",
            "2017-11-30    40.920795\n",
            "2017-12-31    40.296936\n",
            "Freq: M, Name: Close, dtype: float64\n"
          ]
        }
      ],
      "source": [
        "last_day = aapl.resample('M').agg(lambda x: x[-1])\n",
        "print(last_day)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 168**\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "qbMY63B1qp34"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "last_d = app.resample('M').agg(lambda x: x[-1])\n",
        "print(last_d)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L2vrtH6BquPo",
        "outputId": "10ce231d-964e-4a3c-c117-c928100b8f0e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Date\n",
            "2016-01-31    257666000\n",
            "2016-02-29    140865200\n",
            "2016-03-31    103553600\n",
            "2016-04-30    274126000\n",
            "2016-05-31    169228800\n",
            "2016-06-30    143345600\n",
            "2016-07-31    110934800\n",
            "2016-08-31    118649600\n",
            "2016-09-30    145516400\n",
            "2016-10-31    105677600\n",
            "2016-11-30    144649200\n",
            "2016-12-31    122345200\n",
            "Freq: M, Name: Volume, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uwomY3aXMR46"
      },
      "source": [
        "Or directly calculate the monthly rates of return using the data for the first day and the last day:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qK2NMJrNHW96",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fad8485a-8a78-4a30-ffd9-2c9a7b474ba9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Date\n",
            "2017-01-31    0.044770\n",
            "2017-02-28    0.068613\n",
            "2017-03-31    0.027684\n",
            "2017-04-30   -0.000348\n",
            "2017-05-31    0.046462\n",
            "2017-06-30   -0.059799\n",
            "2017-07-31    0.036446\n",
            "2017-08-31    0.097261\n",
            "2017-09-30   -0.060531\n",
            "2017-10-31    0.099018\n",
            "2017-11-30    0.033422\n",
            "2017-12-31   -0.010640\n",
            "Freq: M, Name: Close, dtype: float64\n"
          ]
        }
      ],
      "source": [
        "monthly_return = aapl.resample('M').agg(lambda x: x[-1]/x[0] - 1)\n",
        "print(monthly_return)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 169**"
      ],
      "metadata": {
        "id": "gQkyeg75q10_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "monthly_return = app.resample('M').agg(lambda x: x[-1]/x[0] )\n",
        "print(monthly_return)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w-tBM2JVq4qr",
        "outputId": "568eef83-0ccd-4416-e0b6-f4e72c44fb5e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Date\n",
            "2016-01-31    0.952211\n",
            "2016-02-29    0.860119\n",
            "2016-03-31    0.513586\n",
            "2016-04-30    2.648663\n",
            "2016-05-31    0.878470\n",
            "2016-06-30    1.228397\n",
            "2016-07-31    1.065595\n",
            "2016-08-31    0.777156\n",
            "2016-09-30    1.362437\n",
            "2016-10-31    1.217383\n",
            "2016-11-30    0.825137\n",
            "2016-12-31    0.824720\n",
            "Freq: M, Name: Volume, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_DYbMTFWMj8J"
      },
      "source": [
        "Series object also provides us some convenient methods to do some quick calculation."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1Mxc0HwvHW98"
      },
      "outputs": [],
      "source": [
        "print(monthly_return.mean())\n",
        "print(monthly_return.std())\n",
        "print(monthly_return.max())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mn59J5dqMpqX"
      },
      "source": [
        "Another two methods frequently used on Series are .diff() and .pct_change(). The former calculates the difference between consecutive elements, and the latter calculates the percentage change."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DupZTSqqHW99",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1214d624-a6de-4230-d659-a460e367f382"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Date\n",
            "2017-01-31         NaN\n",
            "2017-02-28    3.804432\n",
            "2017-03-31    1.569893\n",
            "2017-04-30   -0.002350\n",
            "2017-05-31    2.292591\n",
            "2017-06-30   -2.065590\n",
            "2017-07-31    1.113159\n",
            "2017-08-31    3.761089\n",
            "2017-09-30   -2.344200\n",
            "2017-10-31    3.540012\n",
            "2017-11-30    0.813301\n",
            "2017-12-31   -0.623859\n",
            "Freq: M, Name: Close, dtype: float64\n",
            "Date\n",
            "2017-01-31         NaN\n",
            "2017-02-28    0.133778\n",
            "2017-03-31    0.048690\n",
            "2017-04-30   -0.000069\n",
            "2017-05-31    0.067807\n",
            "2017-06-30   -0.057214\n",
            "2017-07-31    0.032704\n",
            "2017-08-31    0.106999\n",
            "2017-09-30   -0.060244\n",
            "2017-10-31    0.096808\n",
            "2017-11-30    0.020278\n",
            "2017-12-31   -0.015246\n",
            "Freq: M, Name: Close, dtype: float64\n"
          ]
        }
      ],
      "source": [
        "print(last_day.diff())\n",
        "print(last_day.pct_change())"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 170**"
      ],
      "metadata": {
        "id": "RQ1ww8uBrIsa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(last_d.diff())\n",
        "print(last_d.pct_change())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 186
        },
        "id": "4YhlrRKQrKvw",
        "outputId": "c861f0d8-5c5f-4f15-e975-5867f31ab5a8"
      },
      "execution_count": 657,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-657-856557e85712>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlast_d\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdiff\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlast_d\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpct_change\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'last_d' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RaMAOFepM6Io"
      },
      "source": [
        "Notice that we induced a NaN value while calculating percentage changes i.e. returns.\n",
        "\n",
        "When dealing with NaN values, we usually either removing the data point or fill it with a specific value. Here we fill it with 0:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-xyLb3A3HW99",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0fc074a4-e508-4060-bf9c-2ab2e767adea"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Date\n",
            "2017-01-31    0.000000\n",
            "2017-02-28    0.133778\n",
            "2017-03-31    0.048690\n",
            "2017-04-30   -0.000069\n",
            "2017-05-31    0.067807\n",
            "2017-06-30   -0.057214\n",
            "2017-07-31    0.032704\n",
            "2017-08-31    0.106999\n",
            "2017-09-30   -0.060244\n",
            "2017-10-31    0.096808\n",
            "2017-11-30    0.020278\n",
            "2017-12-31   -0.015246\n",
            "Freq: M, Name: Close, dtype: float64\n"
          ]
        }
      ],
      "source": [
        "daily_return = last_day.pct_change()\n",
        "print(daily_return.fillna(0))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 171**"
      ],
      "metadata": {
        "id": "cjaD08OUrP6j"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "daily_r = last_d.pct_change()\n",
        "print(daily_r.fillna(0))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CFOAt0WBrT7y",
        "outputId": "f699f889-f256-4ed6-aa3e-c1de78872128"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Date\n",
            "2016-01-31    0.000000\n",
            "2016-02-29   -0.453303\n",
            "2016-03-31   -0.264875\n",
            "2016-04-30    1.647189\n",
            "2016-05-31   -0.382661\n",
            "2016-06-30   -0.152948\n",
            "2016-07-31   -0.226103\n",
            "2016-08-31    0.069544\n",
            "2016-09-30    0.226438\n",
            "2016-10-31   -0.273775\n",
            "2016-11-30    0.368778\n",
            "2016-12-31   -0.154194\n",
            "Freq: M, Name: Volume, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BYS10Om1NQVC"
      },
      "source": [
        "Alternatively, we can fill a NaN with the next fitted value. This is called 'backward fill', or 'bfill' in short:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "J513kHeKHW9-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "78aa442f-6b49-48d9-c453-7364d2012ed1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Date\n",
            "2017-01-31    0.133778\n",
            "2017-02-28    0.133778\n",
            "2017-03-31    0.048690\n",
            "2017-04-30   -0.000069\n",
            "2017-05-31    0.067807\n",
            "2017-06-30   -0.057214\n",
            "2017-07-31    0.032704\n",
            "2017-08-31    0.106999\n",
            "2017-09-30   -0.060244\n",
            "2017-10-31    0.096808\n",
            "2017-11-30    0.020278\n",
            "2017-12-31   -0.015246\n",
            "Freq: M, Name: Close, dtype: float64\n"
          ]
        }
      ],
      "source": [
        "daily_return = last_day.pct_change()\n",
        "print(daily_return.fillna(method = 'bfill'))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bj8QUSgdNepf"
      },
      "source": [
        "As expected, since there is a 'backward fill' method, there must be a 'forward fill' method, or 'ffill' in short. However we can't use it here because the NaN is the first value.\n",
        "\n",
        "We can also simply remove NaN values by **_.dropna()_**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WG5ux1lqHW9-"
      },
      "outputs": [],
      "source": [
        "daily_return = last_day.pct_change()\n",
        "daily_return.dropna()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nQH2eBWkNjdC"
      },
      "source": [
        "# DataFrame\n",
        "The **DataFrame** is the most commonly used data structure in Pandas. It is essentially a table, just like an Excel spreadsheet.\n",
        "\n",
        "More precisely, a DataFrame is a collection of Series objects, each of which may contain different data types. A DataFrame can be created from various data types: dictionary, 2-D numpy.ndarray, a Series or another DataFrame.\n",
        "\n",
        "## Create DataFrames\n",
        "The most common method of creating a DataFrame is passing a dictionary:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 658,
      "metadata": {
        "id": "vd5Wf1ohHW9-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e4d8b393-4a52-4378-a424-db2e5611ba4b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              AAPL    GOOG     IBM\n",
            "2017-07-03  143.50  898.70  155.58\n",
            "2017-07-04  144.09  911.71  153.67\n",
            "2017-07-05  142.73  906.69  152.36\n",
            "2017-07-06  144.18  918.59  152.94\n",
            "2017-07-07  143.77  926.99  153.49\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "dict = {'AAPL': [143.5, 144.09, 142.73, 144.18, 143.77],'GOOG':[898.7, 911.71, 906.69, 918.59, 926.99],\n",
        "        'IBM':[155.58, 153.67, 152.36, 152.94, 153.49]}\n",
        "data_index = pd.date_range('2017-07-03',periods = 5, freq = 'D')\n",
        "df = pd.DataFrame(dict, index = data_index)\n",
        "print(df)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 172**"
      ],
      "metadata": {
        "id": "7SOJLJgFrnNP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dicc = {'LOW':[21.4,33.5,37.7,41.0],'MEDIUM':[40.5,46.6,48.9,68.6],'HIGH':[71.2,76.7,82.4,90.5]}\n",
        "data_ind = pd.date_range('2016-01-01', periods=4, freq='D')\n",
        "de = pd.DataFrame(dicc,index=data_ind)\n",
        "print(de)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r_3YBK2erw2x",
        "outputId": "924ab2f9-6760-4b77-df7e-6e6ad6955f97"
      },
      "execution_count": 660,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "             LOW  MEDIUM  HIGH\n",
            "2016-01-01  21.4    40.5  71.2\n",
            "2016-01-02  33.5    46.6  76.7\n",
            "2016-01-03  37.7    48.9  82.4\n",
            "2016-01-04  41.0    68.6  90.5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0uYmLQTgOPnX"
      },
      "source": [
        "## Manipulating DataFrames\n",
        "We can fetch values in a DataFrame by columns and index. Each column in a DataFrame is essentially a Pandas Series. We can fetch a column by square brackets: **df['column_name']**\n",
        "\n",
        "If a column name contains no spaces, then we can also use df.column_name to fetch a column:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 661,
      "metadata": {
        "id": "2pB2f7lBHW9_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "95077b13-bd56-4d46-d6e5-6ea6b2727f58"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-661-13ec22c7e9ea>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maapl_table\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mClose\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtail\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Volume'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtail\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'aapl_table' is not defined"
          ]
        }
      ],
      "source": [
        "df = aapl_table\n",
        "print(df.Close.tail(5))\n",
        "print(df['Volume'].tail(5))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 173**"
      ],
      "metadata": {
        "id": "ufFVJhgOskdp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "de = aapl_table\n",
        "print(de.Close.tail(4))\n",
        "print(de['Close'].tail(4))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "gWYv8SUysnFR",
        "outputId": "4dab5fad-866b-4c38-c34f-cdedd4faefb6"
      },
      "execution_count": 662,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-662-8deeab580e9a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mde\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maapl_table\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mde\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mClose\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtail\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mde\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Close'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtail\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'aapl_table' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z0ugOel9O4-P"
      },
      "source": [
        "All the methods we applied to a Series index such as iloc[], loc[] and resampling methods, can also be applied to a DataFrame:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_8dfjkedHW9_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a41011f1-d458-4586-d49d-200823c11409"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                 Open       High        Low      Close     Volume  Dividends  \\\n",
            "Date                                                                           \n",
            "2016-01-31  21.730620  22.315207  21.629749  22.315207  257666000        0.0   \n",
            "2016-02-29  22.325646  22.641424  22.277243  22.286463  140865200        0.0   \n",
            "2016-03-31  25.289807  25.331296  25.096191  25.121546  103553600        0.0   \n",
            "2016-04-30  21.664137  21.832399  21.323007  21.606514  274126000        0.0   \n",
            "2016-05-31  23.096980  23.282499  22.916101  23.157274  169228800        0.0   \n",
            "2016-06-30  21.900393  22.208816  21.867928  22.169394  143345600        0.0   \n",
            "2016-07-31  24.161392  24.244875  24.043124  24.166029  110934800        0.0   \n",
            "2016-08-31  24.635016  24.847185  24.630352  24.737602  118649600        0.0   \n",
            "2016-09-30  26.220457  26.432628  26.066577  26.358019  145516400        0.0   \n",
            "2016-10-31  26.497912  26.633142  26.392992  26.472265  105677600        0.0   \n",
            "2016-11-30  26.153534  26.294144  25.841847  25.900434  144649200        0.0   \n",
            "2016-12-31  27.337013  27.465905  27.051105  27.142502  122345200        0.0   \n",
            "\n",
            "            Stock Splits  \n",
            "Date                      \n",
            "2016-01-31             0  \n",
            "2016-02-29             0  \n",
            "2016-03-31             0  \n",
            "2016-04-30             0  \n",
            "2016-05-31             0  \n",
            "2016-06-30             0  \n",
            "2016-07-31             0  \n",
            "2016-08-31             0  \n",
            "2016-09-30             0  \n",
            "2016-10-31             0  \n",
            "2016-11-30             0  \n",
            "2016-12-31             0  \n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: FutureWarning: Indexing a DataFrame with a datetimelike index using a single string to slice the rows, like `frame[string]`, is deprecated and will be removed in a future version. Use `frame.loc[string]` instead.\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n"
          ]
        }
      ],
      "source": [
        "aapl_2016 = df['2016']\n",
        "aapl_month = aapl_2016.resample('M').agg(lambda x: x[-1])\n",
        "print(aapl_month)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 174**"
      ],
      "metadata": {
        "id": "Fmw9tZL_tG0G"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "app_2017=de['2017']\n",
        "app_month = app_2017.resample('M').agg(lambda x:x[-1])\n",
        "print(app_month)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C2zPVWZOtJPW",
        "outputId": "2a704232-1d08-4210-d942-32596fe161a4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                 Open       High        Low      Close     Volume  Dividends  \\\n",
            "Date                                                                           \n",
            "2017-01-31  28.391588  28.447832  28.267382  28.438457  196804000        0.0   \n",
            "2017-02-28  32.264072  32.348804  32.174631  32.242889   93931600        0.0   \n",
            "2017-03-31  33.826904  33.956356  33.659792  33.812782   78646800        0.0   \n",
            "2017-04-30  33.913994  33.963423  33.720996  33.810432   83441600        0.0   \n",
            "2017-05-31  36.388994  36.436261  36.013217  36.103024   97804800        0.0   \n",
            "2017-06-30  34.139057  34.259592  33.980711  34.037434   92096400        0.0   \n",
            "2017-07-31  35.427108  35.528736  35.008792  35.150593   79383600        0.0   \n",
            "2017-08-31  38.826266  39.035062  38.788303  38.911682  107140400        0.0   \n",
            "2017-09-30  36.351572  36.569857  36.064479  36.567482  105199200        0.0   \n",
            "2017-10-31  39.837011  40.252227  39.609237  40.107494  144187200        0.0   \n",
            "2017-11-30  40.582663  40.989848  40.108808  40.920795  166108800        0.0   \n",
            "2017-12-31  40.604112  40.620778  40.294556  40.296936  103999600        0.0   \n",
            "\n",
            "            Stock Splits  \n",
            "Date                      \n",
            "2017-01-31             0  \n",
            "2017-02-28             0  \n",
            "2017-03-31             0  \n",
            "2017-04-30             0  \n",
            "2017-05-31             0  \n",
            "2017-06-30             0  \n",
            "2017-07-31             0  \n",
            "2017-08-31             0  \n",
            "2017-09-30             0  \n",
            "2017-10-31             0  \n",
            "2017-11-30             0  \n",
            "2017-12-31             0  \n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: FutureWarning: Indexing a DataFrame with a datetimelike index using a single string to slice the rows, like `frame[string]`, is deprecated and will be removed in a future version. Use `frame.loc[string]` instead.\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CqrbrbFZPTJe"
      },
      "source": [
        "We may select certain columns of a DataFrame using their names:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7bQGeyCAHW9_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bef2bb16-7927-4d1a-8149-84333012e61b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                 Open       High        Low      Close\n",
            "Date                                                  \n",
            "2016-01-31  21.730620  22.315207  21.629749  22.315207\n",
            "2016-02-29  22.325646  22.641424  22.277243  22.286463\n",
            "2016-03-31  25.289807  25.331296  25.096191  25.121546\n",
            "2016-04-30  21.664137  21.832399  21.323007  21.606514\n",
            "2016-05-31  23.096980  23.282499  22.916101  23.157274\n",
            "2016-06-30  21.900393  22.208816  21.867928  22.169394\n",
            "2016-07-31  24.161392  24.244875  24.043124  24.166029\n",
            "2016-08-31  24.635016  24.847185  24.630352  24.737602\n",
            "2016-09-30  26.220457  26.432628  26.066577  26.358019\n",
            "2016-10-31  26.497912  26.633142  26.392992  26.472265\n",
            "2016-11-30  26.153534  26.294144  25.841847  25.900434\n",
            "2016-12-31  27.337013  27.465905  27.051105  27.142502\n"
          ]
        }
      ],
      "source": [
        "aapl_bar = aapl_month[['Open', 'High', 'Low', 'Close']]\n",
        "print(aapl_bar)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 175**"
      ],
      "metadata": {
        "id": "A1jOS3pNtb_l"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "app_bar = app_month[['High','Low','Volume']]\n",
        "print(app_bar)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wlAIRG6htfOV",
        "outputId": "294da575-0a89-4635-8f00-d61032712721"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                 High        Low     Volume\n",
            "Date                                       \n",
            "2017-01-31  28.447832  28.267382  196804000\n",
            "2017-02-28  32.348804  32.174631   93931600\n",
            "2017-03-31  33.956356  33.659792   78646800\n",
            "2017-04-30  33.963423  33.720996   83441600\n",
            "2017-05-31  36.436261  36.013217   97804800\n",
            "2017-06-30  34.259592  33.980711   92096400\n",
            "2017-07-31  35.528736  35.008792   79383600\n",
            "2017-08-31  39.035062  38.788303  107140400\n",
            "2017-09-30  36.569857  36.064479  105199200\n",
            "2017-10-31  40.252227  39.609237  144187200\n",
            "2017-11-30  40.989848  40.108808  166108800\n",
            "2017-12-31  40.620778  40.294556  103999600\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8CQaZCAQP68O"
      },
      "source": [
        "We can even specify both rows and columns using loc[]. The row indices and column names are separated by a comma:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YjWWiHVpHW-A",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0fd0df36-c24f-4ec7-d238-46563760aff4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                 Open       High        Low      Close\n",
            "Date                                                  \n",
            "2016-03-31  25.289807  25.331296  25.096191  25.121546\n",
            "2016-04-30  21.664137  21.832399  21.323007  21.606514\n",
            "2016-05-31  23.096980  23.282499  22.916101  23.157274\n",
            "2016-06-30  21.900393  22.208816  21.867928  22.169394\n"
          ]
        }
      ],
      "source": [
        "print(aapl_month.loc['2016-03':'2016-06',['Open', 'High', 'Low', 'Close']])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 176**"
      ],
      "metadata": {
        "id": "k-sfwDR7toDr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(app_month.loc['2017-01':'2017-05',['Low','High','Open']])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6TRGTLtetqkO",
        "outputId": "1b4f2c59-f756-4bf0-9cfc-f76a30a9f5bc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                  Low       High       Open\n",
            "Date                                       \n",
            "2017-01-31  28.267382  28.447832  28.391588\n",
            "2017-02-28  32.174631  32.348804  32.264072\n",
            "2017-03-31  33.659792  33.956356  33.826904\n",
            "2017-04-30  33.720996  33.963423  33.913994\n",
            "2017-05-31  36.013217  36.436261  36.388994\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Xcn_pHNLQBEH"
      },
      "source": [
        "The subset methods in DataFrame is quite useful. By writing logical statements in square brackets, we can make customized subsets:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RxKg4dObHW-A",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5da95941-0efd-4343-8051-2671a6b3f402"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                 Open       High        Low      Close\n",
            "Date                                                  \n",
            "2016-03-31  25.289807  25.331296  25.096191  25.121546\n",
            "2016-08-31  24.635016  24.847185  24.630352  24.737602\n",
            "2016-09-30  26.220457  26.432628  26.066577  26.358019\n",
            "2016-10-31  26.497912  26.633142  26.392992  26.472265\n",
            "2016-11-30  26.153534  26.294144  25.841847  25.900434\n",
            "2016-12-31  27.337013  27.465905  27.051105  27.142502\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "\n",
        "above = aapl_bar[aapl_bar.Close > np.mean(aapl_bar.Close)]\n",
        "print(above)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wcm_UadkQLL5"
      },
      "source": [
        "## Data Validation\n",
        "As mentioned, all methods that apply to a Series can also be applied to a DataFrame. Here we add a new column to an existing DataFrame:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jZXFdOVFHW-A",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f9da8181-6f59-46f7-e75d-09624349aac7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                 Open       High        Low      Close  rate_return\n",
            "Date                                                               \n",
            "2016-01-31  21.730620  22.315207  21.629749  22.315207          NaN\n",
            "2016-02-29  22.325646  22.641424  22.277243  22.286463    -0.001288\n",
            "2016-03-31  25.289807  25.331296  25.096191  25.121546     0.127211\n",
            "2016-04-30  21.664137  21.832399  21.323007  21.606514    -0.139921\n",
            "2016-05-31  23.096980  23.282499  22.916101  23.157274     0.071773\n",
            "2016-06-30  21.900393  22.208816  21.867928  22.169394    -0.042660\n",
            "2016-07-31  24.161392  24.244875  24.043124  24.166029     0.090063\n",
            "2016-08-31  24.635016  24.847185  24.630352  24.737602     0.023652\n",
            "2016-09-30  26.220457  26.432628  26.066577  26.358019     0.065504\n",
            "2016-10-31  26.497912  26.633142  26.392992  26.472265     0.004334\n",
            "2016-11-30  26.153534  26.294144  25.841847  25.900434    -0.021601\n",
            "2016-12-31  27.337013  27.465905  27.051105  27.142502     0.047955\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n"
          ]
        }
      ],
      "source": [
        "aapl_bar['rate_return'] = aapl_bar.Close.pct_change()\n",
        "print(aapl_bar)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_or6n5-LQUa-"
      },
      "source": [
        "Here the calculation introduced a NaN value. If the DataFrame is large, we would not be able to observe it. **isnull()** provides a convenient way to check abnormal values."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "V5wgmhIPHW-B",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0a879348-b22c-4223-bdce-a8743170c7c9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "             Open   High    Low  Close  rate_return\n",
            "Date                                               \n",
            "2016-01-31  False  False  False  False         True\n",
            "2016-02-29  False  False  False  False        False\n",
            "2016-03-31  False  False  False  False        False\n",
            "2016-04-30  False  False  False  False        False\n",
            "2016-05-31  False  False  False  False        False\n",
            "2016-06-30  False  False  False  False        False\n",
            "2016-07-31  False  False  False  False        False\n",
            "2016-08-31  False  False  False  False        False\n",
            "2016-09-30  False  False  False  False        False\n",
            "2016-10-31  False  False  False  False        False\n",
            "2016-11-30  False  False  False  False        False\n",
            "2016-12-31  False  False  False  False        False\n",
            "---------------------------------------------\n",
            "         Open   High    Low  Close rate_return\n",
            "count      12     12     12     12          12\n",
            "unique      1      1      1      1           2\n",
            "top     False  False  False  False       False\n",
            "freq       12     12     12     12          11\n"
          ]
        }
      ],
      "source": [
        "missing = aapl_bar.isnull()\n",
        "print(missing)\n",
        "print('---------------------------------------------')\n",
        "print(missing.describe())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d6KFV4i0QfLW"
      },
      "source": [
        "The row labelled \"unique\" indicates the number of unique values in each column. Since the \"rate_return\" column has 2 unique values, it has at least one missing value.\n",
        "\n",
        "We can deduce the number of missing values by comparing \"count\" with \"freq\". There are 12 counts and 11 False values, so there is one True value which corresponds to the missing value.\n",
        "\n",
        "We can also find the rows with missing values easily:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Eo0ZAhCsHW-B",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "545785b2-5400-4b2d-96b0-c69fbba34020"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "             Open   High    Low  Close  rate_return\n",
            "Date                                               \n",
            "2016-01-31  False  False  False  False         True\n"
          ]
        }
      ],
      "source": [
        "print(missing[missing.rate_return == True])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qgggpD8OQkZX"
      },
      "source": [
        "Usually when dealing with missing data, we either delete the whole row or fill it with some value. As we introduced in the Series chapter, the same method **dropna()** and **fillna()** can be applied to a DataFrame."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "j8PaIokjHW-B",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "214ce616-33a3-4bd1-f63f-2e0e6162f803"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                 Open       High        Low      Close  rate_return\n",
            "Date                                                               \n",
            "2016-02-29  22.325646  22.641424  22.277243  22.286463    -0.001288\n",
            "2016-03-31  25.289807  25.331296  25.096191  25.121546     0.127211\n",
            "2016-04-30  21.664137  21.832399  21.323007  21.606514    -0.139921\n",
            "2016-05-31  23.096980  23.282499  22.916101  23.157274     0.071773\n",
            "2016-06-30  21.900393  22.208816  21.867928  22.169394    -0.042660\n",
            "2016-07-31  24.161392  24.244875  24.043124  24.166029     0.090063\n",
            "2016-08-31  24.635016  24.847185  24.630352  24.737602     0.023652\n",
            "2016-09-30  26.220457  26.432628  26.066577  26.358019     0.065504\n",
            "2016-10-31  26.497912  26.633142  26.392992  26.472265     0.004334\n",
            "2016-11-30  26.153534  26.294144  25.841847  25.900434    -0.021601\n",
            "2016-12-31  27.337013  27.465905  27.051105  27.142502     0.047955\n",
            "\n",
            "--------------------------------------------------\n",
            "\n",
            "                 Open       High        Low      Close  rate_return\n",
            "Date                                                               \n",
            "2016-01-31  21.730620  22.315207  21.629749  22.315207     0.000000\n",
            "2016-02-29  22.325646  22.641424  22.277243  22.286463    -0.001288\n",
            "2016-03-31  25.289807  25.331296  25.096191  25.121546     0.127211\n",
            "2016-04-30  21.664137  21.832399  21.323007  21.606514    -0.139921\n",
            "2016-05-31  23.096980  23.282499  22.916101  23.157274     0.071773\n",
            "2016-06-30  21.900393  22.208816  21.867928  22.169394    -0.042660\n",
            "2016-07-31  24.161392  24.244875  24.043124  24.166029     0.090063\n",
            "2016-08-31  24.635016  24.847185  24.630352  24.737602     0.023652\n",
            "2016-09-30  26.220457  26.432628  26.066577  26.358019     0.065504\n",
            "2016-10-31  26.497912  26.633142  26.392992  26.472265     0.004334\n",
            "2016-11-30  26.153534  26.294144  25.841847  25.900434    -0.021601\n",
            "2016-12-31  27.337013  27.465905  27.051105  27.142502     0.047955\n"
          ]
        }
      ],
      "source": [
        "drop = aapl_bar.dropna()\n",
        "print(drop)\n",
        "print('\\n--------------------------------------------------\\n')\n",
        "fill = aapl_bar.fillna(0)\n",
        "print(fill)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0tvoFlKWQxYG"
      },
      "source": [
        "## DataFrame Concat\n",
        "We have seen how to extract a Series from a dataFrame. Now we need to consider how to merge a Series or a DataFrame into another one.\n",
        "\n",
        "In Pandas, the function **concat()** allows us to merge multiple Series into a DataFrame:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "uQrmLIWKHW-C",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8289d1f1-5a26-41c0-bd5a-2023b1d6e0d4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     AAPL    GOOG\n",
            "0  143.50  898.70\n",
            "1  144.09  911.71\n",
            "2  142.73  906.69\n",
            "3  144.18  918.59\n",
            "4  143.77  926.99\n"
          ]
        }
      ],
      "source": [
        "s1 = pd.Series([143.5, 144.09, 142.73, 144.18, 143.77], name = 'AAPL')\n",
        "s2 = pd.Series([898.7, 911.71, 906.69, 918.59, 926.99], name = 'GOOG')\n",
        "data_frame = pd.concat([s1,s2], axis = 1)\n",
        "print(data_frame)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 177**"
      ],
      "metadata": {
        "id": "9fKZyTscufKc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "g1 = pd.Series([45.6,67.7,23.1,13.4], name='random I')\n",
        "g2 = pd.Series([65.7,103.4,78.6,89.6], name='random II')\n",
        "dataf = pd.concat([g1,g2], axis=1)\n",
        "print(dataf)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7Ety36S8uhM6",
        "outputId": "b0d029b5-22b7-4f5d-b396-ab694c826a10"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   random I  random II\n",
            "0      45.6       65.7\n",
            "1      67.7      103.4\n",
            "2      23.1       78.6\n",
            "3      13.4       89.6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3ojbNYJLR2vv"
      },
      "source": [
        "The \"axis = 1\" parameter will join two DataFrames by columns:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 663,
      "metadata": {
        "id": "DJsaLd-cRoIm",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 239
        },
        "outputId": "227af935-9d09-4871-fe49-78f4351882ab"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-663-4bc168eb0cf7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mlog_price\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maapl_bar\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mClose\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mlog_price\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'log_price'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlog_price\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'\\n---------------------- separate line--------------------\\n'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mconcat\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0maapl_bar\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlog_price\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'aapl_bar' is not defined"
          ]
        }
      ],
      "source": [
        "log_price = np.log(aapl_bar.Close)\n",
        "log_price.name = 'log_price'\n",
        "print(log_price)\n",
        "print('\\n---------------------- separate line--------------------\\n')\n",
        "concat = pd.concat([aapl_bar, log_price], axis = 1)\n",
        "print(concat)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mIZz-FUyR_62"
      },
      "source": [
        "We can also join two DataFrames by rows. Consider these two DataFrames:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "W7uXZptLHW-C",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "08c2d53a-221a-4cdf-ee91-a3e9a5edccd1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "               Volume  Stock Splits\n",
            "Date                               \n",
            "2016-10-31  105677600             0\n",
            "2016-11-30  144649200             0\n",
            "2016-12-31  122345200             0\n",
            "2017-01-31  196804000             0\n",
            "2017-02-28   93931600             0\n",
            "2017-03-31   78646800             0\n",
            "2017-04-30   83441600             0\n",
            "\n",
            "---------------------- separate line--------------------\n",
            "\n",
            "                 Open       High        Low      Close\n",
            "Date                                                  \n",
            "2016-10-31  26.497912  26.633142  26.392992  26.472265\n",
            "2016-11-30  26.153534  26.294144  25.841847  25.900434\n",
            "2016-12-31  27.337013  27.465905  27.051105  27.142502\n",
            "2017-01-31  28.391588  28.447832  28.267382  28.438457\n",
            "2017-02-28  32.264072  32.348804  32.174631  32.242889\n",
            "2017-03-31  33.826904  33.956356  33.659792  33.812782\n",
            "2017-04-30  33.913994  33.963423  33.720996  33.810432\n"
          ]
        }
      ],
      "source": [
        "df_volume = aapl_table.loc['2016-10':'2017-04',['Volume', 'Stock Splits']].resample('M').agg(lambda x: x[-1])\n",
        "print(df_volume)\n",
        "print('\\n---------------------- separate line--------------------\\n')\n",
        "df_2017 = aapl_table.loc['2016-10':'2017-04',['Open', 'High', 'Low', 'Close']].resample('M').agg(lambda x: x[-1])\n",
        "print(df_2017)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iZk_C9aSSLeP"
      },
      "source": [
        "Now we merge the DataFrames with our DataFrame 'aapl_bar'"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 178**"
      ],
      "metadata": {
        "id": "SqcnUuNrvZT_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "de_volume = aapl_table.loc['2017-10':'2017-04',['Volume', 'Stock Splits']].resample('M').agg(lambda x: x[-1])\n",
        "print(de_volume)\n",
        "de_2016 = aapl_table.loc['2016-02':'2016-08',['Open', 'High', 'Low', 'Close']].resample('M').agg(lambda x: x[-1])\n",
        "print(de_2016)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EEgft4zYvbop",
        "outputId": "33d57cb8-0e27-46e4-8364-ef77450e753f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Empty DataFrame\n",
            "Columns: [Volume, Stock Splits]\n",
            "Index: []\n",
            "                 Open       High        Low      Close\n",
            "Date                                                  \n",
            "2016-02-29  22.325646  22.641424  22.277243  22.286463\n",
            "2016-03-31  25.289807  25.331296  25.096191  25.121546\n",
            "2016-04-30  21.664137  21.832399  21.323007  21.606514\n",
            "2016-05-31  23.096980  23.282499  22.916101  23.157274\n",
            "2016-06-30  21.900393  22.208816  21.867928  22.169394\n",
            "2016-07-31  24.161392  24.244875  24.043124  24.166029\n",
            "2016-08-31  24.635016  24.847185  24.630352  24.737602\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "aFqmjokOHW-C",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "335a3b55-80a1-440f-eec9-6f93ba8317ce"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                 Open       High        Low      Close  rate_return  \\\n",
            "Date                                                                  \n",
            "2016-01-31  21.730620  22.315207  21.629749  22.315207          NaN   \n",
            "2016-02-29  22.325646  22.641424  22.277243  22.286463    -0.001288   \n",
            "2016-03-31  25.289807  25.331296  25.096191  25.121546     0.127211   \n",
            "2016-04-30  21.664137  21.832399  21.323007  21.606514    -0.139921   \n",
            "2016-05-31  23.096980  23.282499  22.916101  23.157274     0.071773   \n",
            "2016-06-30  21.900393  22.208816  21.867928  22.169394    -0.042660   \n",
            "2016-07-31  24.161392  24.244875  24.043124  24.166029     0.090063   \n",
            "2016-08-31  24.635016  24.847185  24.630352  24.737602     0.023652   \n",
            "2016-09-30  26.220457  26.432628  26.066577  26.358019     0.065504   \n",
            "2016-10-31  26.497912  26.633142  26.392992  26.472265     0.004334   \n",
            "2016-11-30  26.153534  26.294144  25.841847  25.900434    -0.021601   \n",
            "2016-12-31  27.337013  27.465905  27.051105  27.142502     0.047955   \n",
            "2017-01-31        NaN        NaN        NaN        NaN          NaN   \n",
            "2017-02-28        NaN        NaN        NaN        NaN          NaN   \n",
            "2017-03-31        NaN        NaN        NaN        NaN          NaN   \n",
            "2017-04-30        NaN        NaN        NaN        NaN          NaN   \n",
            "\n",
            "                 Volume  Stock Splits  \n",
            "Date                                   \n",
            "2016-01-31          NaN           NaN  \n",
            "2016-02-29          NaN           NaN  \n",
            "2016-03-31          NaN           NaN  \n",
            "2016-04-30          NaN           NaN  \n",
            "2016-05-31          NaN           NaN  \n",
            "2016-06-30          NaN           NaN  \n",
            "2016-07-31          NaN           NaN  \n",
            "2016-08-31          NaN           NaN  \n",
            "2016-09-30          NaN           NaN  \n",
            "2016-10-31  105677600.0           0.0  \n",
            "2016-11-30  144649200.0           0.0  \n",
            "2016-12-31  122345200.0           0.0  \n",
            "2017-01-31  196804000.0           0.0  \n",
            "2017-02-28   93931600.0           0.0  \n",
            "2017-03-31   78646800.0           0.0  \n",
            "2017-04-30   83441600.0           0.0  \n"
          ]
        }
      ],
      "source": [
        "concat = pd.concat([aapl_bar, df_volume], axis = 1)\n",
        "print(concat)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7yI3tgB4SR4O"
      },
      "source": [
        "By default the DataFrame are joined with all of the data. This default options results in zero information loss. We can also merge them by intersection, this is called 'inner join"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "31QGLyijHW-C",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "82edfce0-e904-4499-c451-16a17fdcbb94"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                 Open       High        Low      Close  rate_return  \\\n",
            "Date                                                                  \n",
            "2016-10-31  26.497912  26.633142  26.392992  26.472265     0.004334   \n",
            "2016-11-30  26.153534  26.294144  25.841847  25.900434    -0.021601   \n",
            "2016-12-31  27.337013  27.465905  27.051105  27.142502     0.047955   \n",
            "\n",
            "               Volume  Stock Splits  \n",
            "Date                                 \n",
            "2016-10-31  105677600             0  \n",
            "2016-11-30  144649200             0  \n",
            "2016-12-31  122345200             0  \n"
          ]
        }
      ],
      "source": [
        "concat = pd.concat([aapl_bar,df_volume],axis = 1, join = 'inner')\n",
        "print(concat)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 179**"
      ],
      "metadata": {
        "id": "gPrFEeyVv8H4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "concate = pd.concat([app_bar, de_volume], axis=1, join='inner')\n",
        "print(concate)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-xHDGMYOv_B1",
        "outputId": "b16fb9e6-5068-48ec-846e-6b9188f01102"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Empty DataFrame\n",
            "Columns: [High, Low, Volume, Volume, Stock Splits]\n",
            "Index: []\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oudcWMm5Sd0u"
      },
      "source": [
        "Only the intersection part was left if use 'inner join' method. Now let's try to append a DataFrame to another one:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lgw0qaOsHW-D",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9b12101b-e35d-42dc-ef06-0c723d4ae2e0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                 Open       High        Low      Close  rate_return\n",
            "Date                                                               \n",
            "2016-01-31  21.730620  22.315207  21.629749  22.315207          NaN\n",
            "2016-02-29  22.325646  22.641424  22.277243  22.286463    -0.001288\n",
            "2016-03-31  25.289807  25.331296  25.096191  25.121546     0.127211\n",
            "2016-04-30  21.664137  21.832399  21.323007  21.606514    -0.139921\n",
            "2016-05-31  23.096980  23.282499  22.916101  23.157274     0.071773\n",
            "2016-06-30  21.900393  22.208816  21.867928  22.169394    -0.042660\n",
            "2016-07-31  24.161392  24.244875  24.043124  24.166029     0.090063\n",
            "2016-08-31  24.635016  24.847185  24.630352  24.737602     0.023652\n",
            "2016-09-30  26.220457  26.432628  26.066577  26.358019     0.065504\n",
            "2016-10-31  26.497912  26.633142  26.392992  26.472265     0.004334\n",
            "2016-11-30  26.153534  26.294144  25.841847  25.900434    -0.021601\n",
            "2016-12-31  27.337013  27.465905  27.051105  27.142502     0.047955\n",
            "2016-10-31  26.497912  26.633142  26.392992  26.472265          NaN\n",
            "2016-11-30  26.153534  26.294144  25.841847  25.900434          NaN\n",
            "2016-12-31  27.337013  27.465905  27.051105  27.142502          NaN\n",
            "2017-01-31  28.391588  28.447832  28.267382  28.438457          NaN\n",
            "2017-02-28  32.264072  32.348804  32.174631  32.242889          NaN\n",
            "2017-03-31  33.826904  33.956356  33.659792  33.812782          NaN\n",
            "2017-04-30  33.913994  33.963423  33.720996  33.810432          NaN\n"
          ]
        }
      ],
      "source": [
        "append = aapl_bar.append(df_2017)\n",
        "print(append)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 180**"
      ],
      "metadata": {
        "id": "L6ZehlWowPQF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "appendI=app_bar.append(de_2016)\n",
        "print(appendI)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jN8xviwHwRUw",
        "outputId": "cbcf27e5-3052-4150-e8ce-683c3a48571d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                 High        Low       Volume       Open      Close\n",
            "Date                                                               \n",
            "2017-01-31  28.447832  28.267382  196804000.0        NaN        NaN\n",
            "2017-02-28  32.348804  32.174631   93931600.0        NaN        NaN\n",
            "2017-03-31  33.956356  33.659792   78646800.0        NaN        NaN\n",
            "2017-04-30  33.963423  33.720996   83441600.0        NaN        NaN\n",
            "2017-05-31  36.436261  36.013217   97804800.0        NaN        NaN\n",
            "2017-06-30  34.259592  33.980711   92096400.0        NaN        NaN\n",
            "2017-07-31  35.528736  35.008792   79383600.0        NaN        NaN\n",
            "2017-08-31  39.035062  38.788303  107140400.0        NaN        NaN\n",
            "2017-09-30  36.569857  36.064479  105199200.0        NaN        NaN\n",
            "2017-10-31  40.252227  39.609237  144187200.0        NaN        NaN\n",
            "2017-11-30  40.989848  40.108808  166108800.0        NaN        NaN\n",
            "2017-12-31  40.620778  40.294556  103999600.0        NaN        NaN\n",
            "2016-02-29  22.641424  22.277243          NaN  22.325646  22.286463\n",
            "2016-03-31  25.331296  25.096191          NaN  25.289807  25.121546\n",
            "2016-04-30  21.832399  21.323007          NaN  21.664137  21.606514\n",
            "2016-05-31  23.282499  22.916101          NaN  23.096980  23.157274\n",
            "2016-06-30  22.208816  21.867928          NaN  21.900393  22.169394\n",
            "2016-07-31  24.244875  24.043124          NaN  24.161392  24.166029\n",
            "2016-08-31  24.847185  24.630352          NaN  24.635016  24.737602\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zXT6cMquSq_P"
      },
      "source": [
        "'Append' is essentially to concat two DataFrames by axis = 0, thus here is an alternative way to append:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2EuSaFO9HW-D"
      },
      "outputs": [],
      "source": [
        "concat = pd.concat([aapl_bar, df_2017], axis = 0)\n",
        "print(concat)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-YXL7V9ASst9"
      },
      "source": [
        "Please note that if the two DataFrame have some columns with the same column names, these columns are considered to be the same and will be merged. It's very important to have the right column names. If we change a column names here:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "aT1eoa8mHW-D"
      },
      "outputs": [],
      "source": [
        "df_2017.columns = ['Change', 'High','Low','Close']\n",
        "concat = pd.concat([aapl_bar, df_2017], axis = 0)\n",
        "print(concat)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "shbpOFyyS6uV"
      },
      "source": [
        "Since the column name of 'Open' has been changed, the new DataFrame has an new column named 'Change'.\n",
        "\n",
        "# Summary\n",
        "\n",
        "Hereby we introduced the most import part of python: resampling and DataFrame manipulation. We only introduced the most commonly used method in Financial data analysis. There are also many methods used in data mining, which are also beneficial. You can always check the [Pandas](https://pandas.pydata.org/pandas-docs/stable/index.html) official documentations for help."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xxHKurMNIgZQ"
      },
      "source": [
        "<div align=\"center\">\n",
        "<img style=\"display: block; margin: auto;\" alt=\"photo\" src=\"https://upload.wikimedia.org/wikipedia/en/d/de/Quantopian_logo_2017.png\">\n",
        "</div>\n",
        "\n",
        "# Colab Yahoo Graphical Representations of Data\n",
        "By Evgenia \"Jenny\" Nitishinskaya, Maxwell Margenot, and Delaney Granizo-Mackenzie.\n",
        "\n",
        "Part of the Quantopian Lecture Series:\n",
        "\n",
        "* [www.quantopian.com/lectures](https://www.quantopian.com/lectures)\n",
        "* [github.com/quantopian/research_public](https://github.com/quantopian/research_public)\n",
        "\n",
        "\n",
        "\n",
        "Representing data graphically can be incredibly useful for learning how the data behaves and seeing potential structure or flaws. Care should be taken, as humans are incredibly good at seeing only evidence that confirms our beliefs, and visual data lends itself well to that. Plots are good to use when formulating a hypothesis, but should not be used to test a hypothesis.\n",
        "\n",
        "We will go over some common plots here."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "id": "FnnO3C1AIgZT"
      },
      "outputs": [],
      "source": [
        "# Import our libraries\n",
        "\n",
        "# This is for numerical processing\n",
        "import numpy as np\n",
        "# This is the library most commonly used for plotting in Python.\n",
        "# Notice how we import it 'as' plt, this enables us to type plt\n",
        "# rather than the full string every time.\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5E6FkiPlR85Y",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4e335f24-72cf-45ae-c901-1f1c93710b02"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: yfinance in /usr/local/lib/python3.7/dist-packages (0.1.74)\n",
            "Requirement already satisfied: lxml>=4.5.1 in /usr/local/lib/python3.7/dist-packages (from yfinance) (4.9.1)\n",
            "Requirement already satisfied: numpy>=1.15 in /usr/local/lib/python3.7/dist-packages (from yfinance) (1.21.6)\n",
            "Requirement already satisfied: requests>=2.26 in /usr/local/lib/python3.7/dist-packages (from yfinance) (2.28.1)\n",
            "Requirement already satisfied: pandas>=0.24.0 in /usr/local/lib/python3.7/dist-packages (from yfinance) (1.3.5)\n",
            "Requirement already satisfied: multitasking>=0.0.7 in /usr/local/lib/python3.7/dist-packages (from yfinance) (0.0.11)\n",
            "Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->yfinance) (2022.2.1)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->yfinance) (2.8.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas>=0.24.0->yfinance) (1.15.0)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests>=2.26->yfinance) (2.10)\n",
            "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests>=2.26->yfinance) (1.24.3)\n",
            "Requirement already satisfied: charset-normalizer<3,>=2 in /usr/local/lib/python3.7/dist-packages (from requests>=2.26->yfinance) (2.1.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests>=2.26->yfinance) (2022.6.15)\n"
          ]
        }
      ],
      "source": [
        "!pip install yfinance"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QYLdaw9yIgZU"
      },
      "source": [
        "## Getting Some Data\n",
        "\n",
        "If we're going to plot data we need some data to plot. We'll get the pricing data of Apple (AAPL) and Microsoft (MSFT) to use in our examples.\n",
        "\n",
        "### Data Structure\n",
        "\n",
        "Knowing the structure of your data is very important. Normally you'll have to do a ton of work molding your data into the form you need for testing. Quantopian has done a lot of cleaning on the data, but you still need to put it into the right shapes and formats for your purposes.\n",
        "\n",
        "In this case the data will be returned as a pandas dataframe object. The rows are timestamps, and the columns are the two assets, AAPL and MSFT."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wsYGUYPISDgn",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 437
        },
        "outputId": "7bb26848-69a5-4902-8cec-c7441e4a6277"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[*********************100%***********************]  2 of 2 completed\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Adj Close                 Close                  High             \\\n",
              "                 AAPL       MSFT       AAPL       MSFT       AAPL       MSFT   \n",
              "Date                                                                           \n",
              "2014-01-02  17.444424  31.657238  19.754642  37.160000  19.893929  37.400002   \n",
              "2014-01-03  17.061243  31.444254  19.320715  36.910000  19.775000  37.220001   \n",
              "2014-01-06  17.154276  30.779758  19.426071  36.130001  19.528570  36.889999   \n",
              "2014-01-07  17.031593  31.018295  19.287144  36.410000  19.498571  36.490002   \n",
              "2014-01-08  17.139450  30.464550  19.409286  35.759998  19.484285  36.139999   \n",
              "\n",
              "                  Low                  Open                Volume            \n",
              "                 AAPL       MSFT       AAPL       MSFT       AAPL      MSFT  \n",
              "Date                                                                         \n",
              "2014-01-02  19.715000  37.099998  19.845715  37.349998  234684800  30632200  \n",
              "2014-01-03  19.301071  36.599998  19.745001  37.200001  392467600  31134800  \n",
              "2014-01-06  19.057142  36.110001  19.194643  36.849998  412610800  43603700  \n",
              "2014-01-07  19.211430  36.209999  19.440001  36.330002  317209200  35802800  \n",
              "2014-01-08  19.238930  35.580002  19.243214  36.000000  258529600  59971700  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a5fbd912-4e6d-4a0a-bef0-85c4caf1be19\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th colspan=\"2\" halign=\"left\">Adj Close</th>\n",
              "      <th colspan=\"2\" halign=\"left\">Close</th>\n",
              "      <th colspan=\"2\" halign=\"left\">High</th>\n",
              "      <th colspan=\"2\" halign=\"left\">Low</th>\n",
              "      <th colspan=\"2\" halign=\"left\">Open</th>\n",
              "      <th colspan=\"2\" halign=\"left\">Volume</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>AAPL</th>\n",
              "      <th>MSFT</th>\n",
              "      <th>AAPL</th>\n",
              "      <th>MSFT</th>\n",
              "      <th>AAPL</th>\n",
              "      <th>MSFT</th>\n",
              "      <th>AAPL</th>\n",
              "      <th>MSFT</th>\n",
              "      <th>AAPL</th>\n",
              "      <th>MSFT</th>\n",
              "      <th>AAPL</th>\n",
              "      <th>MSFT</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2014-01-02</th>\n",
              "      <td>17.444424</td>\n",
              "      <td>31.657238</td>\n",
              "      <td>19.754642</td>\n",
              "      <td>37.160000</td>\n",
              "      <td>19.893929</td>\n",
              "      <td>37.400002</td>\n",
              "      <td>19.715000</td>\n",
              "      <td>37.099998</td>\n",
              "      <td>19.845715</td>\n",
              "      <td>37.349998</td>\n",
              "      <td>234684800</td>\n",
              "      <td>30632200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2014-01-03</th>\n",
              "      <td>17.061243</td>\n",
              "      <td>31.444254</td>\n",
              "      <td>19.320715</td>\n",
              "      <td>36.910000</td>\n",
              "      <td>19.775000</td>\n",
              "      <td>37.220001</td>\n",
              "      <td>19.301071</td>\n",
              "      <td>36.599998</td>\n",
              "      <td>19.745001</td>\n",
              "      <td>37.200001</td>\n",
              "      <td>392467600</td>\n",
              "      <td>31134800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2014-01-06</th>\n",
              "      <td>17.154276</td>\n",
              "      <td>30.779758</td>\n",
              "      <td>19.426071</td>\n",
              "      <td>36.130001</td>\n",
              "      <td>19.528570</td>\n",
              "      <td>36.889999</td>\n",
              "      <td>19.057142</td>\n",
              "      <td>36.110001</td>\n",
              "      <td>19.194643</td>\n",
              "      <td>36.849998</td>\n",
              "      <td>412610800</td>\n",
              "      <td>43603700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2014-01-07</th>\n",
              "      <td>17.031593</td>\n",
              "      <td>31.018295</td>\n",
              "      <td>19.287144</td>\n",
              "      <td>36.410000</td>\n",
              "      <td>19.498571</td>\n",
              "      <td>36.490002</td>\n",
              "      <td>19.211430</td>\n",
              "      <td>36.209999</td>\n",
              "      <td>19.440001</td>\n",
              "      <td>36.330002</td>\n",
              "      <td>317209200</td>\n",
              "      <td>35802800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2014-01-08</th>\n",
              "      <td>17.139450</td>\n",
              "      <td>30.464550</td>\n",
              "      <td>19.409286</td>\n",
              "      <td>35.759998</td>\n",
              "      <td>19.484285</td>\n",
              "      <td>36.139999</td>\n",
              "      <td>19.238930</td>\n",
              "      <td>35.580002</td>\n",
              "      <td>19.243214</td>\n",
              "      <td>36.000000</td>\n",
              "      <td>258529600</td>\n",
              "      <td>59971700</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a5fbd912-4e6d-4a0a-bef0-85c4caf1be19')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a5fbd912-4e6d-4a0a-bef0-85c4caf1be19 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a5fbd912-4e6d-4a0a-bef0-85c4caf1be19');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 357
        }
      ],
      "source": [
        "import yfinance as yf\n",
        "\n",
        "data_all = yf.download(\"AAPL,MSFT\", start=\"2014-01-01\", end=\"2015-01-01\")\n",
        "data_all.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8ScM9Jw8UHyB",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "outputId": "2979b10d-7201-4906-9d3b-6754c04cf99f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 AAPL       MSFT\n",
              "Date                            \n",
              "2014-01-02  19.754642  37.160000\n",
              "2014-01-03  19.320715  36.910000\n",
              "2014-01-06  19.426071  36.130001\n",
              "2014-01-07  19.287144  36.410000\n",
              "2014-01-08  19.409286  35.759998"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3e6d793a-303c-4622-a87f-841905adc272\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>AAPL</th>\n",
              "      <th>MSFT</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2014-01-02</th>\n",
              "      <td>19.754642</td>\n",
              "      <td>37.160000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2014-01-03</th>\n",
              "      <td>19.320715</td>\n",
              "      <td>36.910000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2014-01-06</th>\n",
              "      <td>19.426071</td>\n",
              "      <td>36.130001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2014-01-07</th>\n",
              "      <td>19.287144</td>\n",
              "      <td>36.410000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2014-01-08</th>\n",
              "      <td>19.409286</td>\n",
              "      <td>35.759998</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3e6d793a-303c-4622-a87f-841905adc272')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3e6d793a-303c-4622-a87f-841905adc272 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3e6d793a-303c-4622-a87f-841905adc272');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 358
        }
      ],
      "source": [
        "data = data_all[\"Close\"]\n",
        "data.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RGMQcgQYIgZX",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e7ddc21d-9927-4a08-d010-9e27b5b8c627"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Date\n",
              "2014-01-02    37.160000\n",
              "2014-01-03    36.910000\n",
              "2014-01-06    36.130001\n",
              "2014-01-07    36.410000\n",
              "2014-01-08    35.759998\n",
              "Name: MSFT, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 359
        }
      ],
      "source": [
        "data['MSFT'].head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vE2yW8_TIgZY"
      },
      "source": [
        "##Histogram\n",
        "\n",
        "A histogram is a visualization of how frequent different values of data are. By displaying a frequency distribution using bars, it lets us quickly see where most of the observations are clustered. The height of each bar represents the number of observations that lie in each interval. You can think of a histogram as an empirical and discrete Probability Density Function (PDF)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 664,
      "metadata": {
        "id": "Lk-o25YcIgZZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 512
        },
        "outputId": "f91eb77b-1d2c-4d0d-eaf2-e14a77929677"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3360\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3361\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3362\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'MSFT'",
            "\nThe above exception was the direct cause of the following exception:\n",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-664-2c5c5c597b4d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Plot a histogram using 20 bins\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'MSFT'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Price'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Number of Days Observed'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Frequency Distribution of MSFT Prices, 2014'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3456\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3457\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3458\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3459\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3460\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3361\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3362\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3363\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3364\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3365\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_scalar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0misna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhasnans\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'MSFT'"
          ]
        }
      ],
      "source": [
        "# Plot a histogram using 20 bins\n",
        "plt.hist(data['MSFT'], bins=20)\n",
        "plt.xlabel('Price')\n",
        "plt.ylabel('Number of Days Observed')\n",
        "plt.title('Frequency Distribution of MSFT Prices, 2014');"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 181**"
      ],
      "metadata": {
        "id": "SI9F_HZuwtN-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.hist(data['MSFT'], bins=50)\n",
        "plt.xlabel('Price')\n",
        "plt.ylabel('Number of Days')\n",
        "plt.title('Frequency Distribution of MSFT Prices, 2017');"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "97hsQ7T7wyNT",
        "outputId": "72a2ded7-5494-4825-8917-6cf784b13d4d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tnd-CcEjIgZZ"
      },
      "source": [
        "### Returns Histogram\n",
        "\n",
        "In finance rarely will we look at the distribution of prices. The reason for this is that prices are non-stationary and move around a lot. For more info on non-stationarity please see [this lecture](https://www.quantopian.com/lectures/integration-cointegration-and-stationarity). Instead we will use daily returns. Let's try that now."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Yheega7DIgZa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "035fca01-2c8d-44c2-f7a0-3a11b314fe99"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# Remove the first element because percent change from nothing to something is NaN\n",
        "R = data['MSFT'].pct_change()[1:]\n",
        "\n",
        "# Plot a histogram using 20 bins\n",
        "plt.hist(R, bins=20)\n",
        "plt.xlabel('Return')\n",
        "plt.ylabel('Number of Days Observed')\n",
        "plt.title('Frequency Distribution of MSFT Returns, 2014');"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 182**"
      ],
      "metadata": {
        "id": "8P5Rm7ikw6qt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "R = data['MSFT'].pct_change()[4:]\n",
        "\n",
        "plt.hist(R, bins=40)\n",
        "plt.xlabel('Return')\n",
        "plt.ylabel('Number of Days')\n",
        "plt.title('Frequency Distribution of MSFT Returns, 2017');"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "Eb0ZAE5Cw8j9",
        "outputId": "777faf75-2a64-49e1-c59e-2c01cddc8e3b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SJI-zOd4IgZa"
      },
      "source": [
        "The graph above shows, for example, that the daily returns of MSFT were above 0.03 on fewer than 5 days in 2014. Note that we are completely discarding the dates corresponding to these returns. \n",
        "\n",
        "#####IMPORTANT: Note also that this does not imply that future returns will have the same distribution."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Uc-QNoXsIgZa"
      },
      "source": [
        "### Cumulative Histogram (Discrete Estimated CDF)\n",
        "\n",
        "An alternative way to display the data would be using a cumulative distribution function, in which the height of a bar represents the number of observations that lie in that bin or in one of the previous ones. This graph is always nondecreasing since you cannot have a negative number of observations. The choice of graph depends on the information you are interested in."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ieFhExxEIgZb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "8b84f442-8272-4dee-f4ca-a2f46d66cbef"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# Remove the first element because percent change from nothing to something is NaN\n",
        "R = data['MSFT'].pct_change()[1:]\n",
        "\n",
        "# Plot a histogram using 20 bins\n",
        "plt.hist(R, bins=20, cumulative=True)\n",
        "plt.xlabel('Return')\n",
        "plt.ylabel('Number of Days Observed')\n",
        "plt.title('Cumulative Distribution of MSFT Returns, 2014');"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**My own example 183**"
      ],
      "metadata": {
        "id": "zrqtuOEBxGAv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "R = data['MSFT'].pct_change()[1:]\n",
        "\n",
        "plt.hist(R, bins=40, cumulative=False)\n",
        "plt.xlabel('Return')\n",
        "plt.ylabel('Number of Days')\n",
        "plt.title('Cumulative Distribution of MSFT Returns, 2018');"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "PqfckhrRxIYQ",
        "outputId": "9dd63302-60ed-40e0-b3d3-b0cdb3eb5d51"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "56lbfHCIIgZb"
      },
      "source": [
        "## Scatter plot\n",
        "\n",
        "A scatter plot is useful for visualizing the relationship between two data sets. We use two data sets which have some sort of correspondence, such as the date on which the measurement was taken. Each point represents two corresponding values from the two data sets. However, we don't plot the date that the measurements were taken on."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "816OwSfrIgZb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "8af1ed10-d589-459c-b17c-8bf896837e75"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plt.scatter(data['MSFT'], data['AAPL'])\n",
        "plt.xlabel('MSFT')\n",
        "plt.ylabel('AAPL')\n",
        "plt.title('Daily Prices in 2014');"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BHGrTnV_IgZb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "f7869bf5-67cd-49bb-fbad-6077958a2357"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "R_msft = data['MSFT'].pct_change()[1:]\n",
        "R_aapl = data['AAPL'].pct_change()[1:]\n",
        "\n",
        "plt.scatter(R_msft, R_aapl)\n",
        "plt.xlabel('MSFT')\n",
        "plt.ylabel('AAPL')\n",
        "plt.title('Daily Returns in 2014');"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QEhgJmF6IgZc"
      },
      "source": [
        "# Line graph\n",
        "\n",
        "A line graph can be used when we want to track the development of the y value as the x value changes. For instance, when we are plotting the price of a stock, showing it as a line graph instead of just plotting the data points makes it easier to follow the price over time. This necessarily involves \"connecting the dots\" between the data points, which can mask out changes that happened between the time we took measurements."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JFvFQCj3IgZc"
      },
      "outputs": [],
      "source": [
        "plt.plot(data['MSFT'])\n",
        "plt.plot(data['AAPL'])\n",
        "plt.ylabel('Price')\n",
        "plt.legend(['MSFT', 'AAPL']);"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7MosceMUIgZd"
      },
      "outputs": [],
      "source": [
        "# Remove the first element because percent change from nothing to something is NaN\n",
        "R = data['MSFT'].pct_change()[1:]\n",
        "\n",
        "plt.plot(R)\n",
        "plt.ylabel('Return')\n",
        "plt.title('MSFT Returns');"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 2",
      "language": "python",
      "name": "python2"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 2
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython2",
      "version": "2.7.12"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}